/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@googlemaps/js-api-loader/dist/index.esm.js":
/*!******************************************************************!*\
  !*** ./node_modules/@googlemaps/js-api-loader/dist/index.esm.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ID: () => (/* binding */ DEFAULT_ID),\n/* harmony export */   Loader: () => (/* binding */ Loader),\n/* harmony export */   LoaderStatus: () => (/* binding */ LoaderStatus)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nvar fastDeepEqual = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at.\n *\n *      Http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_ID = \"__googleMapsScriptId\";\n/**\n * The status of the [[Loader]].\n */\nvar LoaderStatus;\n(function (LoaderStatus) {\n    LoaderStatus[LoaderStatus[\"INITIALIZED\"] = 0] = \"INITIALIZED\";\n    LoaderStatus[LoaderStatus[\"LOADING\"] = 1] = \"LOADING\";\n    LoaderStatus[LoaderStatus[\"SUCCESS\"] = 2] = \"SUCCESS\";\n    LoaderStatus[LoaderStatus[\"FAILURE\"] = 3] = \"FAILURE\";\n})(LoaderStatus || (LoaderStatus = {}));\n/**\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\n * dynamically using\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n * It works by dynamically creating and appending a script node to the the\n * document head and wrapping the callback function so as to return a promise.\n *\n * ```\n * const loader = new Loader({\n *   apiKey: \"\",\n *   version: \"weekly\",\n *   libraries: [\"places\"]\n * });\n *\n * loader.load().then((google) => {\n *   const map = new google.maps.Map(...)\n * })\n * ```\n */\nclass Loader {\n    /**\n     * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\n     * using this library, instead the defaults are set by the Google Maps\n     * JavaScript API server.\n     *\n     * ```\n     * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\n     * ```\n     */\n    constructor({ apiKey, authReferrerPolicy, channel, client, id = DEFAULT_ID, language, libraries = [], mapIds, nonce, region, retries = 3, url = \"https://maps.googleapis.com/maps/api/js\", version, }) {\n        this.callbacks = [];\n        this.done = false;\n        this.loading = false;\n        this.errors = [];\n        this.apiKey = apiKey;\n        this.authReferrerPolicy = authReferrerPolicy;\n        this.channel = channel;\n        this.client = client;\n        this.id = id || DEFAULT_ID; // Do not allow empty string\n        this.language = language;\n        this.libraries = libraries;\n        this.mapIds = mapIds;\n        this.nonce = nonce;\n        this.region = region;\n        this.retries = retries;\n        this.url = url;\n        this.version = version;\n        if (Loader.instance) {\n            if (!fastDeepEqual(this.options, Loader.instance.options)) {\n                throw new Error(`Loader must not be called again with different options. ${JSON.stringify(this.options)} !== ${JSON.stringify(Loader.instance.options)}`);\n            }\n            return Loader.instance;\n        }\n        Loader.instance = this;\n    }\n    get options() {\n        return {\n            version: this.version,\n            apiKey: this.apiKey,\n            channel: this.channel,\n            client: this.client,\n            id: this.id,\n            libraries: this.libraries,\n            language: this.language,\n            region: this.region,\n            mapIds: this.mapIds,\n            nonce: this.nonce,\n            url: this.url,\n            authReferrerPolicy: this.authReferrerPolicy,\n        };\n    }\n    get status() {\n        if (this.errors.length) {\n            return LoaderStatus.FAILURE;\n        }\n        if (this.done) {\n            return LoaderStatus.SUCCESS;\n        }\n        if (this.loading) {\n            return LoaderStatus.LOADING;\n        }\n        return LoaderStatus.INITIALIZED;\n    }\n    get failed() {\n        return this.done && !this.loading && this.errors.length >= this.retries + 1;\n    }\n    /**\n     * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\n     *\n     * @ignore\n     * @deprecated\n     */\n    createUrl() {\n        let url = this.url;\n        url += `?callback=__googleMapsCallback`;\n        if (this.apiKey) {\n            url += `&key=${this.apiKey}`;\n        }\n        if (this.channel) {\n            url += `&channel=${this.channel}`;\n        }\n        if (this.client) {\n            url += `&client=${this.client}`;\n        }\n        if (this.libraries.length > 0) {\n            url += `&libraries=${this.libraries.join(\",\")}`;\n        }\n        if (this.language) {\n            url += `&language=${this.language}`;\n        }\n        if (this.region) {\n            url += `&region=${this.region}`;\n        }\n        if (this.version) {\n            url += `&v=${this.version}`;\n        }\n        if (this.mapIds) {\n            url += `&map_ids=${this.mapIds.join(\",\")}`;\n        }\n        if (this.authReferrerPolicy) {\n            url += `&auth_referrer_policy=${this.authReferrerPolicy}`;\n        }\n        return url;\n    }\n    deleteScript() {\n        const script = document.getElementById(this.id);\n        if (script) {\n            script.remove();\n        }\n    }\n    /**\n     * Load the Google Maps JavaScript API script and return a Promise.\n     * @deprecated, use importLibrary() instead.\n     */\n    load() {\n        return this.loadPromise();\n    }\n    /**\n     * Load the Google Maps JavaScript API script and return a Promise.\n     *\n     * @ignore\n     * @deprecated, use importLibrary() instead.\n     */\n    loadPromise() {\n        return new Promise((resolve, reject) => {\n            this.loadCallback((err) => {\n                if (!err) {\n                    resolve(window.google);\n                }\n                else {\n                    reject(err.error);\n                }\n            });\n        });\n    }\n    importLibrary(name) {\n        this.execute();\n        return google.maps.importLibrary(name);\n    }\n    /**\n     * Load the Google Maps JavaScript API script with a callback.\n     * @deprecated, use importLibrary() instead.\n     */\n    loadCallback(fn) {\n        this.callbacks.push(fn);\n        this.execute();\n    }\n    /**\n     * Set the script on document.\n     */\n    setScript() {\n        var _a, _b;\n        if (document.getElementById(this.id)) {\n            // TODO wrap onerror callback for cases where the script was loaded elsewhere\n            this.callback();\n            return;\n        }\n        const params = {\n            key: this.apiKey,\n            channel: this.channel,\n            client: this.client,\n            libraries: this.libraries.length && this.libraries,\n            v: this.version,\n            mapIds: this.mapIds,\n            language: this.language,\n            region: this.region,\n            authReferrerPolicy: this.authReferrerPolicy,\n        };\n        // keep the URL minimal:\n        Object.keys(params).forEach(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (key) => !params[key] && delete params[key]);\n        if (!((_b = (_a = window === null || window === void 0 ? void 0 : window.google) === null || _a === void 0 ? void 0 : _a.maps) === null || _b === void 0 ? void 0 : _b.importLibrary)) {\n            // tweaked copy of https://developers.google.com/maps/documentation/javascript/load-maps-js-api#dynamic-library-import\n            // which also sets the base url, the id, and the nonce\n            /* eslint-disable */\n            ((g) => {\n                // @ts-ignore\n                let h, a, k, p = \"The Google Maps JavaScript API\", c = \"google\", l = \"importLibrary\", q = \"__ib__\", m = document, b = window;\n                // @ts-ignore\n                b = b[c] || (b[c] = {});\n                // @ts-ignore\n                const d = b.maps || (b.maps = {}), r = new Set(), e = new URLSearchParams(), u = () => \n                // @ts-ignore\n                h || (h = new Promise((f, n) => __awaiter(this, void 0, void 0, function* () {\n                    var _a;\n                    yield (a = m.createElement(\"script\"));\n                    a.id = this.id;\n                    e.set(\"libraries\", [...r] + \"\");\n                    // @ts-ignore\n                    for (k in g)\n                        e.set(k.replace(/[A-Z]/g, (t) => \"_\" + t[0].toLowerCase()), g[k]);\n                    e.set(\"callback\", c + \".maps.\" + q);\n                    a.src = this.url + `?` + e;\n                    d[q] = f;\n                    a.onerror = () => (h = n(Error(p + \" could not load.\")));\n                    // @ts-ignore\n                    a.nonce = this.nonce || ((_a = m.querySelector(\"script[nonce]\")) === null || _a === void 0 ? void 0 : _a.nonce) || \"\";\n                    m.head.append(a);\n                })));\n                // @ts-ignore\n                d[l] ? console.warn(p + \" only loads once. Ignoring:\", g) : (d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)));\n            })(params);\n            /* eslint-enable */\n        }\n        // While most libraries populate the global namespace when loaded via bootstrap params,\n        // this is not the case for \"marker\" when used with the inline bootstrap loader\n        // (and maybe others in the future). So ensure there is an importLibrary for each:\n        const libraryPromises = this.libraries.map((library) => this.importLibrary(library));\n        // ensure at least one library, to kick off loading...\n        if (!libraryPromises.length) {\n            libraryPromises.push(this.importLibrary(\"core\"));\n        }\n        Promise.all(libraryPromises).then(() => this.callback(), (error) => {\n            const event = new ErrorEvent(\"error\", { error }); // for backwards compat\n            this.loadErrorCallback(event);\n        });\n    }\n    /**\n     * Reset the loader state.\n     */\n    reset() {\n        this.deleteScript();\n        this.done = false;\n        this.loading = false;\n        this.errors = [];\n        this.onerrorEvent = null;\n    }\n    resetIfRetryingFailed() {\n        if (this.failed) {\n            this.reset();\n        }\n    }\n    loadErrorCallback(e) {\n        this.errors.push(e);\n        if (this.errors.length <= this.retries) {\n            const delay = this.errors.length * Math.pow(2, this.errors.length);\n            console.error(`Failed to load Google Maps script, retrying in ${delay} ms.`);\n            setTimeout(() => {\n                this.deleteScript();\n                this.setScript();\n            }, delay);\n        }\n        else {\n            this.onerrorEvent = e;\n            this.callback();\n        }\n    }\n    callback() {\n        this.done = true;\n        this.loading = false;\n        this.callbacks.forEach((cb) => {\n            cb(this.onerrorEvent);\n        });\n        this.callbacks = [];\n    }\n    execute() {\n        this.resetIfRetryingFailed();\n        if (this.done) {\n            this.callback();\n        }\n        else {\n            // short circuit and warn if google.maps is already loaded\n            if (window.google && window.google.maps && window.google.maps.version) {\n                console.warn(\"Google Maps already loaded outside @googlemaps/js-api-loader.\" +\n                    \"This may result in undesirable behavior as options and script parameters may not match.\");\n                this.callback();\n                return;\n            }\n            if (this.loading) ;\n            else {\n                this.loading = true;\n                this.setScript();\n            }\n        }\n    }\n}\n\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@googlemaps/js-api-loader/dist/index.esm.js\n");

/***/ }),

/***/ "./node_modules/@splidejs/splide/dist/js/splide.esm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@splidejs/splide/dist/js/splide.esm.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CLASSES: () => (/* binding */ CLASSES),\n/* harmony export */   CLASS_ACTIVE: () => (/* binding */ CLASS_ACTIVE),\n/* harmony export */   CLASS_ARROW: () => (/* binding */ CLASS_ARROW),\n/* harmony export */   CLASS_ARROWS: () => (/* binding */ CLASS_ARROWS),\n/* harmony export */   CLASS_ARROW_NEXT: () => (/* binding */ CLASS_ARROW_NEXT),\n/* harmony export */   CLASS_ARROW_PREV: () => (/* binding */ CLASS_ARROW_PREV),\n/* harmony export */   CLASS_CLONE: () => (/* binding */ CLASS_CLONE),\n/* harmony export */   CLASS_CONTAINER: () => (/* binding */ CLASS_CONTAINER),\n/* harmony export */   CLASS_FOCUS_IN: () => (/* binding */ CLASS_FOCUS_IN),\n/* harmony export */   CLASS_INITIALIZED: () => (/* binding */ CLASS_INITIALIZED),\n/* harmony export */   CLASS_LIST: () => (/* binding */ CLASS_LIST),\n/* harmony export */   CLASS_LOADING: () => (/* binding */ CLASS_LOADING),\n/* harmony export */   CLASS_NEXT: () => (/* binding */ CLASS_NEXT),\n/* harmony export */   CLASS_OVERFLOW: () => (/* binding */ CLASS_OVERFLOW),\n/* harmony export */   CLASS_PAGINATION: () => (/* binding */ CLASS_PAGINATION),\n/* harmony export */   CLASS_PAGINATION_PAGE: () => (/* binding */ CLASS_PAGINATION_PAGE),\n/* harmony export */   CLASS_PREV: () => (/* binding */ CLASS_PREV),\n/* harmony export */   CLASS_PROGRESS: () => (/* binding */ CLASS_PROGRESS),\n/* harmony export */   CLASS_PROGRESS_BAR: () => (/* binding */ CLASS_PROGRESS_BAR),\n/* harmony export */   CLASS_ROOT: () => (/* binding */ CLASS_ROOT),\n/* harmony export */   CLASS_SLIDE: () => (/* binding */ CLASS_SLIDE),\n/* harmony export */   CLASS_SPINNER: () => (/* binding */ CLASS_SPINNER),\n/* harmony export */   CLASS_SR: () => (/* binding */ CLASS_SR),\n/* harmony export */   CLASS_TOGGLE: () => (/* binding */ CLASS_TOGGLE),\n/* harmony export */   CLASS_TOGGLE_PAUSE: () => (/* binding */ CLASS_TOGGLE_PAUSE),\n/* harmony export */   CLASS_TOGGLE_PLAY: () => (/* binding */ CLASS_TOGGLE_PLAY),\n/* harmony export */   CLASS_TRACK: () => (/* binding */ CLASS_TRACK),\n/* harmony export */   CLASS_VISIBLE: () => (/* binding */ CLASS_VISIBLE),\n/* harmony export */   DEFAULTS: () => (/* binding */ DEFAULTS),\n/* harmony export */   EVENT_ACTIVE: () => (/* binding */ EVENT_ACTIVE),\n/* harmony export */   EVENT_ARROWS_MOUNTED: () => (/* binding */ EVENT_ARROWS_MOUNTED),\n/* harmony export */   EVENT_ARROWS_UPDATED: () => (/* binding */ EVENT_ARROWS_UPDATED),\n/* harmony export */   EVENT_AUTOPLAY_PAUSE: () => (/* binding */ EVENT_AUTOPLAY_PAUSE),\n/* harmony export */   EVENT_AUTOPLAY_PLAY: () => (/* binding */ EVENT_AUTOPLAY_PLAY),\n/* harmony export */   EVENT_AUTOPLAY_PLAYING: () => (/* binding */ EVENT_AUTOPLAY_PLAYING),\n/* harmony export */   EVENT_CLICK: () => (/* binding */ EVENT_CLICK),\n/* harmony export */   EVENT_DESTROY: () => (/* binding */ EVENT_DESTROY),\n/* harmony export */   EVENT_DRAG: () => (/* binding */ EVENT_DRAG),\n/* harmony export */   EVENT_DRAGGED: () => (/* binding */ EVENT_DRAGGED),\n/* harmony export */   EVENT_DRAGGING: () => (/* binding */ EVENT_DRAGGING),\n/* harmony export */   EVENT_END_INDEX_CHANGED: () => (/* binding */ EVENT_END_INDEX_CHANGED),\n/* harmony export */   EVENT_HIDDEN: () => (/* binding */ EVENT_HIDDEN),\n/* harmony export */   EVENT_INACTIVE: () => (/* binding */ EVENT_INACTIVE),\n/* harmony export */   EVENT_LAZYLOAD_LOADED: () => (/* binding */ EVENT_LAZYLOAD_LOADED),\n/* harmony export */   EVENT_MOUNTED: () => (/* binding */ EVENT_MOUNTED),\n/* harmony export */   EVENT_MOVE: () => (/* binding */ EVENT_MOVE),\n/* harmony export */   EVENT_MOVED: () => (/* binding */ EVENT_MOVED),\n/* harmony export */   EVENT_NAVIGATION_MOUNTED: () => (/* binding */ EVENT_NAVIGATION_MOUNTED),\n/* harmony export */   EVENT_OVERFLOW: () => (/* binding */ EVENT_OVERFLOW),\n/* harmony export */   EVENT_PAGINATION_MOUNTED: () => (/* binding */ EVENT_PAGINATION_MOUNTED),\n/* harmony export */   EVENT_PAGINATION_UPDATED: () => (/* binding */ EVENT_PAGINATION_UPDATED),\n/* harmony export */   EVENT_READY: () => (/* binding */ EVENT_READY),\n/* harmony export */   EVENT_REFRESH: () => (/* binding */ EVENT_REFRESH),\n/* harmony export */   EVENT_RESIZE: () => (/* binding */ EVENT_RESIZE),\n/* harmony export */   EVENT_RESIZED: () => (/* binding */ EVENT_RESIZED),\n/* harmony export */   EVENT_SCROLL: () => (/* binding */ EVENT_SCROLL),\n/* harmony export */   EVENT_SCROLLED: () => (/* binding */ EVENT_SCROLLED),\n/* harmony export */   EVENT_SHIFTED: () => (/* binding */ EVENT_SHIFTED),\n/* harmony export */   EVENT_SLIDE_KEYDOWN: () => (/* binding */ EVENT_SLIDE_KEYDOWN),\n/* harmony export */   EVENT_UPDATED: () => (/* binding */ EVENT_UPDATED),\n/* harmony export */   EVENT_VISIBLE: () => (/* binding */ EVENT_VISIBLE),\n/* harmony export */   EventBinder: () => (/* binding */ EventBinder),\n/* harmony export */   EventInterface: () => (/* binding */ EventInterface),\n/* harmony export */   FADE: () => (/* binding */ FADE),\n/* harmony export */   LOOP: () => (/* binding */ LOOP),\n/* harmony export */   LTR: () => (/* binding */ LTR),\n/* harmony export */   RTL: () => (/* binding */ RTL),\n/* harmony export */   RequestInterval: () => (/* binding */ RequestInterval),\n/* harmony export */   SLIDE: () => (/* binding */ SLIDE),\n/* harmony export */   STATUS_CLASSES: () => (/* binding */ STATUS_CLASSES),\n/* harmony export */   Splide: () => (/* binding */ Splide),\n/* harmony export */   SplideRenderer: () => (/* binding */ SplideRenderer),\n/* harmony export */   State: () => (/* binding */ State),\n/* harmony export */   TTB: () => (/* binding */ TTB),\n/* harmony export */   Throttle: () => (/* binding */ Throttle),\n/* harmony export */   \"default\": () => (/* binding */ Splide)\n/* harmony export */ });\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n/*!\n * Splide.js\n * Version  : 4.1.4\n * License  : MIT\n * Copyright: 2022 Naotoshi Fujita\n */\nvar MEDIA_PREFERS_REDUCED_MOTION = \"(prefers-reduced-motion: reduce)\";\nvar CREATED = 1;\nvar MOUNTED = 2;\nvar IDLE = 3;\nvar MOVING = 4;\nvar SCROLLING = 5;\nvar DRAGGING = 6;\nvar DESTROYED = 7;\nvar STATES = {\n  CREATED: CREATED,\n  MOUNTED: MOUNTED,\n  IDLE: IDLE,\n  MOVING: MOVING,\n  SCROLLING: SCROLLING,\n  DRAGGING: DRAGGING,\n  DESTROYED: DESTROYED\n};\n\nfunction empty(array) {\n  array.length = 0;\n}\n\nfunction slice(arrayLike, start, end) {\n  return Array.prototype.slice.call(arrayLike, start, end);\n}\n\nfunction apply(func) {\n  return func.bind.apply(func, [null].concat(slice(arguments, 1)));\n}\n\nvar nextTick = setTimeout;\n\nvar noop = function noop() {};\n\nfunction raf(func) {\n  return requestAnimationFrame(func);\n}\n\nfunction typeOf(type, subject) {\n  return typeof subject === type;\n}\n\nfunction isObject(subject) {\n  return !isNull(subject) && typeOf(\"object\", subject);\n}\n\nvar isArray = Array.isArray;\nvar isFunction = apply(typeOf, \"function\");\nvar isString = apply(typeOf, \"string\");\nvar isUndefined = apply(typeOf, \"undefined\");\n\nfunction isNull(subject) {\n  return subject === null;\n}\n\nfunction isHTMLElement(subject) {\n  try {\n    return subject instanceof (subject.ownerDocument.defaultView || window).HTMLElement;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction toArray(value) {\n  return isArray(value) ? value : [value];\n}\n\nfunction forEach(values, iteratee) {\n  toArray(values).forEach(iteratee);\n}\n\nfunction includes(array, value) {\n  return array.indexOf(value) > -1;\n}\n\nfunction push(array, items) {\n  array.push.apply(array, toArray(items));\n  return array;\n}\n\nfunction toggleClass(elm, classes, add) {\n  if (elm) {\n    forEach(classes, function (name) {\n      if (name) {\n        elm.classList[add ? \"add\" : \"remove\"](name);\n      }\n    });\n  }\n}\n\nfunction addClass(elm, classes) {\n  toggleClass(elm, isString(classes) ? classes.split(\" \") : classes, true);\n}\n\nfunction append(parent, children) {\n  forEach(children, parent.appendChild.bind(parent));\n}\n\nfunction before(nodes, ref) {\n  forEach(nodes, function (node) {\n    var parent = (ref || node).parentNode;\n\n    if (parent) {\n      parent.insertBefore(node, ref);\n    }\n  });\n}\n\nfunction matches(elm, selector) {\n  return isHTMLElement(elm) && (elm[\"msMatchesSelector\"] || elm.matches).call(elm, selector);\n}\n\nfunction children(parent, selector) {\n  var children2 = parent ? slice(parent.children) : [];\n  return selector ? children2.filter(function (child) {\n    return matches(child, selector);\n  }) : children2;\n}\n\nfunction child(parent, selector) {\n  return selector ? children(parent, selector)[0] : parent.firstElementChild;\n}\n\nvar ownKeys = Object.keys;\n\nfunction forOwn(object, iteratee, right) {\n  if (object) {\n    (right ? ownKeys(object).reverse() : ownKeys(object)).forEach(function (key) {\n      key !== \"__proto__\" && iteratee(object[key], key);\n    });\n  }\n\n  return object;\n}\n\nfunction assign(object) {\n  slice(arguments, 1).forEach(function (source) {\n    forOwn(source, function (value, key) {\n      object[key] = source[key];\n    });\n  });\n  return object;\n}\n\nfunction merge(object) {\n  slice(arguments, 1).forEach(function (source) {\n    forOwn(source, function (value, key) {\n      if (isArray(value)) {\n        object[key] = value.slice();\n      } else if (isObject(value)) {\n        object[key] = merge({}, isObject(object[key]) ? object[key] : {}, value);\n      } else {\n        object[key] = value;\n      }\n    });\n  });\n  return object;\n}\n\nfunction omit(object, keys) {\n  forEach(keys || ownKeys(object), function (key) {\n    delete object[key];\n  });\n}\n\nfunction removeAttribute(elms, attrs) {\n  forEach(elms, function (elm) {\n    forEach(attrs, function (attr) {\n      elm && elm.removeAttribute(attr);\n    });\n  });\n}\n\nfunction setAttribute(elms, attrs, value) {\n  if (isObject(attrs)) {\n    forOwn(attrs, function (value2, name) {\n      setAttribute(elms, name, value2);\n    });\n  } else {\n    forEach(elms, function (elm) {\n      isNull(value) || value === \"\" ? removeAttribute(elm, attrs) : elm.setAttribute(attrs, String(value));\n    });\n  }\n}\n\nfunction create(tag, attrs, parent) {\n  var elm = document.createElement(tag);\n\n  if (attrs) {\n    isString(attrs) ? addClass(elm, attrs) : setAttribute(elm, attrs);\n  }\n\n  parent && append(parent, elm);\n  return elm;\n}\n\nfunction style(elm, prop, value) {\n  if (isUndefined(value)) {\n    return getComputedStyle(elm)[prop];\n  }\n\n  if (!isNull(value)) {\n    elm.style[prop] = \"\" + value;\n  }\n}\n\nfunction display(elm, display2) {\n  style(elm, \"display\", display2);\n}\n\nfunction focus(elm) {\n  elm[\"setActive\"] && elm[\"setActive\"]() || elm.focus({\n    preventScroll: true\n  });\n}\n\nfunction getAttribute(elm, attr) {\n  return elm.getAttribute(attr);\n}\n\nfunction hasClass(elm, className) {\n  return elm && elm.classList.contains(className);\n}\n\nfunction rect(target) {\n  return target.getBoundingClientRect();\n}\n\nfunction remove(nodes) {\n  forEach(nodes, function (node) {\n    if (node && node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  });\n}\n\nfunction parseHtml(html) {\n  return child(new DOMParser().parseFromString(html, \"text/html\").body);\n}\n\nfunction prevent(e, stopPropagation) {\n  e.preventDefault();\n\n  if (stopPropagation) {\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n  }\n}\n\nfunction query(parent, selector) {\n  return parent && parent.querySelector(selector);\n}\n\nfunction queryAll(parent, selector) {\n  return selector ? slice(parent.querySelectorAll(selector)) : [];\n}\n\nfunction removeClass(elm, classes) {\n  toggleClass(elm, classes, false);\n}\n\nfunction timeOf(e) {\n  return e.timeStamp;\n}\n\nfunction unit(value) {\n  return isString(value) ? value : value ? value + \"px\" : \"\";\n}\n\nvar PROJECT_CODE = \"splide\";\nvar DATA_ATTRIBUTE = \"data-\" + PROJECT_CODE;\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(\"[\" + PROJECT_CODE + \"] \" + (message || \"\"));\n  }\n}\n\nvar min = Math.min,\n    max = Math.max,\n    floor = Math.floor,\n    ceil = Math.ceil,\n    abs = Math.abs;\n\nfunction approximatelyEqual(x, y, epsilon) {\n  return abs(x - y) < epsilon;\n}\n\nfunction between(number, x, y, exclusive) {\n  var minimum = min(x, y);\n  var maximum = max(x, y);\n  return exclusive ? minimum < number && number < maximum : minimum <= number && number <= maximum;\n}\n\nfunction clamp(number, x, y) {\n  var minimum = min(x, y);\n  var maximum = max(x, y);\n  return min(max(minimum, number), maximum);\n}\n\nfunction sign(x) {\n  return +(x > 0) - +(x < 0);\n}\n\nfunction camelToKebab(string) {\n  return string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n\nfunction format(string, replacements) {\n  forEach(replacements, function (replacement) {\n    string = string.replace(\"%s\", \"\" + replacement);\n  });\n  return string;\n}\n\nfunction pad(number) {\n  return number < 10 ? \"0\" + number : \"\" + number;\n}\n\nvar ids = {};\n\nfunction uniqueId(prefix) {\n  return \"\" + prefix + pad(ids[prefix] = (ids[prefix] || 0) + 1);\n}\n\nfunction EventBinder() {\n  var listeners = [];\n\n  function bind(targets, events, callback, options) {\n    forEachEvent(targets, events, function (target, event, namespace) {\n      var isEventTarget = (\"addEventListener\" in target);\n      var remover = isEventTarget ? target.removeEventListener.bind(target, event, callback, options) : target[\"removeListener\"].bind(target, callback);\n      isEventTarget ? target.addEventListener(event, callback, options) : target[\"addListener\"](callback);\n      listeners.push([target, event, namespace, callback, remover]);\n    });\n  }\n\n  function unbind(targets, events, callback) {\n    forEachEvent(targets, events, function (target, event, namespace) {\n      listeners = listeners.filter(function (listener) {\n        if (listener[0] === target && listener[1] === event && listener[2] === namespace && (!callback || listener[3] === callback)) {\n          listener[4]();\n          return false;\n        }\n\n        return true;\n      });\n    });\n  }\n\n  function dispatch(target, type, detail) {\n    var e;\n    var bubbles = true;\n\n    if (typeof CustomEvent === \"function\") {\n      e = new CustomEvent(type, {\n        bubbles: bubbles,\n        detail: detail\n      });\n    } else {\n      e = document.createEvent(\"CustomEvent\");\n      e.initCustomEvent(type, bubbles, false, detail);\n    }\n\n    target.dispatchEvent(e);\n    return e;\n  }\n\n  function forEachEvent(targets, events, iteratee) {\n    forEach(targets, function (target) {\n      target && forEach(events, function (events2) {\n        events2.split(\" \").forEach(function (eventNS) {\n          var fragment = eventNS.split(\".\");\n          iteratee(target, fragment[0], fragment[1]);\n        });\n      });\n    });\n  }\n\n  function destroy() {\n    listeners.forEach(function (data) {\n      data[4]();\n    });\n    empty(listeners);\n  }\n\n  return {\n    bind: bind,\n    unbind: unbind,\n    dispatch: dispatch,\n    destroy: destroy\n  };\n}\n\nvar EVENT_MOUNTED = \"mounted\";\nvar EVENT_READY = \"ready\";\nvar EVENT_MOVE = \"move\";\nvar EVENT_MOVED = \"moved\";\nvar EVENT_CLICK = \"click\";\nvar EVENT_ACTIVE = \"active\";\nvar EVENT_INACTIVE = \"inactive\";\nvar EVENT_VISIBLE = \"visible\";\nvar EVENT_HIDDEN = \"hidden\";\nvar EVENT_REFRESH = \"refresh\";\nvar EVENT_UPDATED = \"updated\";\nvar EVENT_RESIZE = \"resize\";\nvar EVENT_RESIZED = \"resized\";\nvar EVENT_DRAG = \"drag\";\nvar EVENT_DRAGGING = \"dragging\";\nvar EVENT_DRAGGED = \"dragged\";\nvar EVENT_SCROLL = \"scroll\";\nvar EVENT_SCROLLED = \"scrolled\";\nvar EVENT_OVERFLOW = \"overflow\";\nvar EVENT_DESTROY = \"destroy\";\nvar EVENT_ARROWS_MOUNTED = \"arrows:mounted\";\nvar EVENT_ARROWS_UPDATED = \"arrows:updated\";\nvar EVENT_PAGINATION_MOUNTED = \"pagination:mounted\";\nvar EVENT_PAGINATION_UPDATED = \"pagination:updated\";\nvar EVENT_NAVIGATION_MOUNTED = \"navigation:mounted\";\nvar EVENT_AUTOPLAY_PLAY = \"autoplay:play\";\nvar EVENT_AUTOPLAY_PLAYING = \"autoplay:playing\";\nvar EVENT_AUTOPLAY_PAUSE = \"autoplay:pause\";\nvar EVENT_LAZYLOAD_LOADED = \"lazyload:loaded\";\nvar EVENT_SLIDE_KEYDOWN = \"sk\";\nvar EVENT_SHIFTED = \"sh\";\nvar EVENT_END_INDEX_CHANGED = \"ei\";\n\nfunction EventInterface(Splide2) {\n  var bus = Splide2 ? Splide2.event.bus : document.createDocumentFragment();\n  var binder = EventBinder();\n\n  function on(events, callback) {\n    binder.bind(bus, toArray(events).join(\" \"), function (e) {\n      callback.apply(callback, isArray(e.detail) ? e.detail : []);\n    });\n  }\n\n  function emit(event) {\n    binder.dispatch(bus, event, slice(arguments, 1));\n  }\n\n  if (Splide2) {\n    Splide2.event.on(EVENT_DESTROY, binder.destroy);\n  }\n\n  return assign(binder, {\n    bus: bus,\n    on: on,\n    off: apply(binder.unbind, bus),\n    emit: emit\n  });\n}\n\nfunction RequestInterval(interval, onInterval, onUpdate, limit) {\n  var now = Date.now;\n  var startTime;\n  var rate = 0;\n  var id;\n  var paused = true;\n  var count = 0;\n\n  function update() {\n    if (!paused) {\n      rate = interval ? min((now() - startTime) / interval, 1) : 1;\n      onUpdate && onUpdate(rate);\n\n      if (rate >= 1) {\n        onInterval();\n        startTime = now();\n\n        if (limit && ++count >= limit) {\n          return pause();\n        }\n      }\n\n      id = raf(update);\n    }\n  }\n\n  function start(resume) {\n    resume || cancel();\n    startTime = now() - (resume ? rate * interval : 0);\n    paused = false;\n    id = raf(update);\n  }\n\n  function pause() {\n    paused = true;\n  }\n\n  function rewind() {\n    startTime = now();\n    rate = 0;\n\n    if (onUpdate) {\n      onUpdate(rate);\n    }\n  }\n\n  function cancel() {\n    id && cancelAnimationFrame(id);\n    rate = 0;\n    id = 0;\n    paused = true;\n  }\n\n  function set(time) {\n    interval = time;\n  }\n\n  function isPaused() {\n    return paused;\n  }\n\n  return {\n    start: start,\n    rewind: rewind,\n    pause: pause,\n    cancel: cancel,\n    set: set,\n    isPaused: isPaused\n  };\n}\n\nfunction State(initialState) {\n  var state = initialState;\n\n  function set(value) {\n    state = value;\n  }\n\n  function is(states) {\n    return includes(toArray(states), state);\n  }\n\n  return {\n    set: set,\n    is: is\n  };\n}\n\nfunction Throttle(func, duration) {\n  var interval = RequestInterval(duration || 0, func, null, 1);\n  return function () {\n    interval.isPaused() && interval.start();\n  };\n}\n\nfunction Media(Splide2, Components2, options) {\n  var state = Splide2.state;\n  var breakpoints = options.breakpoints || {};\n  var reducedMotion = options.reducedMotion || {};\n  var binder = EventBinder();\n  var queries = [];\n\n  function setup() {\n    var isMin = options.mediaQuery === \"min\";\n    ownKeys(breakpoints).sort(function (n, m) {\n      return isMin ? +n - +m : +m - +n;\n    }).forEach(function (key) {\n      register(breakpoints[key], \"(\" + (isMin ? \"min\" : \"max\") + \"-width:\" + key + \"px)\");\n    });\n    register(reducedMotion, MEDIA_PREFERS_REDUCED_MOTION);\n    update();\n  }\n\n  function destroy(completely) {\n    if (completely) {\n      binder.destroy();\n    }\n  }\n\n  function register(options2, query) {\n    var queryList = matchMedia(query);\n    binder.bind(queryList, \"change\", update);\n    queries.push([options2, queryList]);\n  }\n\n  function update() {\n    var destroyed = state.is(DESTROYED);\n    var direction = options.direction;\n    var merged = queries.reduce(function (merged2, entry) {\n      return merge(merged2, entry[1].matches ? entry[0] : {});\n    }, {});\n    omit(options);\n    set(merged);\n\n    if (options.destroy) {\n      Splide2.destroy(options.destroy === \"completely\");\n    } else if (destroyed) {\n      destroy(true);\n      Splide2.mount();\n    } else {\n      direction !== options.direction && Splide2.refresh();\n    }\n  }\n\n  function reduce(enable) {\n    if (matchMedia(MEDIA_PREFERS_REDUCED_MOTION).matches) {\n      enable ? merge(options, reducedMotion) : omit(options, ownKeys(reducedMotion));\n    }\n  }\n\n  function set(opts, base, notify) {\n    merge(options, opts);\n    base && merge(Object.getPrototypeOf(options), opts);\n\n    if (notify || !state.is(CREATED)) {\n      Splide2.emit(EVENT_UPDATED, options);\n    }\n  }\n\n  return {\n    setup: setup,\n    destroy: destroy,\n    reduce: reduce,\n    set: set\n  };\n}\n\nvar ARROW = \"Arrow\";\nvar ARROW_LEFT = ARROW + \"Left\";\nvar ARROW_RIGHT = ARROW + \"Right\";\nvar ARROW_UP = ARROW + \"Up\";\nvar ARROW_DOWN = ARROW + \"Down\";\nvar LTR = \"ltr\";\nvar RTL = \"rtl\";\nvar TTB = \"ttb\";\nvar ORIENTATION_MAP = {\n  width: [\"height\"],\n  left: [\"top\", \"right\"],\n  right: [\"bottom\", \"left\"],\n  x: [\"y\"],\n  X: [\"Y\"],\n  Y: [\"X\"],\n  ArrowLeft: [ARROW_UP, ARROW_RIGHT],\n  ArrowRight: [ARROW_DOWN, ARROW_LEFT]\n};\n\nfunction Direction(Splide2, Components2, options) {\n  function resolve(prop, axisOnly, direction) {\n    direction = direction || options.direction;\n    var index = direction === RTL && !axisOnly ? 1 : direction === TTB ? 0 : -1;\n    return ORIENTATION_MAP[prop] && ORIENTATION_MAP[prop][index] || prop.replace(/width|left|right/i, function (match, offset) {\n      var replacement = ORIENTATION_MAP[match.toLowerCase()][index] || match;\n      return offset > 0 ? replacement.charAt(0).toUpperCase() + replacement.slice(1) : replacement;\n    });\n  }\n\n  function orient(value) {\n    return value * (options.direction === RTL ? 1 : -1);\n  }\n\n  return {\n    resolve: resolve,\n    orient: orient\n  };\n}\n\nvar ROLE = \"role\";\nvar TAB_INDEX = \"tabindex\";\nvar DISABLED = \"disabled\";\nvar ARIA_PREFIX = \"aria-\";\nvar ARIA_CONTROLS = ARIA_PREFIX + \"controls\";\nvar ARIA_CURRENT = ARIA_PREFIX + \"current\";\nvar ARIA_SELECTED = ARIA_PREFIX + \"selected\";\nvar ARIA_LABEL = ARIA_PREFIX + \"label\";\nvar ARIA_LABELLEDBY = ARIA_PREFIX + \"labelledby\";\nvar ARIA_HIDDEN = ARIA_PREFIX + \"hidden\";\nvar ARIA_ORIENTATION = ARIA_PREFIX + \"orientation\";\nvar ARIA_ROLEDESCRIPTION = ARIA_PREFIX + \"roledescription\";\nvar ARIA_LIVE = ARIA_PREFIX + \"live\";\nvar ARIA_BUSY = ARIA_PREFIX + \"busy\";\nvar ARIA_ATOMIC = ARIA_PREFIX + \"atomic\";\nvar ALL_ATTRIBUTES = [ROLE, TAB_INDEX, DISABLED, ARIA_CONTROLS, ARIA_CURRENT, ARIA_LABEL, ARIA_LABELLEDBY, ARIA_HIDDEN, ARIA_ORIENTATION, ARIA_ROLEDESCRIPTION];\nvar CLASS_PREFIX = PROJECT_CODE + \"__\";\nvar STATUS_CLASS_PREFIX = \"is-\";\nvar CLASS_ROOT = PROJECT_CODE;\nvar CLASS_TRACK = CLASS_PREFIX + \"track\";\nvar CLASS_LIST = CLASS_PREFIX + \"list\";\nvar CLASS_SLIDE = CLASS_PREFIX + \"slide\";\nvar CLASS_CLONE = CLASS_SLIDE + \"--clone\";\nvar CLASS_CONTAINER = CLASS_SLIDE + \"__container\";\nvar CLASS_ARROWS = CLASS_PREFIX + \"arrows\";\nvar CLASS_ARROW = CLASS_PREFIX + \"arrow\";\nvar CLASS_ARROW_PREV = CLASS_ARROW + \"--prev\";\nvar CLASS_ARROW_NEXT = CLASS_ARROW + \"--next\";\nvar CLASS_PAGINATION = CLASS_PREFIX + \"pagination\";\nvar CLASS_PAGINATION_PAGE = CLASS_PAGINATION + \"__page\";\nvar CLASS_PROGRESS = CLASS_PREFIX + \"progress\";\nvar CLASS_PROGRESS_BAR = CLASS_PROGRESS + \"__bar\";\nvar CLASS_TOGGLE = CLASS_PREFIX + \"toggle\";\nvar CLASS_TOGGLE_PLAY = CLASS_TOGGLE + \"__play\";\nvar CLASS_TOGGLE_PAUSE = CLASS_TOGGLE + \"__pause\";\nvar CLASS_SPINNER = CLASS_PREFIX + \"spinner\";\nvar CLASS_SR = CLASS_PREFIX + \"sr\";\nvar CLASS_INITIALIZED = STATUS_CLASS_PREFIX + \"initialized\";\nvar CLASS_ACTIVE = STATUS_CLASS_PREFIX + \"active\";\nvar CLASS_PREV = STATUS_CLASS_PREFIX + \"prev\";\nvar CLASS_NEXT = STATUS_CLASS_PREFIX + \"next\";\nvar CLASS_VISIBLE = STATUS_CLASS_PREFIX + \"visible\";\nvar CLASS_LOADING = STATUS_CLASS_PREFIX + \"loading\";\nvar CLASS_FOCUS_IN = STATUS_CLASS_PREFIX + \"focus-in\";\nvar CLASS_OVERFLOW = STATUS_CLASS_PREFIX + \"overflow\";\nvar STATUS_CLASSES = [CLASS_ACTIVE, CLASS_VISIBLE, CLASS_PREV, CLASS_NEXT, CLASS_LOADING, CLASS_FOCUS_IN, CLASS_OVERFLOW];\nvar CLASSES = {\n  slide: CLASS_SLIDE,\n  clone: CLASS_CLONE,\n  arrows: CLASS_ARROWS,\n  arrow: CLASS_ARROW,\n  prev: CLASS_ARROW_PREV,\n  next: CLASS_ARROW_NEXT,\n  pagination: CLASS_PAGINATION,\n  page: CLASS_PAGINATION_PAGE,\n  spinner: CLASS_SPINNER\n};\n\nfunction closest(from, selector) {\n  if (isFunction(from.closest)) {\n    return from.closest(selector);\n  }\n\n  var elm = from;\n\n  while (elm && elm.nodeType === 1) {\n    if (matches(elm, selector)) {\n      break;\n    }\n\n    elm = elm.parentElement;\n  }\n\n  return elm;\n}\n\nvar FRICTION = 5;\nvar LOG_INTERVAL = 200;\nvar POINTER_DOWN_EVENTS = \"touchstart mousedown\";\nvar POINTER_MOVE_EVENTS = \"touchmove mousemove\";\nvar POINTER_UP_EVENTS = \"touchend touchcancel mouseup click\";\n\nfunction Elements(Splide2, Components2, options) {\n  var _EventInterface = EventInterface(Splide2),\n      on = _EventInterface.on,\n      bind = _EventInterface.bind;\n\n  var root = Splide2.root;\n  var i18n = options.i18n;\n  var elements = {};\n  var slides = [];\n  var rootClasses = [];\n  var trackClasses = [];\n  var track;\n  var list;\n  var isUsingKey;\n\n  function setup() {\n    collect();\n    init();\n    update();\n  }\n\n  function mount() {\n    on(EVENT_REFRESH, destroy);\n    on(EVENT_REFRESH, setup);\n    on(EVENT_UPDATED, update);\n    bind(document, POINTER_DOWN_EVENTS + \" keydown\", function (e) {\n      isUsingKey = e.type === \"keydown\";\n    }, {\n      capture: true\n    });\n    bind(root, \"focusin\", function () {\n      toggleClass(root, CLASS_FOCUS_IN, !!isUsingKey);\n    });\n  }\n\n  function destroy(completely) {\n    var attrs = ALL_ATTRIBUTES.concat(\"style\");\n    empty(slides);\n    removeClass(root, rootClasses);\n    removeClass(track, trackClasses);\n    removeAttribute([track, list], attrs);\n    removeAttribute(root, completely ? attrs : [\"style\", ARIA_ROLEDESCRIPTION]);\n  }\n\n  function update() {\n    removeClass(root, rootClasses);\n    removeClass(track, trackClasses);\n    rootClasses = getClasses(CLASS_ROOT);\n    trackClasses = getClasses(CLASS_TRACK);\n    addClass(root, rootClasses);\n    addClass(track, trackClasses);\n    setAttribute(root, ARIA_LABEL, options.label);\n    setAttribute(root, ARIA_LABELLEDBY, options.labelledby);\n  }\n\n  function collect() {\n    track = find(\".\" + CLASS_TRACK);\n    list = child(track, \".\" + CLASS_LIST);\n    assert(track && list, \"A track/list element is missing.\");\n    push(slides, children(list, \".\" + CLASS_SLIDE + \":not(.\" + CLASS_CLONE + \")\"));\n    forOwn({\n      arrows: CLASS_ARROWS,\n      pagination: CLASS_PAGINATION,\n      prev: CLASS_ARROW_PREV,\n      next: CLASS_ARROW_NEXT,\n      bar: CLASS_PROGRESS_BAR,\n      toggle: CLASS_TOGGLE\n    }, function (className, key) {\n      elements[key] = find(\".\" + className);\n    });\n    assign(elements, {\n      root: root,\n      track: track,\n      list: list,\n      slides: slides\n    });\n  }\n\n  function init() {\n    var id = root.id || uniqueId(PROJECT_CODE);\n    var role = options.role;\n    root.id = id;\n    track.id = track.id || id + \"-track\";\n    list.id = list.id || id + \"-list\";\n\n    if (!getAttribute(root, ROLE) && root.tagName !== \"SECTION\" && role) {\n      setAttribute(root, ROLE, role);\n    }\n\n    setAttribute(root, ARIA_ROLEDESCRIPTION, i18n.carousel);\n    setAttribute(list, ROLE, \"presentation\");\n  }\n\n  function find(selector) {\n    var elm = query(root, selector);\n    return elm && closest(elm, \".\" + CLASS_ROOT) === root ? elm : void 0;\n  }\n\n  function getClasses(base) {\n    return [base + \"--\" + options.type, base + \"--\" + options.direction, options.drag && base + \"--draggable\", options.isNavigation && base + \"--nav\", base === CLASS_ROOT && CLASS_ACTIVE];\n  }\n\n  return assign(elements, {\n    setup: setup,\n    mount: mount,\n    destroy: destroy\n  });\n}\n\nvar SLIDE = \"slide\";\nvar LOOP = \"loop\";\nvar FADE = \"fade\";\n\nfunction Slide$1(Splide2, index, slideIndex, slide) {\n  var event = EventInterface(Splide2);\n  var on = event.on,\n      emit = event.emit,\n      bind = event.bind;\n  var Components = Splide2.Components,\n      root = Splide2.root,\n      options = Splide2.options;\n  var isNavigation = options.isNavigation,\n      updateOnMove = options.updateOnMove,\n      i18n = options.i18n,\n      pagination = options.pagination,\n      slideFocus = options.slideFocus;\n  var resolve = Components.Direction.resolve;\n  var styles = getAttribute(slide, \"style\");\n  var label = getAttribute(slide, ARIA_LABEL);\n  var isClone = slideIndex > -1;\n  var container = child(slide, \".\" + CLASS_CONTAINER);\n  var destroyed;\n\n  function mount() {\n    if (!isClone) {\n      slide.id = root.id + \"-slide\" + pad(index + 1);\n      setAttribute(slide, ROLE, pagination ? \"tabpanel\" : \"group\");\n      setAttribute(slide, ARIA_ROLEDESCRIPTION, i18n.slide);\n      setAttribute(slide, ARIA_LABEL, label || format(i18n.slideLabel, [index + 1, Splide2.length]));\n    }\n\n    listen();\n  }\n\n  function listen() {\n    bind(slide, \"click\", apply(emit, EVENT_CLICK, self));\n    bind(slide, \"keydown\", apply(emit, EVENT_SLIDE_KEYDOWN, self));\n    on([EVENT_MOVED, EVENT_SHIFTED, EVENT_SCROLLED], update);\n    on(EVENT_NAVIGATION_MOUNTED, initNavigation);\n\n    if (updateOnMove) {\n      on(EVENT_MOVE, onMove);\n    }\n  }\n\n  function destroy() {\n    destroyed = true;\n    event.destroy();\n    removeClass(slide, STATUS_CLASSES);\n    removeAttribute(slide, ALL_ATTRIBUTES);\n    setAttribute(slide, \"style\", styles);\n    setAttribute(slide, ARIA_LABEL, label || \"\");\n  }\n\n  function initNavigation() {\n    var controls = Splide2.splides.map(function (target) {\n      var Slide2 = target.splide.Components.Slides.getAt(index);\n      return Slide2 ? Slide2.slide.id : \"\";\n    }).join(\" \");\n    setAttribute(slide, ARIA_LABEL, format(i18n.slideX, (isClone ? slideIndex : index) + 1));\n    setAttribute(slide, ARIA_CONTROLS, controls);\n    setAttribute(slide, ROLE, slideFocus ? \"button\" : \"\");\n    slideFocus && removeAttribute(slide, ARIA_ROLEDESCRIPTION);\n  }\n\n  function onMove() {\n    if (!destroyed) {\n      update();\n    }\n  }\n\n  function update() {\n    if (!destroyed) {\n      var curr = Splide2.index;\n      updateActivity();\n      updateVisibility();\n      toggleClass(slide, CLASS_PREV, index === curr - 1);\n      toggleClass(slide, CLASS_NEXT, index === curr + 1);\n    }\n  }\n\n  function updateActivity() {\n    var active = isActive();\n\n    if (active !== hasClass(slide, CLASS_ACTIVE)) {\n      toggleClass(slide, CLASS_ACTIVE, active);\n      setAttribute(slide, ARIA_CURRENT, isNavigation && active || \"\");\n      emit(active ? EVENT_ACTIVE : EVENT_INACTIVE, self);\n    }\n  }\n\n  function updateVisibility() {\n    var visible = isVisible();\n    var hidden = !visible && (!isActive() || isClone);\n\n    if (!Splide2.state.is([MOVING, SCROLLING])) {\n      setAttribute(slide, ARIA_HIDDEN, hidden || \"\");\n    }\n\n    setAttribute(queryAll(slide, options.focusableNodes || \"\"), TAB_INDEX, hidden ? -1 : \"\");\n\n    if (slideFocus) {\n      setAttribute(slide, TAB_INDEX, hidden ? -1 : 0);\n    }\n\n    if (visible !== hasClass(slide, CLASS_VISIBLE)) {\n      toggleClass(slide, CLASS_VISIBLE, visible);\n      emit(visible ? EVENT_VISIBLE : EVENT_HIDDEN, self);\n    }\n\n    if (!visible && document.activeElement === slide) {\n      var Slide2 = Components.Slides.getAt(Splide2.index);\n      Slide2 && focus(Slide2.slide);\n    }\n  }\n\n  function style$1(prop, value, useContainer) {\n    style(useContainer && container || slide, prop, value);\n  }\n\n  function isActive() {\n    var curr = Splide2.index;\n    return curr === index || options.cloneStatus && curr === slideIndex;\n  }\n\n  function isVisible() {\n    if (Splide2.is(FADE)) {\n      return isActive();\n    }\n\n    var trackRect = rect(Components.Elements.track);\n    var slideRect = rect(slide);\n    var left = resolve(\"left\", true);\n    var right = resolve(\"right\", true);\n    return floor(trackRect[left]) <= ceil(slideRect[left]) && floor(slideRect[right]) <= ceil(trackRect[right]);\n  }\n\n  function isWithin(from, distance) {\n    var diff = abs(from - index);\n\n    if (!isClone && (options.rewind || Splide2.is(LOOP))) {\n      diff = min(diff, Splide2.length - diff);\n    }\n\n    return diff <= distance;\n  }\n\n  var self = {\n    index: index,\n    slideIndex: slideIndex,\n    slide: slide,\n    container: container,\n    isClone: isClone,\n    mount: mount,\n    destroy: destroy,\n    update: update,\n    style: style$1,\n    isWithin: isWithin\n  };\n  return self;\n}\n\nfunction Slides(Splide2, Components2, options) {\n  var _EventInterface2 = EventInterface(Splide2),\n      on = _EventInterface2.on,\n      emit = _EventInterface2.emit,\n      bind = _EventInterface2.bind;\n\n  var _Components2$Elements = Components2.Elements,\n      slides = _Components2$Elements.slides,\n      list = _Components2$Elements.list;\n  var Slides2 = [];\n\n  function mount() {\n    init();\n    on(EVENT_REFRESH, destroy);\n    on(EVENT_REFRESH, init);\n  }\n\n  function init() {\n    slides.forEach(function (slide, index) {\n      register(slide, index, -1);\n    });\n  }\n\n  function destroy() {\n    forEach$1(function (Slide2) {\n      Slide2.destroy();\n    });\n    empty(Slides2);\n  }\n\n  function update() {\n    forEach$1(function (Slide2) {\n      Slide2.update();\n    });\n  }\n\n  function register(slide, index, slideIndex) {\n    var object = Slide$1(Splide2, index, slideIndex, slide);\n    object.mount();\n    Slides2.push(object);\n    Slides2.sort(function (Slide1, Slide2) {\n      return Slide1.index - Slide2.index;\n    });\n  }\n\n  function get(excludeClones) {\n    return excludeClones ? filter(function (Slide2) {\n      return !Slide2.isClone;\n    }) : Slides2;\n  }\n\n  function getIn(page) {\n    var Controller = Components2.Controller;\n    var index = Controller.toIndex(page);\n    var max = Controller.hasFocus() ? 1 : options.perPage;\n    return filter(function (Slide2) {\n      return between(Slide2.index, index, index + max - 1);\n    });\n  }\n\n  function getAt(index) {\n    return filter(index)[0];\n  }\n\n  function add(items, index) {\n    forEach(items, function (slide) {\n      if (isString(slide)) {\n        slide = parseHtml(slide);\n      }\n\n      if (isHTMLElement(slide)) {\n        var ref = slides[index];\n        ref ? before(slide, ref) : append(list, slide);\n        addClass(slide, options.classes.slide);\n        observeImages(slide, apply(emit, EVENT_RESIZE));\n      }\n    });\n    emit(EVENT_REFRESH);\n  }\n\n  function remove$1(matcher) {\n    remove(filter(matcher).map(function (Slide2) {\n      return Slide2.slide;\n    }));\n    emit(EVENT_REFRESH);\n  }\n\n  function forEach$1(iteratee, excludeClones) {\n    get(excludeClones).forEach(iteratee);\n  }\n\n  function filter(matcher) {\n    return Slides2.filter(isFunction(matcher) ? matcher : function (Slide2) {\n      return isString(matcher) ? matches(Slide2.slide, matcher) : includes(toArray(matcher), Slide2.index);\n    });\n  }\n\n  function style(prop, value, useContainer) {\n    forEach$1(function (Slide2) {\n      Slide2.style(prop, value, useContainer);\n    });\n  }\n\n  function observeImages(elm, callback) {\n    var images = queryAll(elm, \"img\");\n    var length = images.length;\n\n    if (length) {\n      images.forEach(function (img) {\n        bind(img, \"load error\", function () {\n          if (! --length) {\n            callback();\n          }\n        });\n      });\n    } else {\n      callback();\n    }\n  }\n\n  function getLength(excludeClones) {\n    return excludeClones ? slides.length : Slides2.length;\n  }\n\n  function isEnough() {\n    return Slides2.length > options.perPage;\n  }\n\n  return {\n    mount: mount,\n    destroy: destroy,\n    update: update,\n    register: register,\n    get: get,\n    getIn: getIn,\n    getAt: getAt,\n    add: add,\n    remove: remove$1,\n    forEach: forEach$1,\n    filter: filter,\n    style: style,\n    getLength: getLength,\n    isEnough: isEnough\n  };\n}\n\nfunction Layout(Splide2, Components2, options) {\n  var _EventInterface3 = EventInterface(Splide2),\n      on = _EventInterface3.on,\n      bind = _EventInterface3.bind,\n      emit = _EventInterface3.emit;\n\n  var Slides = Components2.Slides;\n  var resolve = Components2.Direction.resolve;\n  var _Components2$Elements2 = Components2.Elements,\n      root = _Components2$Elements2.root,\n      track = _Components2$Elements2.track,\n      list = _Components2$Elements2.list;\n  var getAt = Slides.getAt,\n      styleSlides = Slides.style;\n  var vertical;\n  var rootRect;\n  var overflow;\n\n  function mount() {\n    init();\n    bind(window, \"resize load\", Throttle(apply(emit, EVENT_RESIZE)));\n    on([EVENT_UPDATED, EVENT_REFRESH], init);\n    on(EVENT_RESIZE, resize);\n  }\n\n  function init() {\n    vertical = options.direction === TTB;\n    style(root, \"maxWidth\", unit(options.width));\n    style(track, resolve(\"paddingLeft\"), cssPadding(false));\n    style(track, resolve(\"paddingRight\"), cssPadding(true));\n    resize(true);\n  }\n\n  function resize(force) {\n    var newRect = rect(root);\n\n    if (force || rootRect.width !== newRect.width || rootRect.height !== newRect.height) {\n      style(track, \"height\", cssTrackHeight());\n      styleSlides(resolve(\"marginRight\"), unit(options.gap));\n      styleSlides(\"width\", cssSlideWidth());\n      styleSlides(\"height\", cssSlideHeight(), true);\n      rootRect = newRect;\n      emit(EVENT_RESIZED);\n\n      if (overflow !== (overflow = isOverflow())) {\n        toggleClass(root, CLASS_OVERFLOW, overflow);\n        emit(EVENT_OVERFLOW, overflow);\n      }\n    }\n  }\n\n  function cssPadding(right) {\n    var padding = options.padding;\n    var prop = resolve(right ? \"right\" : \"left\");\n    return padding && unit(padding[prop] || (isObject(padding) ? 0 : padding)) || \"0px\";\n  }\n\n  function cssTrackHeight() {\n    var height = \"\";\n\n    if (vertical) {\n      height = cssHeight();\n      assert(height, \"height or heightRatio is missing.\");\n      height = \"calc(\" + height + \" - \" + cssPadding(false) + \" - \" + cssPadding(true) + \")\";\n    }\n\n    return height;\n  }\n\n  function cssHeight() {\n    return unit(options.height || rect(list).width * options.heightRatio);\n  }\n\n  function cssSlideWidth() {\n    return options.autoWidth ? null : unit(options.fixedWidth) || (vertical ? \"\" : cssSlideSize());\n  }\n\n  function cssSlideHeight() {\n    return unit(options.fixedHeight) || (vertical ? options.autoHeight ? null : cssSlideSize() : cssHeight());\n  }\n\n  function cssSlideSize() {\n    var gap = unit(options.gap);\n    return \"calc((100%\" + (gap && \" + \" + gap) + \")/\" + (options.perPage || 1) + (gap && \" - \" + gap) + \")\";\n  }\n\n  function listSize() {\n    return rect(list)[resolve(\"width\")];\n  }\n\n  function slideSize(index, withoutGap) {\n    var Slide = getAt(index || 0);\n    return Slide ? rect(Slide.slide)[resolve(\"width\")] + (withoutGap ? 0 : getGap()) : 0;\n  }\n\n  function totalSize(index, withoutGap) {\n    var Slide = getAt(index);\n\n    if (Slide) {\n      var right = rect(Slide.slide)[resolve(\"right\")];\n      var left = rect(list)[resolve(\"left\")];\n      return abs(right - left) + (withoutGap ? 0 : getGap());\n    }\n\n    return 0;\n  }\n\n  function sliderSize(withoutGap) {\n    return totalSize(Splide2.length - 1) - totalSize(0) + slideSize(0, withoutGap);\n  }\n\n  function getGap() {\n    var Slide = getAt(0);\n    return Slide && parseFloat(style(Slide.slide, resolve(\"marginRight\"))) || 0;\n  }\n\n  function getPadding(right) {\n    return parseFloat(style(track, resolve(\"padding\" + (right ? \"Right\" : \"Left\")))) || 0;\n  }\n\n  function isOverflow() {\n    return Splide2.is(FADE) || sliderSize(true) > listSize();\n  }\n\n  return {\n    mount: mount,\n    resize: resize,\n    listSize: listSize,\n    slideSize: slideSize,\n    sliderSize: sliderSize,\n    totalSize: totalSize,\n    getPadding: getPadding,\n    isOverflow: isOverflow\n  };\n}\n\nvar MULTIPLIER = 2;\n\nfunction Clones(Splide2, Components2, options) {\n  var event = EventInterface(Splide2);\n  var on = event.on;\n  var Elements = Components2.Elements,\n      Slides = Components2.Slides;\n  var resolve = Components2.Direction.resolve;\n  var clones = [];\n  var cloneCount;\n\n  function mount() {\n    on(EVENT_REFRESH, remount);\n    on([EVENT_UPDATED, EVENT_RESIZE], observe);\n\n    if (cloneCount = computeCloneCount()) {\n      generate(cloneCount);\n      Components2.Layout.resize(true);\n    }\n  }\n\n  function remount() {\n    destroy();\n    mount();\n  }\n\n  function destroy() {\n    remove(clones);\n    empty(clones);\n    event.destroy();\n  }\n\n  function observe() {\n    var count = computeCloneCount();\n\n    if (cloneCount !== count) {\n      if (cloneCount < count || !count) {\n        event.emit(EVENT_REFRESH);\n      }\n    }\n  }\n\n  function generate(count) {\n    var slides = Slides.get().slice();\n    var length = slides.length;\n\n    if (length) {\n      while (slides.length < count) {\n        push(slides, slides);\n      }\n\n      push(slides.slice(-count), slides.slice(0, count)).forEach(function (Slide, index) {\n        var isHead = index < count;\n        var clone = cloneDeep(Slide.slide, index);\n        isHead ? before(clone, slides[0].slide) : append(Elements.list, clone);\n        push(clones, clone);\n        Slides.register(clone, index - count + (isHead ? 0 : length), Slide.index);\n      });\n    }\n  }\n\n  function cloneDeep(elm, index) {\n    var clone = elm.cloneNode(true);\n    addClass(clone, options.classes.clone);\n    clone.id = Splide2.root.id + \"-clone\" + pad(index + 1);\n    return clone;\n  }\n\n  function computeCloneCount() {\n    var clones2 = options.clones;\n\n    if (!Splide2.is(LOOP)) {\n      clones2 = 0;\n    } else if (isUndefined(clones2)) {\n      var fixedSize = options[resolve(\"fixedWidth\")] && Components2.Layout.slideSize(0);\n      var fixedCount = fixedSize && ceil(rect(Elements.track)[resolve(\"width\")] / fixedSize);\n      clones2 = fixedCount || options[resolve(\"autoWidth\")] && Splide2.length || options.perPage * MULTIPLIER;\n    }\n\n    return clones2;\n  }\n\n  return {\n    mount: mount,\n    destroy: destroy\n  };\n}\n\nfunction Move(Splide2, Components2, options) {\n  var _EventInterface4 = EventInterface(Splide2),\n      on = _EventInterface4.on,\n      emit = _EventInterface4.emit;\n\n  var set = Splide2.state.set;\n  var _Components2$Layout = Components2.Layout,\n      slideSize = _Components2$Layout.slideSize,\n      getPadding = _Components2$Layout.getPadding,\n      totalSize = _Components2$Layout.totalSize,\n      listSize = _Components2$Layout.listSize,\n      sliderSize = _Components2$Layout.sliderSize;\n  var _Components2$Directio = Components2.Direction,\n      resolve = _Components2$Directio.resolve,\n      orient = _Components2$Directio.orient;\n  var _Components2$Elements3 = Components2.Elements,\n      list = _Components2$Elements3.list,\n      track = _Components2$Elements3.track;\n  var Transition;\n\n  function mount() {\n    Transition = Components2.Transition;\n    on([EVENT_MOUNTED, EVENT_RESIZED, EVENT_UPDATED, EVENT_REFRESH], reposition);\n  }\n\n  function reposition() {\n    if (!Components2.Controller.isBusy()) {\n      Components2.Scroll.cancel();\n      jump(Splide2.index);\n      Components2.Slides.update();\n    }\n  }\n\n  function move(dest, index, prev, callback) {\n    if (dest !== index && canShift(dest > prev)) {\n      cancel();\n      translate(shift(getPosition(), dest > prev), true);\n    }\n\n    set(MOVING);\n    emit(EVENT_MOVE, index, prev, dest);\n    Transition.start(index, function () {\n      set(IDLE);\n      emit(EVENT_MOVED, index, prev, dest);\n      callback && callback();\n    });\n  }\n\n  function jump(index) {\n    translate(toPosition(index, true));\n  }\n\n  function translate(position, preventLoop) {\n    if (!Splide2.is(FADE)) {\n      var destination = preventLoop ? position : loop(position);\n      style(list, \"transform\", \"translate\" + resolve(\"X\") + \"(\" + destination + \"px)\");\n      position !== destination && emit(EVENT_SHIFTED);\n    }\n  }\n\n  function loop(position) {\n    if (Splide2.is(LOOP)) {\n      var index = toIndex(position);\n      var exceededMax = index > Components2.Controller.getEnd();\n      var exceededMin = index < 0;\n\n      if (exceededMin || exceededMax) {\n        position = shift(position, exceededMax);\n      }\n    }\n\n    return position;\n  }\n\n  function shift(position, backwards) {\n    var excess = position - getLimit(backwards);\n    var size = sliderSize();\n    position -= orient(size * (ceil(abs(excess) / size) || 1)) * (backwards ? 1 : -1);\n    return position;\n  }\n\n  function cancel() {\n    translate(getPosition(), true);\n    Transition.cancel();\n  }\n\n  function toIndex(position) {\n    var Slides = Components2.Slides.get();\n    var index = 0;\n    var minDistance = Infinity;\n\n    for (var i = 0; i < Slides.length; i++) {\n      var slideIndex = Slides[i].index;\n      var distance = abs(toPosition(slideIndex, true) - position);\n\n      if (distance <= minDistance) {\n        minDistance = distance;\n        index = slideIndex;\n      } else {\n        break;\n      }\n    }\n\n    return index;\n  }\n\n  function toPosition(index, trimming) {\n    var position = orient(totalSize(index - 1) - offset(index));\n    return trimming ? trim(position) : position;\n  }\n\n  function getPosition() {\n    var left = resolve(\"left\");\n    return rect(list)[left] - rect(track)[left] + orient(getPadding(false));\n  }\n\n  function trim(position) {\n    if (options.trimSpace && Splide2.is(SLIDE)) {\n      position = clamp(position, 0, orient(sliderSize(true) - listSize()));\n    }\n\n    return position;\n  }\n\n  function offset(index) {\n    var focus = options.focus;\n    return focus === \"center\" ? (listSize() - slideSize(index, true)) / 2 : +focus * slideSize(index) || 0;\n  }\n\n  function getLimit(max) {\n    return toPosition(max ? Components2.Controller.getEnd() : 0, !!options.trimSpace);\n  }\n\n  function canShift(backwards) {\n    var shifted = orient(shift(getPosition(), backwards));\n    return backwards ? shifted >= 0 : shifted <= list[resolve(\"scrollWidth\")] - rect(track)[resolve(\"width\")];\n  }\n\n  function exceededLimit(max, position) {\n    position = isUndefined(position) ? getPosition() : position;\n    var exceededMin = max !== true && orient(position) < orient(getLimit(false));\n    var exceededMax = max !== false && orient(position) > orient(getLimit(true));\n    return exceededMin || exceededMax;\n  }\n\n  return {\n    mount: mount,\n    move: move,\n    jump: jump,\n    translate: translate,\n    shift: shift,\n    cancel: cancel,\n    toIndex: toIndex,\n    toPosition: toPosition,\n    getPosition: getPosition,\n    getLimit: getLimit,\n    exceededLimit: exceededLimit,\n    reposition: reposition\n  };\n}\n\nfunction Controller(Splide2, Components2, options) {\n  var _EventInterface5 = EventInterface(Splide2),\n      on = _EventInterface5.on,\n      emit = _EventInterface5.emit;\n\n  var Move = Components2.Move;\n  var getPosition = Move.getPosition,\n      getLimit = Move.getLimit,\n      toPosition = Move.toPosition;\n  var _Components2$Slides = Components2.Slides,\n      isEnough = _Components2$Slides.isEnough,\n      getLength = _Components2$Slides.getLength;\n  var omitEnd = options.omitEnd;\n  var isLoop = Splide2.is(LOOP);\n  var isSlide = Splide2.is(SLIDE);\n  var getNext = apply(getAdjacent, false);\n  var getPrev = apply(getAdjacent, true);\n  var currIndex = options.start || 0;\n  var endIndex;\n  var prevIndex = currIndex;\n  var slideCount;\n  var perMove;\n  var perPage;\n\n  function mount() {\n    init();\n    on([EVENT_UPDATED, EVENT_REFRESH, EVENT_END_INDEX_CHANGED], init);\n    on(EVENT_RESIZED, onResized);\n  }\n\n  function init() {\n    slideCount = getLength(true);\n    perMove = options.perMove;\n    perPage = options.perPage;\n    endIndex = getEnd();\n    var index = clamp(currIndex, 0, omitEnd ? endIndex : slideCount - 1);\n\n    if (index !== currIndex) {\n      currIndex = index;\n      Move.reposition();\n    }\n  }\n\n  function onResized() {\n    if (endIndex !== getEnd()) {\n      emit(EVENT_END_INDEX_CHANGED);\n    }\n  }\n\n  function go(control, allowSameIndex, callback) {\n    if (!isBusy()) {\n      var dest = parse(control);\n      var index = loop(dest);\n\n      if (index > -1 && (allowSameIndex || index !== currIndex)) {\n        setIndex(index);\n        Move.move(dest, index, prevIndex, callback);\n      }\n    }\n  }\n\n  function scroll(destination, duration, snap, callback) {\n    Components2.Scroll.scroll(destination, duration, snap, function () {\n      var index = loop(Move.toIndex(getPosition()));\n      setIndex(omitEnd ? min(index, endIndex) : index);\n      callback && callback();\n    });\n  }\n\n  function parse(control) {\n    var index = currIndex;\n\n    if (isString(control)) {\n      var _ref = control.match(/([+\\-<>])(\\d+)?/) || [],\n          indicator = _ref[1],\n          number = _ref[2];\n\n      if (indicator === \"+\" || indicator === \"-\") {\n        index = computeDestIndex(currIndex + +(\"\" + indicator + (+number || 1)), currIndex);\n      } else if (indicator === \">\") {\n        index = number ? toIndex(+number) : getNext(true);\n      } else if (indicator === \"<\") {\n        index = getPrev(true);\n      }\n    } else {\n      index = isLoop ? control : clamp(control, 0, endIndex);\n    }\n\n    return index;\n  }\n\n  function getAdjacent(prev, destination) {\n    var number = perMove || (hasFocus() ? 1 : perPage);\n    var dest = computeDestIndex(currIndex + number * (prev ? -1 : 1), currIndex, !(perMove || hasFocus()));\n\n    if (dest === -1 && isSlide) {\n      if (!approximatelyEqual(getPosition(), getLimit(!prev), 1)) {\n        return prev ? 0 : endIndex;\n      }\n    }\n\n    return destination ? dest : loop(dest);\n  }\n\n  function computeDestIndex(dest, from, snapPage) {\n    if (isEnough() || hasFocus()) {\n      var index = computeMovableDestIndex(dest);\n\n      if (index !== dest) {\n        from = dest;\n        dest = index;\n        snapPage = false;\n      }\n\n      if (dest < 0 || dest > endIndex) {\n        if (!perMove && (between(0, dest, from, true) || between(endIndex, from, dest, true))) {\n          dest = toIndex(toPage(dest));\n        } else {\n          if (isLoop) {\n            dest = snapPage ? dest < 0 ? -(slideCount % perPage || perPage) : slideCount : dest;\n          } else if (options.rewind) {\n            dest = dest < 0 ? endIndex : 0;\n          } else {\n            dest = -1;\n          }\n        }\n      } else {\n        if (snapPage && dest !== from) {\n          dest = toIndex(toPage(from) + (dest < from ? -1 : 1));\n        }\n      }\n    } else {\n      dest = -1;\n    }\n\n    return dest;\n  }\n\n  function computeMovableDestIndex(dest) {\n    if (isSlide && options.trimSpace === \"move\" && dest !== currIndex) {\n      var position = getPosition();\n\n      while (position === toPosition(dest, true) && between(dest, 0, Splide2.length - 1, !options.rewind)) {\n        dest < currIndex ? --dest : ++dest;\n      }\n    }\n\n    return dest;\n  }\n\n  function loop(index) {\n    return isLoop ? (index + slideCount) % slideCount || 0 : index;\n  }\n\n  function getEnd() {\n    var end = slideCount - (hasFocus() || isLoop && perMove ? 1 : perPage);\n\n    while (omitEnd && end-- > 0) {\n      if (toPosition(slideCount - 1, true) !== toPosition(end, true)) {\n        end++;\n        break;\n      }\n    }\n\n    return clamp(end, 0, slideCount - 1);\n  }\n\n  function toIndex(page) {\n    return clamp(hasFocus() ? page : perPage * page, 0, endIndex);\n  }\n\n  function toPage(index) {\n    return hasFocus() ? min(index, endIndex) : floor((index >= endIndex ? slideCount - 1 : index) / perPage);\n  }\n\n  function toDest(destination) {\n    var closest = Move.toIndex(destination);\n    return isSlide ? clamp(closest, 0, endIndex) : closest;\n  }\n\n  function setIndex(index) {\n    if (index !== currIndex) {\n      prevIndex = currIndex;\n      currIndex = index;\n    }\n  }\n\n  function getIndex(prev) {\n    return prev ? prevIndex : currIndex;\n  }\n\n  function hasFocus() {\n    return !isUndefined(options.focus) || options.isNavigation;\n  }\n\n  function isBusy() {\n    return Splide2.state.is([MOVING, SCROLLING]) && !!options.waitForTransition;\n  }\n\n  return {\n    mount: mount,\n    go: go,\n    scroll: scroll,\n    getNext: getNext,\n    getPrev: getPrev,\n    getAdjacent: getAdjacent,\n    getEnd: getEnd,\n    setIndex: setIndex,\n    getIndex: getIndex,\n    toIndex: toIndex,\n    toPage: toPage,\n    toDest: toDest,\n    hasFocus: hasFocus,\n    isBusy: isBusy\n  };\n}\n\nvar XML_NAME_SPACE = \"http://www.w3.org/2000/svg\";\nvar PATH = \"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z\";\nvar SIZE = 40;\n\nfunction Arrows(Splide2, Components2, options) {\n  var event = EventInterface(Splide2);\n  var on = event.on,\n      bind = event.bind,\n      emit = event.emit;\n  var classes = options.classes,\n      i18n = options.i18n;\n  var Elements = Components2.Elements,\n      Controller = Components2.Controller;\n  var placeholder = Elements.arrows,\n      track = Elements.track;\n  var wrapper = placeholder;\n  var prev = Elements.prev;\n  var next = Elements.next;\n  var created;\n  var wrapperClasses;\n  var arrows = {};\n\n  function mount() {\n    init();\n    on(EVENT_UPDATED, remount);\n  }\n\n  function remount() {\n    destroy();\n    mount();\n  }\n\n  function init() {\n    var enabled = options.arrows;\n\n    if (enabled && !(prev && next)) {\n      createArrows();\n    }\n\n    if (prev && next) {\n      assign(arrows, {\n        prev: prev,\n        next: next\n      });\n      display(wrapper, enabled ? \"\" : \"none\");\n      addClass(wrapper, wrapperClasses = CLASS_ARROWS + \"--\" + options.direction);\n\n      if (enabled) {\n        listen();\n        update();\n        setAttribute([prev, next], ARIA_CONTROLS, track.id);\n        emit(EVENT_ARROWS_MOUNTED, prev, next);\n      }\n    }\n  }\n\n  function destroy() {\n    event.destroy();\n    removeClass(wrapper, wrapperClasses);\n\n    if (created) {\n      remove(placeholder ? [prev, next] : wrapper);\n      prev = next = null;\n    } else {\n      removeAttribute([prev, next], ALL_ATTRIBUTES);\n    }\n  }\n\n  function listen() {\n    on([EVENT_MOUNTED, EVENT_MOVED, EVENT_REFRESH, EVENT_SCROLLED, EVENT_END_INDEX_CHANGED], update);\n    bind(next, \"click\", apply(go, \">\"));\n    bind(prev, \"click\", apply(go, \"<\"));\n  }\n\n  function go(control) {\n    Controller.go(control, true);\n  }\n\n  function createArrows() {\n    wrapper = placeholder || create(\"div\", classes.arrows);\n    prev = createArrow(true);\n    next = createArrow(false);\n    created = true;\n    append(wrapper, [prev, next]);\n    !placeholder && before(wrapper, track);\n  }\n\n  function createArrow(prev2) {\n    var arrow = \"<button class=\\\"\" + classes.arrow + \" \" + (prev2 ? classes.prev : classes.next) + \"\\\" type=\\\"button\\\"><svg xmlns=\\\"\" + XML_NAME_SPACE + \"\\\" viewBox=\\\"0 0 \" + SIZE + \" \" + SIZE + \"\\\" width=\\\"\" + SIZE + \"\\\" height=\\\"\" + SIZE + \"\\\" focusable=\\\"false\\\"><path d=\\\"\" + (options.arrowPath || PATH) + \"\\\" />\";\n    return parseHtml(arrow);\n  }\n\n  function update() {\n    if (prev && next) {\n      var index = Splide2.index;\n      var prevIndex = Controller.getPrev();\n      var nextIndex = Controller.getNext();\n      var prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\n      var nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\n      prev.disabled = prevIndex < 0;\n      next.disabled = nextIndex < 0;\n      setAttribute(prev, ARIA_LABEL, prevLabel);\n      setAttribute(next, ARIA_LABEL, nextLabel);\n      emit(EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex);\n    }\n  }\n\n  return {\n    arrows: arrows,\n    mount: mount,\n    destroy: destroy,\n    update: update\n  };\n}\n\nvar INTERVAL_DATA_ATTRIBUTE = DATA_ATTRIBUTE + \"-interval\";\n\nfunction Autoplay(Splide2, Components2, options) {\n  var _EventInterface6 = EventInterface(Splide2),\n      on = _EventInterface6.on,\n      bind = _EventInterface6.bind,\n      emit = _EventInterface6.emit;\n\n  var interval = RequestInterval(options.interval, Splide2.go.bind(Splide2, \">\"), onAnimationFrame);\n  var isPaused = interval.isPaused;\n  var Elements = Components2.Elements,\n      _Components2$Elements4 = Components2.Elements,\n      root = _Components2$Elements4.root,\n      toggle = _Components2$Elements4.toggle;\n  var autoplay = options.autoplay;\n  var hovered;\n  var focused;\n  var stopped = autoplay === \"pause\";\n\n  function mount() {\n    if (autoplay) {\n      listen();\n      toggle && setAttribute(toggle, ARIA_CONTROLS, Elements.track.id);\n      stopped || play();\n      update();\n    }\n  }\n\n  function listen() {\n    if (options.pauseOnHover) {\n      bind(root, \"mouseenter mouseleave\", function (e) {\n        hovered = e.type === \"mouseenter\";\n        autoToggle();\n      });\n    }\n\n    if (options.pauseOnFocus) {\n      bind(root, \"focusin focusout\", function (e) {\n        focused = e.type === \"focusin\";\n        autoToggle();\n      });\n    }\n\n    if (toggle) {\n      bind(toggle, \"click\", function () {\n        stopped ? play() : pause(true);\n      });\n    }\n\n    on([EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH], interval.rewind);\n    on(EVENT_MOVE, onMove);\n  }\n\n  function play() {\n    if (isPaused() && Components2.Slides.isEnough()) {\n      interval.start(!options.resetProgress);\n      focused = hovered = stopped = false;\n      update();\n      emit(EVENT_AUTOPLAY_PLAY);\n    }\n  }\n\n  function pause(stop) {\n    if (stop === void 0) {\n      stop = true;\n    }\n\n    stopped = !!stop;\n    update();\n\n    if (!isPaused()) {\n      interval.pause();\n      emit(EVENT_AUTOPLAY_PAUSE);\n    }\n  }\n\n  function autoToggle() {\n    if (!stopped) {\n      hovered || focused ? pause(false) : play();\n    }\n  }\n\n  function update() {\n    if (toggle) {\n      toggleClass(toggle, CLASS_ACTIVE, !stopped);\n      setAttribute(toggle, ARIA_LABEL, options.i18n[stopped ? \"play\" : \"pause\"]);\n    }\n  }\n\n  function onAnimationFrame(rate) {\n    var bar = Elements.bar;\n    bar && style(bar, \"width\", rate * 100 + \"%\");\n    emit(EVENT_AUTOPLAY_PLAYING, rate);\n  }\n\n  function onMove(index) {\n    var Slide = Components2.Slides.getAt(index);\n    interval.set(Slide && +getAttribute(Slide.slide, INTERVAL_DATA_ATTRIBUTE) || options.interval);\n  }\n\n  return {\n    mount: mount,\n    destroy: interval.cancel,\n    play: play,\n    pause: pause,\n    isPaused: isPaused\n  };\n}\n\nfunction Cover(Splide2, Components2, options) {\n  var _EventInterface7 = EventInterface(Splide2),\n      on = _EventInterface7.on;\n\n  function mount() {\n    if (options.cover) {\n      on(EVENT_LAZYLOAD_LOADED, apply(toggle, true));\n      on([EVENT_MOUNTED, EVENT_UPDATED, EVENT_REFRESH], apply(cover, true));\n    }\n  }\n\n  function cover(cover2) {\n    Components2.Slides.forEach(function (Slide) {\n      var img = child(Slide.container || Slide.slide, \"img\");\n\n      if (img && img.src) {\n        toggle(cover2, img, Slide);\n      }\n    });\n  }\n\n  function toggle(cover2, img, Slide) {\n    Slide.style(\"background\", cover2 ? \"center/cover no-repeat url(\\\"\" + img.src + \"\\\")\" : \"\", true);\n    display(img, cover2 ? \"none\" : \"\");\n  }\n\n  return {\n    mount: mount,\n    destroy: apply(cover, false)\n  };\n}\n\nvar BOUNCE_DIFF_THRESHOLD = 10;\nvar BOUNCE_DURATION = 600;\nvar FRICTION_FACTOR = 0.6;\nvar BASE_VELOCITY = 1.5;\nvar MIN_DURATION = 800;\n\nfunction Scroll(Splide2, Components2, options) {\n  var _EventInterface8 = EventInterface(Splide2),\n      on = _EventInterface8.on,\n      emit = _EventInterface8.emit;\n\n  var set = Splide2.state.set;\n  var Move = Components2.Move;\n  var getPosition = Move.getPosition,\n      getLimit = Move.getLimit,\n      exceededLimit = Move.exceededLimit,\n      translate = Move.translate;\n  var isSlide = Splide2.is(SLIDE);\n  var interval;\n  var callback;\n  var friction = 1;\n\n  function mount() {\n    on(EVENT_MOVE, clear);\n    on([EVENT_UPDATED, EVENT_REFRESH], cancel);\n  }\n\n  function scroll(destination, duration, snap, onScrolled, noConstrain) {\n    var from = getPosition();\n    clear();\n\n    if (snap && (!isSlide || !exceededLimit())) {\n      var size = Components2.Layout.sliderSize();\n      var offset = sign(destination) * size * floor(abs(destination) / size) || 0;\n      destination = Move.toPosition(Components2.Controller.toDest(destination % size)) + offset;\n    }\n\n    var noDistance = approximatelyEqual(from, destination, 1);\n    friction = 1;\n    duration = noDistance ? 0 : duration || max(abs(destination - from) / BASE_VELOCITY, MIN_DURATION);\n    callback = onScrolled;\n    interval = RequestInterval(duration, onEnd, apply(update, from, destination, noConstrain), 1);\n    set(SCROLLING);\n    emit(EVENT_SCROLL);\n    interval.start();\n  }\n\n  function onEnd() {\n    set(IDLE);\n    callback && callback();\n    emit(EVENT_SCROLLED);\n  }\n\n  function update(from, to, noConstrain, rate) {\n    var position = getPosition();\n    var target = from + (to - from) * easing(rate);\n    var diff = (target - position) * friction;\n    translate(position + diff);\n\n    if (isSlide && !noConstrain && exceededLimit()) {\n      friction *= FRICTION_FACTOR;\n\n      if (abs(diff) < BOUNCE_DIFF_THRESHOLD) {\n        scroll(getLimit(exceededLimit(true)), BOUNCE_DURATION, false, callback, true);\n      }\n    }\n  }\n\n  function clear() {\n    if (interval) {\n      interval.cancel();\n    }\n  }\n\n  function cancel() {\n    if (interval && !interval.isPaused()) {\n      clear();\n      onEnd();\n    }\n  }\n\n  function easing(t) {\n    var easingFunc = options.easingFunc;\n    return easingFunc ? easingFunc(t) : 1 - Math.pow(1 - t, 4);\n  }\n\n  return {\n    mount: mount,\n    destroy: clear,\n    scroll: scroll,\n    cancel: cancel\n  };\n}\n\nvar SCROLL_LISTENER_OPTIONS = {\n  passive: false,\n  capture: true\n};\n\nfunction Drag(Splide2, Components2, options) {\n  var _EventInterface9 = EventInterface(Splide2),\n      on = _EventInterface9.on,\n      emit = _EventInterface9.emit,\n      bind = _EventInterface9.bind,\n      unbind = _EventInterface9.unbind;\n\n  var state = Splide2.state;\n  var Move = Components2.Move,\n      Scroll = Components2.Scroll,\n      Controller = Components2.Controller,\n      track = Components2.Elements.track,\n      reduce = Components2.Media.reduce;\n  var _Components2$Directio2 = Components2.Direction,\n      resolve = _Components2$Directio2.resolve,\n      orient = _Components2$Directio2.orient;\n  var getPosition = Move.getPosition,\n      exceededLimit = Move.exceededLimit;\n  var basePosition;\n  var baseEvent;\n  var prevBaseEvent;\n  var isFree;\n  var dragging;\n  var exceeded = false;\n  var clickPrevented;\n  var disabled;\n  var target;\n\n  function mount() {\n    bind(track, POINTER_MOVE_EVENTS, noop, SCROLL_LISTENER_OPTIONS);\n    bind(track, POINTER_UP_EVENTS, noop, SCROLL_LISTENER_OPTIONS);\n    bind(track, POINTER_DOWN_EVENTS, onPointerDown, SCROLL_LISTENER_OPTIONS);\n    bind(track, \"click\", onClick, {\n      capture: true\n    });\n    bind(track, \"dragstart\", prevent);\n    on([EVENT_MOUNTED, EVENT_UPDATED], init);\n  }\n\n  function init() {\n    var drag = options.drag;\n    disable(!drag);\n    isFree = drag === \"free\";\n  }\n\n  function onPointerDown(e) {\n    clickPrevented = false;\n\n    if (!disabled) {\n      var isTouch = isTouchEvent(e);\n\n      if (isDraggable(e.target) && (isTouch || !e.button)) {\n        if (!Controller.isBusy()) {\n          target = isTouch ? track : window;\n          dragging = state.is([MOVING, SCROLLING]);\n          prevBaseEvent = null;\n          bind(target, POINTER_MOVE_EVENTS, onPointerMove, SCROLL_LISTENER_OPTIONS);\n          bind(target, POINTER_UP_EVENTS, onPointerUp, SCROLL_LISTENER_OPTIONS);\n          Move.cancel();\n          Scroll.cancel();\n          save(e);\n        } else {\n          prevent(e, true);\n        }\n      }\n    }\n  }\n\n  function onPointerMove(e) {\n    if (!state.is(DRAGGING)) {\n      state.set(DRAGGING);\n      emit(EVENT_DRAG);\n    }\n\n    if (e.cancelable) {\n      if (dragging) {\n        Move.translate(basePosition + constrain(diffCoord(e)));\n        var expired = diffTime(e) > LOG_INTERVAL;\n        var hasExceeded = exceeded !== (exceeded = exceededLimit());\n\n        if (expired || hasExceeded) {\n          save(e);\n        }\n\n        clickPrevented = true;\n        emit(EVENT_DRAGGING);\n        prevent(e);\n      } else if (isSliderDirection(e)) {\n        dragging = shouldStart(e);\n        prevent(e);\n      }\n    }\n  }\n\n  function onPointerUp(e) {\n    if (state.is(DRAGGING)) {\n      state.set(IDLE);\n      emit(EVENT_DRAGGED);\n    }\n\n    if (dragging) {\n      move(e);\n      prevent(e);\n    }\n\n    unbind(target, POINTER_MOVE_EVENTS, onPointerMove);\n    unbind(target, POINTER_UP_EVENTS, onPointerUp);\n    dragging = false;\n  }\n\n  function onClick(e) {\n    if (!disabled && clickPrevented) {\n      prevent(e, true);\n    }\n  }\n\n  function save(e) {\n    prevBaseEvent = baseEvent;\n    baseEvent = e;\n    basePosition = getPosition();\n  }\n\n  function move(e) {\n    var velocity = computeVelocity(e);\n    var destination = computeDestination(velocity);\n    var rewind = options.rewind && options.rewindByDrag;\n    reduce(false);\n\n    if (isFree) {\n      Controller.scroll(destination, 0, options.snap);\n    } else if (Splide2.is(FADE)) {\n      Controller.go(orient(sign(velocity)) < 0 ? rewind ? \"<\" : \"-\" : rewind ? \">\" : \"+\");\n    } else if (Splide2.is(SLIDE) && exceeded && rewind) {\n      Controller.go(exceededLimit(true) ? \">\" : \"<\");\n    } else {\n      Controller.go(Controller.toDest(destination), true);\n    }\n\n    reduce(true);\n  }\n\n  function shouldStart(e) {\n    var thresholds = options.dragMinThreshold;\n    var isObj = isObject(thresholds);\n    var mouse = isObj && thresholds.mouse || 0;\n    var touch = (isObj ? thresholds.touch : +thresholds) || 10;\n    return abs(diffCoord(e)) > (isTouchEvent(e) ? touch : mouse);\n  }\n\n  function isSliderDirection(e) {\n    return abs(diffCoord(e)) > abs(diffCoord(e, true));\n  }\n\n  function computeVelocity(e) {\n    if (Splide2.is(LOOP) || !exceeded) {\n      var time = diffTime(e);\n\n      if (time && time < LOG_INTERVAL) {\n        return diffCoord(e) / time;\n      }\n    }\n\n    return 0;\n  }\n\n  function computeDestination(velocity) {\n    return getPosition() + sign(velocity) * min(abs(velocity) * (options.flickPower || 600), isFree ? Infinity : Components2.Layout.listSize() * (options.flickMaxPages || 1));\n  }\n\n  function diffCoord(e, orthogonal) {\n    return coordOf(e, orthogonal) - coordOf(getBaseEvent(e), orthogonal);\n  }\n\n  function diffTime(e) {\n    return timeOf(e) - timeOf(getBaseEvent(e));\n  }\n\n  function getBaseEvent(e) {\n    return baseEvent === e && prevBaseEvent || baseEvent;\n  }\n\n  function coordOf(e, orthogonal) {\n    return (isTouchEvent(e) ? e.changedTouches[0] : e)[\"page\" + resolve(orthogonal ? \"Y\" : \"X\")];\n  }\n\n  function constrain(diff) {\n    return diff / (exceeded && Splide2.is(SLIDE) ? FRICTION : 1);\n  }\n\n  function isDraggable(target2) {\n    var noDrag = options.noDrag;\n    return !matches(target2, \".\" + CLASS_PAGINATION_PAGE + \", .\" + CLASS_ARROW) && (!noDrag || !matches(target2, noDrag));\n  }\n\n  function isTouchEvent(e) {\n    return typeof TouchEvent !== \"undefined\" && e instanceof TouchEvent;\n  }\n\n  function isDragging() {\n    return dragging;\n  }\n\n  function disable(value) {\n    disabled = value;\n  }\n\n  return {\n    mount: mount,\n    disable: disable,\n    isDragging: isDragging\n  };\n}\n\nvar NORMALIZATION_MAP = {\n  Spacebar: \" \",\n  Right: ARROW_RIGHT,\n  Left: ARROW_LEFT,\n  Up: ARROW_UP,\n  Down: ARROW_DOWN\n};\n\nfunction normalizeKey(key) {\n  key = isString(key) ? key : key.key;\n  return NORMALIZATION_MAP[key] || key;\n}\n\nvar KEYBOARD_EVENT = \"keydown\";\n\nfunction Keyboard(Splide2, Components2, options) {\n  var _EventInterface10 = EventInterface(Splide2),\n      on = _EventInterface10.on,\n      bind = _EventInterface10.bind,\n      unbind = _EventInterface10.unbind;\n\n  var root = Splide2.root;\n  var resolve = Components2.Direction.resolve;\n  var target;\n  var disabled;\n\n  function mount() {\n    init();\n    on(EVENT_UPDATED, destroy);\n    on(EVENT_UPDATED, init);\n    on(EVENT_MOVE, onMove);\n  }\n\n  function init() {\n    var keyboard = options.keyboard;\n\n    if (keyboard) {\n      target = keyboard === \"global\" ? window : root;\n      bind(target, KEYBOARD_EVENT, onKeydown);\n    }\n  }\n\n  function destroy() {\n    unbind(target, KEYBOARD_EVENT);\n  }\n\n  function disable(value) {\n    disabled = value;\n  }\n\n  function onMove() {\n    var _disabled = disabled;\n    disabled = true;\n    nextTick(function () {\n      disabled = _disabled;\n    });\n  }\n\n  function onKeydown(e) {\n    if (!disabled) {\n      var key = normalizeKey(e);\n\n      if (key === resolve(ARROW_LEFT)) {\n        Splide2.go(\"<\");\n      } else if (key === resolve(ARROW_RIGHT)) {\n        Splide2.go(\">\");\n      }\n    }\n  }\n\n  return {\n    mount: mount,\n    destroy: destroy,\n    disable: disable\n  };\n}\n\nvar SRC_DATA_ATTRIBUTE = DATA_ATTRIBUTE + \"-lazy\";\nvar SRCSET_DATA_ATTRIBUTE = SRC_DATA_ATTRIBUTE + \"-srcset\";\nvar IMAGE_SELECTOR = \"[\" + SRC_DATA_ATTRIBUTE + \"], [\" + SRCSET_DATA_ATTRIBUTE + \"]\";\n\nfunction LazyLoad(Splide2, Components2, options) {\n  var _EventInterface11 = EventInterface(Splide2),\n      on = _EventInterface11.on,\n      off = _EventInterface11.off,\n      bind = _EventInterface11.bind,\n      emit = _EventInterface11.emit;\n\n  var isSequential = options.lazyLoad === \"sequential\";\n  var events = [EVENT_MOVED, EVENT_SCROLLED];\n  var entries = [];\n\n  function mount() {\n    if (options.lazyLoad) {\n      init();\n      on(EVENT_REFRESH, init);\n    }\n  }\n\n  function init() {\n    empty(entries);\n    register();\n\n    if (isSequential) {\n      loadNext();\n    } else {\n      off(events);\n      on(events, check);\n      check();\n    }\n  }\n\n  function register() {\n    Components2.Slides.forEach(function (Slide) {\n      queryAll(Slide.slide, IMAGE_SELECTOR).forEach(function (img) {\n        var src = getAttribute(img, SRC_DATA_ATTRIBUTE);\n        var srcset = getAttribute(img, SRCSET_DATA_ATTRIBUTE);\n\n        if (src !== img.src || srcset !== img.srcset) {\n          var className = options.classes.spinner;\n          var parent = img.parentElement;\n          var spinner = child(parent, \".\" + className) || create(\"span\", className, parent);\n          entries.push([img, Slide, spinner]);\n          img.src || display(img, \"none\");\n        }\n      });\n    });\n  }\n\n  function check() {\n    entries = entries.filter(function (data) {\n      var distance = options.perPage * ((options.preloadPages || 1) + 1) - 1;\n      return data[1].isWithin(Splide2.index, distance) ? load(data) : true;\n    });\n    entries.length || off(events);\n  }\n\n  function load(data) {\n    var img = data[0];\n    addClass(data[1].slide, CLASS_LOADING);\n    bind(img, \"load error\", apply(onLoad, data));\n    setAttribute(img, \"src\", getAttribute(img, SRC_DATA_ATTRIBUTE));\n    setAttribute(img, \"srcset\", getAttribute(img, SRCSET_DATA_ATTRIBUTE));\n    removeAttribute(img, SRC_DATA_ATTRIBUTE);\n    removeAttribute(img, SRCSET_DATA_ATTRIBUTE);\n  }\n\n  function onLoad(data, e) {\n    var img = data[0],\n        Slide = data[1];\n    removeClass(Slide.slide, CLASS_LOADING);\n\n    if (e.type !== \"error\") {\n      remove(data[2]);\n      display(img, \"\");\n      emit(EVENT_LAZYLOAD_LOADED, img, Slide);\n      emit(EVENT_RESIZE);\n    }\n\n    isSequential && loadNext();\n  }\n\n  function loadNext() {\n    entries.length && load(entries.shift());\n  }\n\n  return {\n    mount: mount,\n    destroy: apply(empty, entries),\n    check: check\n  };\n}\n\nfunction Pagination(Splide2, Components2, options) {\n  var event = EventInterface(Splide2);\n  var on = event.on,\n      emit = event.emit,\n      bind = event.bind;\n  var Slides = Components2.Slides,\n      Elements = Components2.Elements,\n      Controller = Components2.Controller;\n  var hasFocus = Controller.hasFocus,\n      getIndex = Controller.getIndex,\n      go = Controller.go;\n  var resolve = Components2.Direction.resolve;\n  var placeholder = Elements.pagination;\n  var items = [];\n  var list;\n  var paginationClasses;\n\n  function mount() {\n    destroy();\n    on([EVENT_UPDATED, EVENT_REFRESH, EVENT_END_INDEX_CHANGED], mount);\n    var enabled = options.pagination;\n    placeholder && display(placeholder, enabled ? \"\" : \"none\");\n\n    if (enabled) {\n      on([EVENT_MOVE, EVENT_SCROLL, EVENT_SCROLLED], update);\n      createPagination();\n      update();\n      emit(EVENT_PAGINATION_MOUNTED, {\n        list: list,\n        items: items\n      }, getAt(Splide2.index));\n    }\n  }\n\n  function destroy() {\n    if (list) {\n      remove(placeholder ? slice(list.children) : list);\n      removeClass(list, paginationClasses);\n      empty(items);\n      list = null;\n    }\n\n    event.destroy();\n  }\n\n  function createPagination() {\n    var length = Splide2.length;\n    var classes = options.classes,\n        i18n = options.i18n,\n        perPage = options.perPage;\n    var max = hasFocus() ? Controller.getEnd() + 1 : ceil(length / perPage);\n    list = placeholder || create(\"ul\", classes.pagination, Elements.track.parentElement);\n    addClass(list, paginationClasses = CLASS_PAGINATION + \"--\" + getDirection());\n    setAttribute(list, ROLE, \"tablist\");\n    setAttribute(list, ARIA_LABEL, i18n.select);\n    setAttribute(list, ARIA_ORIENTATION, getDirection() === TTB ? \"vertical\" : \"\");\n\n    for (var i = 0; i < max; i++) {\n      var li = create(\"li\", null, list);\n      var button = create(\"button\", {\n        class: classes.page,\n        type: \"button\"\n      }, li);\n      var controls = Slides.getIn(i).map(function (Slide) {\n        return Slide.slide.id;\n      });\n      var text = !hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;\n      bind(button, \"click\", apply(onClick, i));\n\n      if (options.paginationKeyboard) {\n        bind(button, \"keydown\", apply(onKeydown, i));\n      }\n\n      setAttribute(li, ROLE, \"presentation\");\n      setAttribute(button, ROLE, \"tab\");\n      setAttribute(button, ARIA_CONTROLS, controls.join(\" \"));\n      setAttribute(button, ARIA_LABEL, format(text, i + 1));\n      setAttribute(button, TAB_INDEX, -1);\n      items.push({\n        li: li,\n        button: button,\n        page: i\n      });\n    }\n  }\n\n  function onClick(page) {\n    go(\">\" + page, true);\n  }\n\n  function onKeydown(page, e) {\n    var length = items.length;\n    var key = normalizeKey(e);\n    var dir = getDirection();\n    var nextPage = -1;\n\n    if (key === resolve(ARROW_RIGHT, false, dir)) {\n      nextPage = ++page % length;\n    } else if (key === resolve(ARROW_LEFT, false, dir)) {\n      nextPage = (--page + length) % length;\n    } else if (key === \"Home\") {\n      nextPage = 0;\n    } else if (key === \"End\") {\n      nextPage = length - 1;\n    }\n\n    var item = items[nextPage];\n\n    if (item) {\n      focus(item.button);\n      go(\">\" + nextPage);\n      prevent(e, true);\n    }\n  }\n\n  function getDirection() {\n    return options.paginationDirection || options.direction;\n  }\n\n  function getAt(index) {\n    return items[Controller.toPage(index)];\n  }\n\n  function update() {\n    var prev = getAt(getIndex(true));\n    var curr = getAt(getIndex());\n\n    if (prev) {\n      var button = prev.button;\n      removeClass(button, CLASS_ACTIVE);\n      removeAttribute(button, ARIA_SELECTED);\n      setAttribute(button, TAB_INDEX, -1);\n    }\n\n    if (curr) {\n      var _button = curr.button;\n      addClass(_button, CLASS_ACTIVE);\n      setAttribute(_button, ARIA_SELECTED, true);\n      setAttribute(_button, TAB_INDEX, \"\");\n    }\n\n    emit(EVENT_PAGINATION_UPDATED, {\n      list: list,\n      items: items\n    }, prev, curr);\n  }\n\n  return {\n    items: items,\n    mount: mount,\n    destroy: destroy,\n    getAt: getAt,\n    update: update\n  };\n}\n\nvar TRIGGER_KEYS = [\" \", \"Enter\"];\n\nfunction Sync(Splide2, Components2, options) {\n  var isNavigation = options.isNavigation,\n      slideFocus = options.slideFocus;\n  var events = [];\n\n  function mount() {\n    Splide2.splides.forEach(function (target) {\n      if (!target.isParent) {\n        sync(Splide2, target.splide);\n        sync(target.splide, Splide2);\n      }\n    });\n\n    if (isNavigation) {\n      navigate();\n    }\n  }\n\n  function destroy() {\n    events.forEach(function (event) {\n      event.destroy();\n    });\n    empty(events);\n  }\n\n  function remount() {\n    destroy();\n    mount();\n  }\n\n  function sync(splide, target) {\n    var event = EventInterface(splide);\n    event.on(EVENT_MOVE, function (index, prev, dest) {\n      target.go(target.is(LOOP) ? dest : index);\n    });\n    events.push(event);\n  }\n\n  function navigate() {\n    var event = EventInterface(Splide2);\n    var on = event.on;\n    on(EVENT_CLICK, onClick);\n    on(EVENT_SLIDE_KEYDOWN, onKeydown);\n    on([EVENT_MOUNTED, EVENT_UPDATED], update);\n    events.push(event);\n    event.emit(EVENT_NAVIGATION_MOUNTED, Splide2.splides);\n  }\n\n  function update() {\n    setAttribute(Components2.Elements.list, ARIA_ORIENTATION, options.direction === TTB ? \"vertical\" : \"\");\n  }\n\n  function onClick(Slide) {\n    Splide2.go(Slide.index);\n  }\n\n  function onKeydown(Slide, e) {\n    if (includes(TRIGGER_KEYS, normalizeKey(e))) {\n      onClick(Slide);\n      prevent(e);\n    }\n  }\n\n  return {\n    setup: apply(Components2.Media.set, {\n      slideFocus: isUndefined(slideFocus) ? isNavigation : slideFocus\n    }, true),\n    mount: mount,\n    destroy: destroy,\n    remount: remount\n  };\n}\n\nfunction Wheel(Splide2, Components2, options) {\n  var _EventInterface12 = EventInterface(Splide2),\n      bind = _EventInterface12.bind;\n\n  var lastTime = 0;\n\n  function mount() {\n    if (options.wheel) {\n      bind(Components2.Elements.track, \"wheel\", onWheel, SCROLL_LISTENER_OPTIONS);\n    }\n  }\n\n  function onWheel(e) {\n    if (e.cancelable) {\n      var deltaY = e.deltaY;\n      var backwards = deltaY < 0;\n      var timeStamp = timeOf(e);\n\n      var _min = options.wheelMinThreshold || 0;\n\n      var sleep = options.wheelSleep || 0;\n\n      if (abs(deltaY) > _min && timeStamp - lastTime > sleep) {\n        Splide2.go(backwards ? \"<\" : \">\");\n        lastTime = timeStamp;\n      }\n\n      shouldPrevent(backwards) && prevent(e);\n    }\n  }\n\n  function shouldPrevent(backwards) {\n    return !options.releaseWheel || Splide2.state.is(MOVING) || Components2.Controller.getAdjacent(backwards) !== -1;\n  }\n\n  return {\n    mount: mount\n  };\n}\n\nvar SR_REMOVAL_DELAY = 90;\n\nfunction Live(Splide2, Components2, options) {\n  var _EventInterface13 = EventInterface(Splide2),\n      on = _EventInterface13.on;\n\n  var track = Components2.Elements.track;\n  var enabled = options.live && !options.isNavigation;\n  var sr = create(\"span\", CLASS_SR);\n  var interval = RequestInterval(SR_REMOVAL_DELAY, apply(toggle, false));\n\n  function mount() {\n    if (enabled) {\n      disable(!Components2.Autoplay.isPaused());\n      setAttribute(track, ARIA_ATOMIC, true);\n      sr.textContent = \"\\u2026\";\n      on(EVENT_AUTOPLAY_PLAY, apply(disable, true));\n      on(EVENT_AUTOPLAY_PAUSE, apply(disable, false));\n      on([EVENT_MOVED, EVENT_SCROLLED], apply(toggle, true));\n    }\n  }\n\n  function toggle(active) {\n    setAttribute(track, ARIA_BUSY, active);\n\n    if (active) {\n      append(track, sr);\n      interval.start();\n    } else {\n      remove(sr);\n      interval.cancel();\n    }\n  }\n\n  function destroy() {\n    removeAttribute(track, [ARIA_LIVE, ARIA_ATOMIC, ARIA_BUSY]);\n    remove(sr);\n  }\n\n  function disable(disabled) {\n    if (enabled) {\n      setAttribute(track, ARIA_LIVE, disabled ? \"off\" : \"polite\");\n    }\n  }\n\n  return {\n    mount: mount,\n    disable: disable,\n    destroy: destroy\n  };\n}\n\nvar ComponentConstructors = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Media: Media,\n  Direction: Direction,\n  Elements: Elements,\n  Slides: Slides,\n  Layout: Layout,\n  Clones: Clones,\n  Move: Move,\n  Controller: Controller,\n  Arrows: Arrows,\n  Autoplay: Autoplay,\n  Cover: Cover,\n  Scroll: Scroll,\n  Drag: Drag,\n  Keyboard: Keyboard,\n  LazyLoad: LazyLoad,\n  Pagination: Pagination,\n  Sync: Sync,\n  Wheel: Wheel,\n  Live: Live\n});\nvar I18N = {\n  prev: \"Previous slide\",\n  next: \"Next slide\",\n  first: \"Go to first slide\",\n  last: \"Go to last slide\",\n  slideX: \"Go to slide %s\",\n  pageX: \"Go to page %s\",\n  play: \"Start autoplay\",\n  pause: \"Pause autoplay\",\n  carousel: \"carousel\",\n  slide: \"slide\",\n  select: \"Select a slide to show\",\n  slideLabel: \"%s of %s\"\n};\nvar DEFAULTS = {\n  type: \"slide\",\n  role: \"region\",\n  speed: 400,\n  perPage: 1,\n  cloneStatus: true,\n  arrows: true,\n  pagination: true,\n  paginationKeyboard: true,\n  interval: 5e3,\n  pauseOnHover: true,\n  pauseOnFocus: true,\n  resetProgress: true,\n  easing: \"cubic-bezier(0.25, 1, 0.5, 1)\",\n  drag: true,\n  direction: \"ltr\",\n  trimSpace: true,\n  focusableNodes: \"a, button, textarea, input, select, iframe\",\n  live: true,\n  classes: CLASSES,\n  i18n: I18N,\n  reducedMotion: {\n    speed: 0,\n    rewindSpeed: 0,\n    autoplay: \"pause\"\n  }\n};\n\nfunction Fade(Splide2, Components2, options) {\n  var Slides = Components2.Slides;\n\n  function mount() {\n    EventInterface(Splide2).on([EVENT_MOUNTED, EVENT_REFRESH], init);\n  }\n\n  function init() {\n    Slides.forEach(function (Slide) {\n      Slide.style(\"transform\", \"translateX(-\" + 100 * Slide.index + \"%)\");\n    });\n  }\n\n  function start(index, done) {\n    Slides.style(\"transition\", \"opacity \" + options.speed + \"ms \" + options.easing);\n    nextTick(done);\n  }\n\n  return {\n    mount: mount,\n    start: start,\n    cancel: noop\n  };\n}\n\nfunction Slide(Splide2, Components2, options) {\n  var Move = Components2.Move,\n      Controller = Components2.Controller,\n      Scroll = Components2.Scroll;\n  var list = Components2.Elements.list;\n  var transition = apply(style, list, \"transition\");\n  var endCallback;\n\n  function mount() {\n    EventInterface(Splide2).bind(list, \"transitionend\", function (e) {\n      if (e.target === list && endCallback) {\n        cancel();\n        endCallback();\n      }\n    });\n  }\n\n  function start(index, done) {\n    var destination = Move.toPosition(index, true);\n    var position = Move.getPosition();\n    var speed = getSpeed(index);\n\n    if (abs(destination - position) >= 1 && speed >= 1) {\n      if (options.useScroll) {\n        Scroll.scroll(destination, speed, false, done);\n      } else {\n        transition(\"transform \" + speed + \"ms \" + options.easing);\n        Move.translate(destination, true);\n        endCallback = done;\n      }\n    } else {\n      Move.jump(index);\n      done();\n    }\n  }\n\n  function cancel() {\n    transition(\"\");\n    Scroll.cancel();\n  }\n\n  function getSpeed(index) {\n    var rewindSpeed = options.rewindSpeed;\n\n    if (Splide2.is(SLIDE) && rewindSpeed) {\n      var prev = Controller.getIndex(true);\n      var end = Controller.getEnd();\n\n      if (prev === 0 && index >= end || prev >= end && index === 0) {\n        return rewindSpeed;\n      }\n    }\n\n    return options.speed;\n  }\n\n  return {\n    mount: mount,\n    start: start,\n    cancel: cancel\n  };\n}\n\nvar _Splide = /*#__PURE__*/function () {\n  function _Splide(target, options) {\n    this.event = EventInterface();\n    this.Components = {};\n    this.state = State(CREATED);\n    this.splides = [];\n    this._o = {};\n    this._E = {};\n    var root = isString(target) ? query(document, target) : target;\n    assert(root, root + \" is invalid.\");\n    this.root = root;\n    options = merge({\n      label: getAttribute(root, ARIA_LABEL) || \"\",\n      labelledby: getAttribute(root, ARIA_LABELLEDBY) || \"\"\n    }, DEFAULTS, _Splide.defaults, options || {});\n\n    try {\n      merge(options, JSON.parse(getAttribute(root, DATA_ATTRIBUTE)));\n    } catch (e) {\n      assert(false, \"Invalid JSON\");\n    }\n\n    this._o = Object.create(merge({}, options));\n  }\n\n  var _proto = _Splide.prototype;\n\n  _proto.mount = function mount(Extensions, Transition) {\n    var _this = this;\n\n    var state = this.state,\n        Components2 = this.Components;\n    assert(state.is([CREATED, DESTROYED]), \"Already mounted!\");\n    state.set(CREATED);\n    this._C = Components2;\n    this._T = Transition || this._T || (this.is(FADE) ? Fade : Slide);\n    this._E = Extensions || this._E;\n    var Constructors = assign({}, ComponentConstructors, this._E, {\n      Transition: this._T\n    });\n    forOwn(Constructors, function (Component, key) {\n      var component = Component(_this, Components2, _this._o);\n      Components2[key] = component;\n      component.setup && component.setup();\n    });\n    forOwn(Components2, function (component) {\n      component.mount && component.mount();\n    });\n    this.emit(EVENT_MOUNTED);\n    addClass(this.root, CLASS_INITIALIZED);\n    state.set(IDLE);\n    this.emit(EVENT_READY);\n    return this;\n  };\n\n  _proto.sync = function sync(splide) {\n    this.splides.push({\n      splide: splide\n    });\n    splide.splides.push({\n      splide: this,\n      isParent: true\n    });\n\n    if (this.state.is(IDLE)) {\n      this._C.Sync.remount();\n\n      splide.Components.Sync.remount();\n    }\n\n    return this;\n  };\n\n  _proto.go = function go(control) {\n    this._C.Controller.go(control);\n\n    return this;\n  };\n\n  _proto.on = function on(events, callback) {\n    this.event.on(events, callback);\n    return this;\n  };\n\n  _proto.off = function off(events) {\n    this.event.off(events);\n    return this;\n  };\n\n  _proto.emit = function emit(event) {\n    var _this$event;\n\n    (_this$event = this.event).emit.apply(_this$event, [event].concat(slice(arguments, 1)));\n\n    return this;\n  };\n\n  _proto.add = function add(slides, index) {\n    this._C.Slides.add(slides, index);\n\n    return this;\n  };\n\n  _proto.remove = function remove(matcher) {\n    this._C.Slides.remove(matcher);\n\n    return this;\n  };\n\n  _proto.is = function is(type) {\n    return this._o.type === type;\n  };\n\n  _proto.refresh = function refresh() {\n    this.emit(EVENT_REFRESH);\n    return this;\n  };\n\n  _proto.destroy = function destroy(completely) {\n    if (completely === void 0) {\n      completely = true;\n    }\n\n    var event = this.event,\n        state = this.state;\n\n    if (state.is(CREATED)) {\n      EventInterface(this).on(EVENT_READY, this.destroy.bind(this, completely));\n    } else {\n      forOwn(this._C, function (component) {\n        component.destroy && component.destroy(completely);\n      }, true);\n      event.emit(EVENT_DESTROY);\n      event.destroy();\n      completely && empty(this.splides);\n      state.set(DESTROYED);\n    }\n\n    return this;\n  };\n\n  _createClass(_Splide, [{\n    key: \"options\",\n    get: function get() {\n      return this._o;\n    },\n    set: function set(options) {\n      this._C.Media.set(options, true, true);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._C.Slides.getLength(true);\n    }\n  }, {\n    key: \"index\",\n    get: function get() {\n      return this._C.Controller.getIndex();\n    }\n  }]);\n\n  return _Splide;\n}();\n\nvar Splide = _Splide;\nSplide.defaults = {};\nSplide.STATES = STATES;\nvar CLASS_RENDERED = \"is-rendered\";\nvar RENDERER_DEFAULT_CONFIG = {\n  listTag: \"ul\",\n  slideTag: \"li\"\n};\n\nvar Style = /*#__PURE__*/function () {\n  function Style(id, options) {\n    this.styles = {};\n    this.id = id;\n    this.options = options;\n  }\n\n  var _proto2 = Style.prototype;\n\n  _proto2.rule = function rule(selector, prop, value, breakpoint) {\n    breakpoint = breakpoint || \"default\";\n    var selectors = this.styles[breakpoint] = this.styles[breakpoint] || {};\n    var styles = selectors[selector] = selectors[selector] || {};\n    styles[prop] = value;\n  };\n\n  _proto2.build = function build() {\n    var _this2 = this;\n\n    var css = \"\";\n\n    if (this.styles.default) {\n      css += this.buildSelectors(this.styles.default);\n    }\n\n    Object.keys(this.styles).sort(function (n, m) {\n      return _this2.options.mediaQuery === \"min\" ? +n - +m : +m - +n;\n    }).forEach(function (breakpoint) {\n      if (breakpoint !== \"default\") {\n        css += \"@media screen and (max-width: \" + breakpoint + \"px) {\";\n        css += _this2.buildSelectors(_this2.styles[breakpoint]);\n        css += \"}\";\n      }\n    });\n    return css;\n  };\n\n  _proto2.buildSelectors = function buildSelectors(selectors) {\n    var _this3 = this;\n\n    var css = \"\";\n    forOwn(selectors, function (styles, selector) {\n      selector = (\"#\" + _this3.id + \" \" + selector).trim();\n      css += selector + \" {\";\n      forOwn(styles, function (value, prop) {\n        if (value || value === 0) {\n          css += prop + \": \" + value + \";\";\n        }\n      });\n      css += \"}\";\n    });\n    return css;\n  };\n\n  return Style;\n}();\n\nvar SplideRenderer = /*#__PURE__*/function () {\n  function SplideRenderer(contents, options, config, defaults) {\n    this.slides = [];\n    this.options = {};\n    this.breakpoints = [];\n    merge(DEFAULTS, defaults || {});\n    merge(merge(this.options, DEFAULTS), options || {});\n    this.contents = contents;\n    this.config = assign({}, RENDERER_DEFAULT_CONFIG, config || {});\n    this.id = this.config.id || uniqueId(\"splide\");\n    this.Style = new Style(this.id, this.options);\n    this.Direction = Direction(null, null, this.options);\n    assert(this.contents.length, \"Provide at least 1 content.\");\n    this.init();\n  }\n\n  SplideRenderer.clean = function clean(splide) {\n    var _EventInterface14 = EventInterface(splide),\n        on = _EventInterface14.on;\n\n    var root = splide.root;\n    var clones = queryAll(root, \".\" + CLASS_CLONE);\n    on(EVENT_MOUNTED, function () {\n      remove(child(root, \"style\"));\n    });\n    remove(clones);\n  };\n\n  var _proto3 = SplideRenderer.prototype;\n\n  _proto3.init = function init() {\n    this.parseBreakpoints();\n    this.initSlides();\n    this.registerRootStyles();\n    this.registerTrackStyles();\n    this.registerSlideStyles();\n    this.registerListStyles();\n  };\n\n  _proto3.initSlides = function initSlides() {\n    var _this4 = this;\n\n    push(this.slides, this.contents.map(function (content, index) {\n      content = isString(content) ? {\n        html: content\n      } : content;\n      content.styles = content.styles || {};\n      content.attrs = content.attrs || {};\n\n      _this4.cover(content);\n\n      var classes = _this4.options.classes.slide + \" \" + (index === 0 ? CLASS_ACTIVE : \"\");\n      assign(content.attrs, {\n        class: (classes + \" \" + (content.attrs.class || \"\")).trim(),\n        style: _this4.buildStyles(content.styles)\n      });\n      return content;\n    }));\n\n    if (this.isLoop()) {\n      this.generateClones(this.slides);\n    }\n  };\n\n  _proto3.registerRootStyles = function registerRootStyles() {\n    var _this5 = this;\n\n    this.breakpoints.forEach(function (_ref2) {\n      var width = _ref2[0],\n          options = _ref2[1];\n\n      _this5.Style.rule(\" \", \"max-width\", unit(options.width), width);\n    });\n  };\n\n  _proto3.registerTrackStyles = function registerTrackStyles() {\n    var _this6 = this;\n\n    var Style2 = this.Style;\n    var selector = \".\" + CLASS_TRACK;\n    this.breakpoints.forEach(function (_ref3) {\n      var width = _ref3[0],\n          options = _ref3[1];\n      Style2.rule(selector, _this6.resolve(\"paddingLeft\"), _this6.cssPadding(options, false), width);\n      Style2.rule(selector, _this6.resolve(\"paddingRight\"), _this6.cssPadding(options, true), width);\n      Style2.rule(selector, \"height\", _this6.cssTrackHeight(options), width);\n    });\n  };\n\n  _proto3.registerListStyles = function registerListStyles() {\n    var _this7 = this;\n\n    var Style2 = this.Style;\n    var selector = \".\" + CLASS_LIST;\n    this.breakpoints.forEach(function (_ref4) {\n      var width = _ref4[0],\n          options = _ref4[1];\n      Style2.rule(selector, \"transform\", _this7.buildTranslate(options), width);\n\n      if (!_this7.cssSlideHeight(options)) {\n        Style2.rule(selector, \"aspect-ratio\", _this7.cssAspectRatio(options), width);\n      }\n    });\n  };\n\n  _proto3.registerSlideStyles = function registerSlideStyles() {\n    var _this8 = this;\n\n    var Style2 = this.Style;\n    var selector = \".\" + CLASS_SLIDE;\n    this.breakpoints.forEach(function (_ref5) {\n      var width = _ref5[0],\n          options = _ref5[1];\n      Style2.rule(selector, \"width\", _this8.cssSlideWidth(options), width);\n      Style2.rule(selector, \"height\", _this8.cssSlideHeight(options) || \"100%\", width);\n      Style2.rule(selector, _this8.resolve(\"marginRight\"), unit(options.gap) || \"0px\", width);\n      Style2.rule(selector + \" > img\", \"display\", options.cover ? \"none\" : \"inline\", width);\n    });\n  };\n\n  _proto3.buildTranslate = function buildTranslate(options) {\n    var _this$Direction = this.Direction,\n        resolve = _this$Direction.resolve,\n        orient = _this$Direction.orient;\n    var values = [];\n    values.push(this.cssOffsetClones(options));\n    values.push(this.cssOffsetGaps(options));\n\n    if (this.isCenter(options)) {\n      values.push(this.buildCssValue(orient(-50), \"%\"));\n      values.push.apply(values, this.cssOffsetCenter(options));\n    }\n\n    return values.filter(Boolean).map(function (value) {\n      return \"translate\" + resolve(\"X\") + \"(\" + value + \")\";\n    }).join(\" \");\n  };\n\n  _proto3.cssOffsetClones = function cssOffsetClones(options) {\n    var _this$Direction2 = this.Direction,\n        resolve = _this$Direction2.resolve,\n        orient = _this$Direction2.orient;\n    var cloneCount = this.getCloneCount();\n\n    if (this.isFixedWidth(options)) {\n      var _this$parseCssValue = this.parseCssValue(options[resolve(\"fixedWidth\")]),\n          value = _this$parseCssValue.value,\n          unit2 = _this$parseCssValue.unit;\n\n      return this.buildCssValue(orient(value) * cloneCount, unit2);\n    }\n\n    var percent = 100 * cloneCount / options.perPage;\n    return orient(percent) + \"%\";\n  };\n\n  _proto3.cssOffsetCenter = function cssOffsetCenter(options) {\n    var _this$Direction3 = this.Direction,\n        resolve = _this$Direction3.resolve,\n        orient = _this$Direction3.orient;\n\n    if (this.isFixedWidth(options)) {\n      var _this$parseCssValue2 = this.parseCssValue(options[resolve(\"fixedWidth\")]),\n          value = _this$parseCssValue2.value,\n          unit2 = _this$parseCssValue2.unit;\n\n      return [this.buildCssValue(orient(value / 2), unit2)];\n    }\n\n    var values = [];\n    var perPage = options.perPage,\n        gap = options.gap;\n    values.push(orient(50 / perPage) + \"%\");\n\n    if (gap) {\n      var _this$parseCssValue3 = this.parseCssValue(gap),\n          _value = _this$parseCssValue3.value,\n          _unit = _this$parseCssValue3.unit;\n\n      var gapOffset = (_value / perPage - _value) / 2;\n      values.push(this.buildCssValue(orient(gapOffset), _unit));\n    }\n\n    return values;\n  };\n\n  _proto3.cssOffsetGaps = function cssOffsetGaps(options) {\n    var cloneCount = this.getCloneCount();\n\n    if (cloneCount && options.gap) {\n      var orient = this.Direction.orient;\n\n      var _this$parseCssValue4 = this.parseCssValue(options.gap),\n          value = _this$parseCssValue4.value,\n          unit2 = _this$parseCssValue4.unit;\n\n      if (this.isFixedWidth(options)) {\n        return this.buildCssValue(orient(value * cloneCount), unit2);\n      }\n\n      var perPage = options.perPage;\n      var gaps = cloneCount / perPage;\n      return this.buildCssValue(orient(gaps * value), unit2);\n    }\n\n    return \"\";\n  };\n\n  _proto3.resolve = function resolve(prop) {\n    return camelToKebab(this.Direction.resolve(prop));\n  };\n\n  _proto3.cssPadding = function cssPadding(options, right) {\n    var padding = options.padding;\n    var prop = this.Direction.resolve(right ? \"right\" : \"left\", true);\n    return padding && unit(padding[prop] || (isObject(padding) ? 0 : padding)) || \"0px\";\n  };\n\n  _proto3.cssTrackHeight = function cssTrackHeight(options) {\n    var height = \"\";\n\n    if (this.isVertical()) {\n      height = this.cssHeight(options);\n      assert(height, '\"height\" is missing.');\n      height = \"calc(\" + height + \" - \" + this.cssPadding(options, false) + \" - \" + this.cssPadding(options, true) + \")\";\n    }\n\n    return height;\n  };\n\n  _proto3.cssHeight = function cssHeight(options) {\n    return unit(options.height);\n  };\n\n  _proto3.cssSlideWidth = function cssSlideWidth(options) {\n    return options.autoWidth ? \"\" : unit(options.fixedWidth) || (this.isVertical() ? \"\" : this.cssSlideSize(options));\n  };\n\n  _proto3.cssSlideHeight = function cssSlideHeight(options) {\n    return unit(options.fixedHeight) || (this.isVertical() ? options.autoHeight ? \"\" : this.cssSlideSize(options) : this.cssHeight(options));\n  };\n\n  _proto3.cssSlideSize = function cssSlideSize(options) {\n    var gap = unit(options.gap);\n    return \"calc((100%\" + (gap && \" + \" + gap) + \")/\" + (options.perPage || 1) + (gap && \" - \" + gap) + \")\";\n  };\n\n  _proto3.cssAspectRatio = function cssAspectRatio(options) {\n    var heightRatio = options.heightRatio;\n    return heightRatio ? \"\" + 1 / heightRatio : \"\";\n  };\n\n  _proto3.buildCssValue = function buildCssValue(value, unit2) {\n    return \"\" + value + unit2;\n  };\n\n  _proto3.parseCssValue = function parseCssValue(value) {\n    if (isString(value)) {\n      var number = parseFloat(value) || 0;\n      var unit2 = value.replace(/\\d*(\\.\\d*)?/, \"\") || \"px\";\n      return {\n        value: number,\n        unit: unit2\n      };\n    }\n\n    return {\n      value: value,\n      unit: \"px\"\n    };\n  };\n\n  _proto3.parseBreakpoints = function parseBreakpoints() {\n    var _this9 = this;\n\n    var breakpoints = this.options.breakpoints;\n    this.breakpoints.push([\"default\", this.options]);\n\n    if (breakpoints) {\n      forOwn(breakpoints, function (options, width) {\n        _this9.breakpoints.push([width, merge(merge({}, _this9.options), options)]);\n      });\n    }\n  };\n\n  _proto3.isFixedWidth = function isFixedWidth(options) {\n    return !!options[this.Direction.resolve(\"fixedWidth\")];\n  };\n\n  _proto3.isLoop = function isLoop() {\n    return this.options.type === LOOP;\n  };\n\n  _proto3.isCenter = function isCenter(options) {\n    if (options.focus === \"center\") {\n      if (this.isLoop()) {\n        return true;\n      }\n\n      if (this.options.type === SLIDE) {\n        return !this.options.trimSpace;\n      }\n    }\n\n    return false;\n  };\n\n  _proto3.isVertical = function isVertical() {\n    return this.options.direction === TTB;\n  };\n\n  _proto3.buildClasses = function buildClasses() {\n    var options = this.options;\n    return [CLASS_ROOT, CLASS_ROOT + \"--\" + options.type, CLASS_ROOT + \"--\" + options.direction, options.drag && CLASS_ROOT + \"--draggable\", options.isNavigation && CLASS_ROOT + \"--nav\", CLASS_ACTIVE, !this.config.hidden && CLASS_RENDERED].filter(Boolean).join(\" \");\n  };\n\n  _proto3.buildAttrs = function buildAttrs(attrs) {\n    var attr = \"\";\n    forOwn(attrs, function (value, key) {\n      attr += value ? \" \" + camelToKebab(key) + \"=\\\"\" + value + \"\\\"\" : \"\";\n    });\n    return attr.trim();\n  };\n\n  _proto3.buildStyles = function buildStyles(styles) {\n    var style = \"\";\n    forOwn(styles, function (value, key) {\n      style += \" \" + camelToKebab(key) + \":\" + value + \";\";\n    });\n    return style.trim();\n  };\n\n  _proto3.renderSlides = function renderSlides() {\n    var _this10 = this;\n\n    var tag = this.config.slideTag;\n    return this.slides.map(function (content) {\n      return \"<\" + tag + \" \" + _this10.buildAttrs(content.attrs) + \">\" + (content.html || \"\") + \"</\" + tag + \">\";\n    }).join(\"\");\n  };\n\n  _proto3.cover = function cover(content) {\n    var styles = content.styles,\n        _content$html = content.html,\n        html = _content$html === void 0 ? \"\" : _content$html;\n\n    if (this.options.cover && !this.options.lazyLoad) {\n      var src = html.match(/<img.*?src\\s*=\\s*(['\"])(.+?)\\1.*?>/);\n\n      if (src && src[2]) {\n        styles.background = \"center/cover no-repeat url('\" + src[2] + \"')\";\n      }\n    }\n  };\n\n  _proto3.generateClones = function generateClones(contents) {\n    var classes = this.options.classes;\n    var count = this.getCloneCount();\n    var slides = contents.slice();\n\n    while (slides.length < count) {\n      push(slides, slides);\n    }\n\n    push(slides.slice(-count).reverse(), slides.slice(0, count)).forEach(function (content, index) {\n      var attrs = assign({}, content.attrs, {\n        class: content.attrs.class + \" \" + classes.clone\n      });\n      var clone = assign({}, content, {\n        attrs: attrs\n      });\n      index < count ? contents.unshift(clone) : contents.push(clone);\n    });\n  };\n\n  _proto3.getCloneCount = function getCloneCount() {\n    if (this.isLoop()) {\n      var options = this.options;\n\n      if (options.clones) {\n        return options.clones;\n      }\n\n      var perPage = max.apply(void 0, this.breakpoints.map(function (_ref6) {\n        var options2 = _ref6[1];\n        return options2.perPage;\n      }));\n      return perPage * ((options.flickMaxPages || 1) + 1);\n    }\n\n    return 0;\n  };\n\n  _proto3.renderArrows = function renderArrows() {\n    var html = \"\";\n    html += \"<div class=\\\"\" + this.options.classes.arrows + \"\\\">\";\n    html += this.renderArrow(true);\n    html += this.renderArrow(false);\n    html += \"</div>\";\n    return html;\n  };\n\n  _proto3.renderArrow = function renderArrow(prev) {\n    var _this$options = this.options,\n        classes = _this$options.classes,\n        i18n = _this$options.i18n;\n    var attrs = {\n      class: classes.arrow + \" \" + (prev ? classes.prev : classes.next),\n      type: \"button\",\n      ariaLabel: prev ? i18n.prev : i18n.next\n    };\n    return \"<button \" + this.buildAttrs(attrs) + \"><svg xmlns=\\\"\" + XML_NAME_SPACE + \"\\\" viewBox=\\\"0 0 \" + SIZE + \" \" + SIZE + \"\\\" width=\\\"\" + SIZE + \"\\\" height=\\\"\" + SIZE + \"\\\"><path d=\\\"\" + (this.options.arrowPath || PATH) + \"\\\" /></svg></button>\";\n  };\n\n  _proto3.html = function html() {\n    var _this$config = this.config,\n        rootClass = _this$config.rootClass,\n        listTag = _this$config.listTag,\n        arrows = _this$config.arrows,\n        beforeTrack = _this$config.beforeTrack,\n        afterTrack = _this$config.afterTrack,\n        slider = _this$config.slider,\n        beforeSlider = _this$config.beforeSlider,\n        afterSlider = _this$config.afterSlider;\n    var html = \"\";\n    html += \"<div id=\\\"\" + this.id + \"\\\" class=\\\"\" + this.buildClasses() + \" \" + (rootClass || \"\") + \"\\\">\";\n    html += \"<style>\" + this.Style.build() + \"</style>\";\n\n    if (slider) {\n      html += beforeSlider || \"\";\n      html += \"<div class=\\\"splide__slider\\\">\";\n    }\n\n    html += beforeTrack || \"\";\n\n    if (arrows) {\n      html += this.renderArrows();\n    }\n\n    html += \"<div class=\\\"splide__track\\\">\";\n    html += \"<\" + listTag + \" class=\\\"splide__list\\\">\";\n    html += this.renderSlides();\n    html += \"</\" + listTag + \">\";\n    html += \"</div>\";\n    html += afterTrack || \"\";\n\n    if (slider) {\n      html += \"</div>\";\n      html += afterSlider || \"\";\n    }\n\n    html += \"</div>\";\n    return html;\n  };\n\n  return SplideRenderer;\n}();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@splidejs/splide/dist/js/splide.esm.js\n");

/***/ }),

/***/ "./node_modules/accordion-js/dist/accordion.min.js":
/*!*********************************************************!*\
  !*** ./node_modules/accordion-js/dist/accordion.min.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("/**\r\n * Accordion v3.3.4\r\n * Lightweight and accessible accordion module created in pure Javascript\r\n * https://github.com/michu2k/Accordion\r\n *\r\n * Copyright (c) Michał Strumpf\r\n * Published under MIT License\r\n */\r\n\r\n!function(e){var t=0,n=function e(n,s){var i=this,r=this,o=!1;if(Array.isArray(n))return!!n.length&&n.map((function(t){return new e(t,s)}));var a={init:function(){this.options=Object.assign({duration:600,ariaEnabled:!0,collapse:!0,showMultiple:!1,onlyChildNodes:!0,openOnInit:[],elementClass:\"ac\",triggerClass:\"ac-trigger\",panelClass:\"ac-panel\",activeClass:\"is-active\",beforeOpen:function(){},onOpen:function(){},beforeClose:function(){},onClose:function(){}},s);var e=\"string\"==typeof n;this.container=e?document.querySelector(n):n,this.createDefinitions(),r.attachEvents()},createDefinitions:function(){var e=this,n=this.options,s=n.elementClass,i=n.openOnInit,r=n.onlyChildNodes?this.container.childNodes:this.container.querySelectorAll(u(s));this.elements=Array.from(r).filter((function(e){return e.classList&&e.classList.contains(s)})),this.firstElement=this.elements[0],this.lastElement=this.elements[this.elements.length-1],this.elements.filter((function(e){return!e.classList.contains(\"js-enabled\")})).forEach((function(n){n.classList.add(\"js-enabled\"),e.generateIDs(n),e.setARIA(n),e.setTransition(n);var s=e.elements.indexOf(n);t++,i.includes(s)?e.showElement(n,!1):e.closeElement(n,!1)}))},setTransition:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.options,s=n.duration,i=n.panelClass,r=e.querySelector(u(i)),o=l(\"transitionDuration\");r.style[o]=t?null:\"\".concat(s,\"ms\")},generateIDs:function(e){var n=this.options,s=n.triggerClass,i=n.panelClass,r=e.querySelector(u(s)),o=e.querySelector(u(i));e.setAttribute(\"id\",e.id||\"ac-\".concat(t)),r.setAttribute(\"id\",r.id||\"ac-trigger-\".concat(t)),o.setAttribute(\"id\",o.id||\"ac-panel-\".concat(t))},removeIDs:function(e){var t=this.options,n=t.triggerClass,s=t.panelClass,i=e.querySelector(u(n)),r=e.querySelector(u(s));e.id.startsWith(\"ac-\")&&e.removeAttribute(\"id\"),i.id.startsWith(\"ac-\")&&i.removeAttribute(\"id\"),r.id.startsWith(\"ac-\")&&r.removeAttribute(\"id\")},setARIA:function(e){var t=this.options,n=t.ariaEnabled,s=t.triggerClass,i=t.panelClass;if(n){var r=e.querySelector(u(s)),o=e.querySelector(u(i));r.setAttribute(\"role\",\"button\"),r.setAttribute(\"aria-controls\",o.id),r.setAttribute(\"aria-disabled\",!1),r.setAttribute(\"aria-expanded\",!1),o.setAttribute(\"role\",\"region\"),o.setAttribute(\"aria-labelledby\",r.id)}},updateARIA:function(e,t){var n=t.ariaExpanded,s=t.ariaDisabled,i=this.options,r=i.ariaEnabled,o=i.triggerClass;if(r){var a=e.querySelector(u(o));a.setAttribute(\"aria-expanded\",n),a.setAttribute(\"aria-disabled\",s)}},removeARIA:function(e){var t=this.options,n=t.ariaEnabled,s=t.triggerClass,i=t.panelClass;if(n){var r=e.querySelector(u(s)),o=e.querySelector(u(i));r.removeAttribute(\"role\"),r.removeAttribute(\"aria-controls\"),r.removeAttribute(\"aria-disabled\"),r.removeAttribute(\"aria-expanded\"),o.removeAttribute(\"role\"),o.removeAttribute(\"aria-labelledby\")}},focus:function(e,t){e.preventDefault();var n=this.options.triggerClass;t.querySelector(u(n)).focus()},focusFirstElement:function(e){this.focus(e,this.firstElement),this.currFocusedIdx=0},focusLastElement:function(e){this.focus(e,this.lastElement),this.currFocusedIdx=this.elements.length-1},focusNextElement:function(e){var t=this.currFocusedIdx+1;if(t>this.elements.length-1)return this.focusFirstElement(e);this.focus(e,this.elements[t]),this.currFocusedIdx=t},focusPrevElement:function(e){var t=this.currFocusedIdx-1;if(t<0)return this.focusLastElement(e);this.focus(e,this.elements[t]),this.currFocusedIdx=t},showElement:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=this.options,s=n.panelClass,i=n.activeClass,r=n.collapse,o=n.beforeOpen;t&&o(e);var a=e.querySelector(u(s)),l=a.scrollHeight;e.classList.add(i),requestAnimationFrame((function(){requestAnimationFrame((function(){a.style.height=t?\"\".concat(l,\"px\"):\"auto\"}))})),this.updateARIA(e,{ariaExpanded:!0,ariaDisabled:!r})},closeElement:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=this.options,s=n.panelClass,i=n.activeClass,r=n.beforeClose,o=e.querySelector(u(s)),a=o.scrollHeight;e.classList.remove(i),t?(r(e),requestAnimationFrame((function(){o.style.height=\"\".concat(a,\"px\"),requestAnimationFrame((function(){o.style.height=0}))}))):o.style.height=0,this.updateARIA(e,{ariaExpanded:!1,ariaDisabled:!1})},toggleElement:function(e){var t=this.options,n=t.activeClass,s=t.collapse,i=e.classList.contains(n);if(!i||s)return i?this.closeElement(e):this.showElement(e)},closeElements:function(){var e=this,t=this.options,n=t.activeClass;t.showMultiple||this.elements.forEach((function(t,s){t.classList.contains(n)&&s!==e.currFocusedIdx&&e.closeElement(t)}))},handleClick:function(e){var t=this,n=e.currentTarget;this.elements.forEach((function(s,i){s.contains(n)&&\"A\"!==e.target.nodeName&&(t.currFocusedIdx=i,t.closeElements(),t.focus(e,s),t.toggleElement(s))}))},handleKeydown:function(e){switch(e.key){case\"ArrowUp\":return this.focusPrevElement(e);case\"ArrowDown\":return this.focusNextElement(e);case\"Home\":return this.focusFirstElement(e);case\"End\":return this.focusLastElement(e);default:return null}},handleFocus:function(e){var t=e.currentTarget,n=this.elements.find((function(e){return e.contains(t)}));this.currFocusedIdx=this.elements.indexOf(n)},handleTransitionEnd:function(e){if(e.stopPropagation(),\"height\"===e.propertyName){var t=this.options,n=t.onOpen,s=t.onClose,i=e.currentTarget,r=parseInt(i.style.height),o=this.elements.find((function(e){return e.contains(i)}));r>0?(i.style.height=\"auto\",n(o)):s(o)}}};this.attachEvents=function(){if(!o){var e=a.options,t=e.triggerClass,n=e.panelClass;a.handleClick=a.handleClick.bind(a),a.handleKeydown=a.handleKeydown.bind(a),a.handleFocus=a.handleFocus.bind(a),a.handleTransitionEnd=a.handleTransitionEnd.bind(a),a.elements.forEach((function(e){var s=e.querySelector(u(t)),i=e.querySelector(u(n));s.addEventListener(\"click\",a.handleClick),s.addEventListener(\"keydown\",a.handleKeydown),s.addEventListener(\"focus\",a.handleFocus),i.addEventListener(\"webkitTransitionEnd\",a.handleTransitionEnd),i.addEventListener(\"transitionend\",a.handleTransitionEnd)})),o=!0}},this.detachEvents=function(){if(o){var e=a.options,t=e.triggerClass,n=e.panelClass;a.elements.forEach((function(e){var s=e.querySelector(u(t)),i=e.querySelector(u(n));s.removeEventListener(\"click\",a.handleClick),s.removeEventListener(\"keydown\",a.handleKeydown),s.removeEventListener(\"focus\",a.handleFocus),i.removeEventListener(\"webkitTransitionEnd\",a.handleTransitionEnd),i.removeEventListener(\"transitionend\",a.handleTransitionEnd)})),o=!1}},this.toggle=function(e){var t=a.elements[e];t&&a.toggleElement(t)},this.open=function(e){var t=a.elements[e];t&&a.showElement(t)},this.openAll=function(){var e=a.options,t=e.activeClass,n=e.onOpen;a.elements.forEach((function(e){e.classList.contains(t)||(a.showElement(e,!1),n(e))}))},this.close=function(e){var t=a.elements[e];t&&a.closeElement(t)},this.closeAll=function(){var e=a.options,t=e.activeClass,n=e.onClose;a.elements.forEach((function(e){e.classList.contains(t)&&(a.closeElement(e,!1),n(e))}))},this.destroy=function(){i.detachEvents(),i.openAll(),a.elements.forEach((function(e){a.removeIDs(e),a.removeARIA(e),a.setTransition(e,!0)})),o=!0},this.update=function(){a.createDefinitions(),i.detachEvents(),i.attachEvents()};var l=function(e){return\"string\"==typeof document.documentElement.style[e]?e:(e=c(e),e=\"webkit\".concat(e))},c=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},u=function(e){return\".\".concat(CSS.escape(e))};a.init()}; true&&void 0!==module.exports?module.exports=n:e.Accordion=n}(window);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/accordion-js/dist/accordion.min.js\n");

/***/ }),

/***/ "./node_modules/alpinejs/dist/module.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/alpinejs/dist/module.esm.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ module_default)\n/* harmony export */ });\n// packages/alpinejs/src/scheduler.js\nvar flushPending = false;\nvar flushing = false;\nvar queue = [];\nvar lastFlushedIndex = -1;\nfunction scheduler(callback) {\n  queueJob(callback);\n}\nfunction queueJob(job) {\n  if (!queue.includes(job))\n    queue.push(job);\n  queueFlush();\n}\nfunction dequeueJob(job) {\n  let index = queue.indexOf(job);\n  if (index !== -1 && index > lastFlushedIndex)\n    queue.splice(index, 1);\n}\nfunction queueFlush() {\n  if (!flushing && !flushPending) {\n    flushPending = true;\n    queueMicrotask(flushJobs);\n  }\n}\nfunction flushJobs() {\n  flushPending = false;\n  flushing = true;\n  for (let i = 0; i < queue.length; i++) {\n    queue[i]();\n    lastFlushedIndex = i;\n  }\n  queue.length = 0;\n  lastFlushedIndex = -1;\n  flushing = false;\n}\n\n// packages/alpinejs/src/reactivity.js\nvar reactive;\nvar effect;\nvar release;\nvar raw;\nvar shouldSchedule = true;\nfunction disableEffectScheduling(callback) {\n  shouldSchedule = false;\n  callback();\n  shouldSchedule = true;\n}\nfunction setReactivityEngine(engine) {\n  reactive = engine.reactive;\n  release = engine.release;\n  effect = (callback) => engine.effect(callback, { scheduler: (task) => {\n    if (shouldSchedule) {\n      scheduler(task);\n    } else {\n      task();\n    }\n  } });\n  raw = engine.raw;\n}\nfunction overrideEffect(override) {\n  effect = override;\n}\nfunction elementBoundEffect(el) {\n  let cleanup2 = () => {\n  };\n  let wrappedEffect = (callback) => {\n    let effectReference = effect(callback);\n    if (!el._x_effects) {\n      el._x_effects = /* @__PURE__ */ new Set();\n      el._x_runEffects = () => {\n        el._x_effects.forEach((i) => i());\n      };\n    }\n    el._x_effects.add(effectReference);\n    cleanup2 = () => {\n      if (effectReference === void 0)\n        return;\n      el._x_effects.delete(effectReference);\n      release(effectReference);\n    };\n    return effectReference;\n  };\n  return [wrappedEffect, () => {\n    cleanup2();\n  }];\n}\n\n// packages/alpinejs/src/utils/dispatch.js\nfunction dispatch(el, name, detail = {}) {\n  el.dispatchEvent(\n    new CustomEvent(name, {\n      detail,\n      bubbles: true,\n      // Allows events to pass the shadow DOM barrier.\n      composed: true,\n      cancelable: true\n    })\n  );\n}\n\n// packages/alpinejs/src/utils/walk.js\nfunction walk(el, callback) {\n  if (typeof ShadowRoot === \"function\" && el instanceof ShadowRoot) {\n    Array.from(el.children).forEach((el2) => walk(el2, callback));\n    return;\n  }\n  let skip = false;\n  callback(el, () => skip = true);\n  if (skip)\n    return;\n  let node = el.firstElementChild;\n  while (node) {\n    walk(node, callback, false);\n    node = node.nextElementSibling;\n  }\n}\n\n// packages/alpinejs/src/utils/warn.js\nfunction warn(message, ...args) {\n  console.warn(`Alpine Warning: ${message}`, ...args);\n}\n\n// packages/alpinejs/src/lifecycle.js\nvar started = false;\nfunction start() {\n  if (started)\n    warn(\"Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems.\");\n  started = true;\n  if (!document.body)\n    warn(\"Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?\");\n  dispatch(document, \"alpine:init\");\n  dispatch(document, \"alpine:initializing\");\n  startObservingMutations();\n  onElAdded((el) => initTree(el, walk));\n  onElRemoved((el) => destroyTree(el));\n  onAttributesAdded((el, attrs) => {\n    directives(el, attrs).forEach((handle) => handle());\n  });\n  let outNestedComponents = (el) => !closestRoot(el.parentElement, true);\n  Array.from(document.querySelectorAll(allSelectors())).filter(outNestedComponents).forEach((el) => {\n    initTree(el);\n  });\n  dispatch(document, \"alpine:initialized\");\n}\nvar rootSelectorCallbacks = [];\nvar initSelectorCallbacks = [];\nfunction rootSelectors() {\n  return rootSelectorCallbacks.map((fn) => fn());\n}\nfunction allSelectors() {\n  return rootSelectorCallbacks.concat(initSelectorCallbacks).map((fn) => fn());\n}\nfunction addRootSelector(selectorCallback) {\n  rootSelectorCallbacks.push(selectorCallback);\n}\nfunction addInitSelector(selectorCallback) {\n  initSelectorCallbacks.push(selectorCallback);\n}\nfunction closestRoot(el, includeInitSelectors = false) {\n  return findClosest(el, (element) => {\n    const selectors = includeInitSelectors ? allSelectors() : rootSelectors();\n    if (selectors.some((selector) => element.matches(selector)))\n      return true;\n  });\n}\nfunction findClosest(el, callback) {\n  if (!el)\n    return;\n  if (callback(el))\n    return el;\n  if (el._x_teleportBack)\n    el = el._x_teleportBack;\n  if (!el.parentElement)\n    return;\n  return findClosest(el.parentElement, callback);\n}\nfunction isRoot(el) {\n  return rootSelectors().some((selector) => el.matches(selector));\n}\nvar initInterceptors = [];\nfunction interceptInit(callback) {\n  initInterceptors.push(callback);\n}\nfunction initTree(el, walker = walk, intercept = () => {\n}) {\n  deferHandlingDirectives(() => {\n    walker(el, (el2, skip) => {\n      intercept(el2, skip);\n      initInterceptors.forEach((i) => i(el2, skip));\n      directives(el2, el2.attributes).forEach((handle) => handle());\n      el2._x_ignore && skip();\n    });\n  });\n}\nfunction destroyTree(root) {\n  walk(root, (el) => {\n    cleanupAttributes(el);\n    cleanupElement(el);\n  });\n}\n\n// packages/alpinejs/src/mutation.js\nvar onAttributeAddeds = [];\nvar onElRemoveds = [];\nvar onElAddeds = [];\nfunction onElAdded(callback) {\n  onElAddeds.push(callback);\n}\nfunction onElRemoved(el, callback) {\n  if (typeof callback === \"function\") {\n    if (!el._x_cleanups)\n      el._x_cleanups = [];\n    el._x_cleanups.push(callback);\n  } else {\n    callback = el;\n    onElRemoveds.push(callback);\n  }\n}\nfunction onAttributesAdded(callback) {\n  onAttributeAddeds.push(callback);\n}\nfunction onAttributeRemoved(el, name, callback) {\n  if (!el._x_attributeCleanups)\n    el._x_attributeCleanups = {};\n  if (!el._x_attributeCleanups[name])\n    el._x_attributeCleanups[name] = [];\n  el._x_attributeCleanups[name].push(callback);\n}\nfunction cleanupAttributes(el, names) {\n  if (!el._x_attributeCleanups)\n    return;\n  Object.entries(el._x_attributeCleanups).forEach(([name, value]) => {\n    if (names === void 0 || names.includes(name)) {\n      value.forEach((i) => i());\n      delete el._x_attributeCleanups[name];\n    }\n  });\n}\nfunction cleanupElement(el) {\n  if (el._x_cleanups) {\n    while (el._x_cleanups.length)\n      el._x_cleanups.pop()();\n  }\n}\nvar observer = new MutationObserver(onMutate);\nvar currentlyObserving = false;\nfunction startObservingMutations() {\n  observer.observe(document, { subtree: true, childList: true, attributes: true, attributeOldValue: true });\n  currentlyObserving = true;\n}\nfunction stopObservingMutations() {\n  flushObserver();\n  observer.disconnect();\n  currentlyObserving = false;\n}\nvar recordQueue = [];\nvar willProcessRecordQueue = false;\nfunction flushObserver() {\n  recordQueue = recordQueue.concat(observer.takeRecords());\n  if (recordQueue.length && !willProcessRecordQueue) {\n    willProcessRecordQueue = true;\n    queueMicrotask(() => {\n      processRecordQueue();\n      willProcessRecordQueue = false;\n    });\n  }\n}\nfunction processRecordQueue() {\n  onMutate(recordQueue);\n  recordQueue.length = 0;\n}\nfunction mutateDom(callback) {\n  if (!currentlyObserving)\n    return callback();\n  stopObservingMutations();\n  let result = callback();\n  startObservingMutations();\n  return result;\n}\nvar isCollecting = false;\nvar deferredMutations = [];\nfunction deferMutations() {\n  isCollecting = true;\n}\nfunction flushAndStopDeferringMutations() {\n  isCollecting = false;\n  onMutate(deferredMutations);\n  deferredMutations = [];\n}\nfunction onMutate(mutations) {\n  if (isCollecting) {\n    deferredMutations = deferredMutations.concat(mutations);\n    return;\n  }\n  let addedNodes = [];\n  let removedNodes = [];\n  let addedAttributes = /* @__PURE__ */ new Map();\n  let removedAttributes = /* @__PURE__ */ new Map();\n  for (let i = 0; i < mutations.length; i++) {\n    if (mutations[i].target._x_ignoreMutationObserver)\n      continue;\n    if (mutations[i].type === \"childList\") {\n      mutations[i].addedNodes.forEach((node) => node.nodeType === 1 && addedNodes.push(node));\n      mutations[i].removedNodes.forEach((node) => node.nodeType === 1 && removedNodes.push(node));\n    }\n    if (mutations[i].type === \"attributes\") {\n      let el = mutations[i].target;\n      let name = mutations[i].attributeName;\n      let oldValue = mutations[i].oldValue;\n      let add2 = () => {\n        if (!addedAttributes.has(el))\n          addedAttributes.set(el, []);\n        addedAttributes.get(el).push({ name, value: el.getAttribute(name) });\n      };\n      let remove = () => {\n        if (!removedAttributes.has(el))\n          removedAttributes.set(el, []);\n        removedAttributes.get(el).push(name);\n      };\n      if (el.hasAttribute(name) && oldValue === null) {\n        add2();\n      } else if (el.hasAttribute(name)) {\n        remove();\n        add2();\n      } else {\n        remove();\n      }\n    }\n  }\n  removedAttributes.forEach((attrs, el) => {\n    cleanupAttributes(el, attrs);\n  });\n  addedAttributes.forEach((attrs, el) => {\n    onAttributeAddeds.forEach((i) => i(el, attrs));\n  });\n  for (let node of removedNodes) {\n    if (addedNodes.includes(node))\n      continue;\n    onElRemoveds.forEach((i) => i(node));\n    destroyTree(node);\n  }\n  addedNodes.forEach((node) => {\n    node._x_ignoreSelf = true;\n    node._x_ignore = true;\n  });\n  for (let node of addedNodes) {\n    if (removedNodes.includes(node))\n      continue;\n    if (!node.isConnected)\n      continue;\n    delete node._x_ignoreSelf;\n    delete node._x_ignore;\n    onElAddeds.forEach((i) => i(node));\n    node._x_ignore = true;\n    node._x_ignoreSelf = true;\n  }\n  addedNodes.forEach((node) => {\n    delete node._x_ignoreSelf;\n    delete node._x_ignore;\n  });\n  addedNodes = null;\n  removedNodes = null;\n  addedAttributes = null;\n  removedAttributes = null;\n}\n\n// packages/alpinejs/src/scope.js\nfunction scope(node) {\n  return mergeProxies(closestDataStack(node));\n}\nfunction addScopeToNode(node, data2, referenceNode) {\n  node._x_dataStack = [data2, ...closestDataStack(referenceNode || node)];\n  return () => {\n    node._x_dataStack = node._x_dataStack.filter((i) => i !== data2);\n  };\n}\nfunction closestDataStack(node) {\n  if (node._x_dataStack)\n    return node._x_dataStack;\n  if (typeof ShadowRoot === \"function\" && node instanceof ShadowRoot) {\n    return closestDataStack(node.host);\n  }\n  if (!node.parentNode) {\n    return [];\n  }\n  return closestDataStack(node.parentNode);\n}\nfunction mergeProxies(objects) {\n  let thisProxy = new Proxy({}, {\n    ownKeys: () => {\n      return Array.from(new Set(objects.flatMap((i) => Object.keys(i))));\n    },\n    has: (target, name) => {\n      return objects.some((obj) => obj.hasOwnProperty(name));\n    },\n    get: (target, name) => {\n      return (objects.find((obj) => {\n        if (obj.hasOwnProperty(name)) {\n          let descriptor = Object.getOwnPropertyDescriptor(obj, name);\n          if (descriptor.get && descriptor.get._x_alreadyBound || descriptor.set && descriptor.set._x_alreadyBound) {\n            return true;\n          }\n          if ((descriptor.get || descriptor.set) && descriptor.enumerable) {\n            let getter = descriptor.get;\n            let setter = descriptor.set;\n            let property = descriptor;\n            getter = getter && getter.bind(thisProxy);\n            setter = setter && setter.bind(thisProxy);\n            if (getter)\n              getter._x_alreadyBound = true;\n            if (setter)\n              setter._x_alreadyBound = true;\n            Object.defineProperty(obj, name, {\n              ...property,\n              get: getter,\n              set: setter\n            });\n          }\n          return true;\n        }\n        return false;\n      }) || {})[name];\n    },\n    set: (target, name, value) => {\n      let closestObjectWithKey = objects.find((obj) => obj.hasOwnProperty(name));\n      if (closestObjectWithKey) {\n        closestObjectWithKey[name] = value;\n      } else {\n        objects[objects.length - 1][name] = value;\n      }\n      return true;\n    }\n  });\n  return thisProxy;\n}\n\n// packages/alpinejs/src/interceptor.js\nfunction initInterceptors2(data2) {\n  let isObject2 = (val) => typeof val === \"object\" && !Array.isArray(val) && val !== null;\n  let recurse = (obj, basePath = \"\") => {\n    Object.entries(Object.getOwnPropertyDescriptors(obj)).forEach(([key, { value, enumerable }]) => {\n      if (enumerable === false || value === void 0)\n        return;\n      let path = basePath === \"\" ? key : `${basePath}.${key}`;\n      if (typeof value === \"object\" && value !== null && value._x_interceptor) {\n        obj[key] = value.initialize(data2, path, key);\n      } else {\n        if (isObject2(value) && value !== obj && !(value instanceof Element)) {\n          recurse(value, path);\n        }\n      }\n    });\n  };\n  return recurse(data2);\n}\nfunction interceptor(callback, mutateObj = () => {\n}) {\n  let obj = {\n    initialValue: void 0,\n    _x_interceptor: true,\n    initialize(data2, path, key) {\n      return callback(this.initialValue, () => get(data2, path), (value) => set(data2, path, value), path, key);\n    }\n  };\n  mutateObj(obj);\n  return (initialValue) => {\n    if (typeof initialValue === \"object\" && initialValue !== null && initialValue._x_interceptor) {\n      let initialize = obj.initialize.bind(obj);\n      obj.initialize = (data2, path, key) => {\n        let innerValue = initialValue.initialize(data2, path, key);\n        obj.initialValue = innerValue;\n        return initialize(data2, path, key);\n      };\n    } else {\n      obj.initialValue = initialValue;\n    }\n    return obj;\n  };\n}\nfunction get(obj, path) {\n  return path.split(\".\").reduce((carry, segment) => carry[segment], obj);\n}\nfunction set(obj, path, value) {\n  if (typeof path === \"string\")\n    path = path.split(\".\");\n  if (path.length === 1)\n    obj[path[0]] = value;\n  else if (path.length === 0)\n    throw error;\n  else {\n    if (obj[path[0]])\n      return set(obj[path[0]], path.slice(1), value);\n    else {\n      obj[path[0]] = {};\n      return set(obj[path[0]], path.slice(1), value);\n    }\n  }\n}\n\n// packages/alpinejs/src/magics.js\nvar magics = {};\nfunction magic(name, callback) {\n  magics[name] = callback;\n}\nfunction injectMagics(obj, el) {\n  Object.entries(magics).forEach(([name, callback]) => {\n    let memoizedUtilities = null;\n    function getUtilities() {\n      if (memoizedUtilities) {\n        return memoizedUtilities;\n      } else {\n        let [utilities, cleanup2] = getElementBoundUtilities(el);\n        memoizedUtilities = { interceptor, ...utilities };\n        onElRemoved(el, cleanup2);\n        return memoizedUtilities;\n      }\n    }\n    Object.defineProperty(obj, `$${name}`, {\n      get() {\n        return callback(el, getUtilities());\n      },\n      enumerable: false\n    });\n  });\n  return obj;\n}\n\n// packages/alpinejs/src/utils/error.js\nfunction tryCatch(el, expression, callback, ...args) {\n  try {\n    return callback(...args);\n  } catch (e) {\n    handleError(e, el, expression);\n  }\n}\nfunction handleError(error2, el, expression = void 0) {\n  Object.assign(error2, { el, expression });\n  console.warn(`Alpine Expression Error: ${error2.message}\n\n${expression ? 'Expression: \"' + expression + '\"\\n\\n' : \"\"}`, el);\n  setTimeout(() => {\n    throw error2;\n  }, 0);\n}\n\n// packages/alpinejs/src/evaluator.js\nvar shouldAutoEvaluateFunctions = true;\nfunction dontAutoEvaluateFunctions(callback) {\n  let cache = shouldAutoEvaluateFunctions;\n  shouldAutoEvaluateFunctions = false;\n  let result = callback();\n  shouldAutoEvaluateFunctions = cache;\n  return result;\n}\nfunction evaluate(el, expression, extras = {}) {\n  let result;\n  evaluateLater(el, expression)((value) => result = value, extras);\n  return result;\n}\nfunction evaluateLater(...args) {\n  return theEvaluatorFunction(...args);\n}\nvar theEvaluatorFunction = normalEvaluator;\nfunction setEvaluator(newEvaluator) {\n  theEvaluatorFunction = newEvaluator;\n}\nfunction normalEvaluator(el, expression) {\n  let overriddenMagics = {};\n  injectMagics(overriddenMagics, el);\n  let dataStack = [overriddenMagics, ...closestDataStack(el)];\n  let evaluator = typeof expression === \"function\" ? generateEvaluatorFromFunction(dataStack, expression) : generateEvaluatorFromString(dataStack, expression, el);\n  return tryCatch.bind(null, el, expression, evaluator);\n}\nfunction generateEvaluatorFromFunction(dataStack, func) {\n  return (receiver = () => {\n  }, { scope: scope2 = {}, params = [] } = {}) => {\n    let result = func.apply(mergeProxies([scope2, ...dataStack]), params);\n    runIfTypeOfFunction(receiver, result);\n  };\n}\nvar evaluatorMemo = {};\nfunction generateFunctionFromString(expression, el) {\n  if (evaluatorMemo[expression]) {\n    return evaluatorMemo[expression];\n  }\n  let AsyncFunction = Object.getPrototypeOf(async function() {\n  }).constructor;\n  let rightSideSafeExpression = /^[\\n\\s]*if.*\\(.*\\)/.test(expression.trim()) || /^(let|const)\\s/.test(expression.trim()) ? `(async()=>{ ${expression} })()` : expression;\n  const safeAsyncFunction = () => {\n    try {\n      return new AsyncFunction([\"__self\", \"scope\"], `with (scope) { __self.result = ${rightSideSafeExpression} }; __self.finished = true; return __self.result;`);\n    } catch (error2) {\n      handleError(error2, el, expression);\n      return Promise.resolve();\n    }\n  };\n  let func = safeAsyncFunction();\n  evaluatorMemo[expression] = func;\n  return func;\n}\nfunction generateEvaluatorFromString(dataStack, expression, el) {\n  let func = generateFunctionFromString(expression, el);\n  return (receiver = () => {\n  }, { scope: scope2 = {}, params = [] } = {}) => {\n    func.result = void 0;\n    func.finished = false;\n    let completeScope = mergeProxies([scope2, ...dataStack]);\n    if (typeof func === \"function\") {\n      let promise = func(func, completeScope).catch((error2) => handleError(error2, el, expression));\n      if (func.finished) {\n        runIfTypeOfFunction(receiver, func.result, completeScope, params, el);\n        func.result = void 0;\n      } else {\n        promise.then((result) => {\n          runIfTypeOfFunction(receiver, result, completeScope, params, el);\n        }).catch((error2) => handleError(error2, el, expression)).finally(() => func.result = void 0);\n      }\n    }\n  };\n}\nfunction runIfTypeOfFunction(receiver, value, scope2, params, el) {\n  if (shouldAutoEvaluateFunctions && typeof value === \"function\") {\n    let result = value.apply(scope2, params);\n    if (result instanceof Promise) {\n      result.then((i) => runIfTypeOfFunction(receiver, i, scope2, params)).catch((error2) => handleError(error2, el, value));\n    } else {\n      receiver(result);\n    }\n  } else if (typeof value === \"object\" && value instanceof Promise) {\n    value.then((i) => receiver(i));\n  } else {\n    receiver(value);\n  }\n}\n\n// packages/alpinejs/src/directives.js\nvar prefixAsString = \"x-\";\nfunction prefix(subject = \"\") {\n  return prefixAsString + subject;\n}\nfunction setPrefix(newPrefix) {\n  prefixAsString = newPrefix;\n}\nvar directiveHandlers = {};\nfunction directive(name, callback) {\n  directiveHandlers[name] = callback;\n  return {\n    before(directive2) {\n      if (!directiveHandlers[directive2]) {\n        console.warn(\n          \"Cannot find directive `${directive}`. `${name}` will use the default order of execution\"\n        );\n        return;\n      }\n      const pos = directiveOrder.indexOf(directive2);\n      directiveOrder.splice(pos >= 0 ? pos : directiveOrder.indexOf(\"DEFAULT\"), 0, name);\n    }\n  };\n}\nfunction directives(el, attributes, originalAttributeOverride) {\n  attributes = Array.from(attributes);\n  if (el._x_virtualDirectives) {\n    let vAttributes = Object.entries(el._x_virtualDirectives).map(([name, value]) => ({ name, value }));\n    let staticAttributes = attributesOnly(vAttributes);\n    vAttributes = vAttributes.map((attribute) => {\n      if (staticAttributes.find((attr) => attr.name === attribute.name)) {\n        return {\n          name: `x-bind:${attribute.name}`,\n          value: `\"${attribute.value}\"`\n        };\n      }\n      return attribute;\n    });\n    attributes = attributes.concat(vAttributes);\n  }\n  let transformedAttributeMap = {};\n  let directives2 = attributes.map(toTransformedAttributes((newName, oldName) => transformedAttributeMap[newName] = oldName)).filter(outNonAlpineAttributes).map(toParsedDirectives(transformedAttributeMap, originalAttributeOverride)).sort(byPriority);\n  return directives2.map((directive2) => {\n    return getDirectiveHandler(el, directive2);\n  });\n}\nfunction attributesOnly(attributes) {\n  return Array.from(attributes).map(toTransformedAttributes()).filter((attr) => !outNonAlpineAttributes(attr));\n}\nvar isDeferringHandlers = false;\nvar directiveHandlerStacks = /* @__PURE__ */ new Map();\nvar currentHandlerStackKey = Symbol();\nfunction deferHandlingDirectives(callback) {\n  isDeferringHandlers = true;\n  let key = Symbol();\n  currentHandlerStackKey = key;\n  directiveHandlerStacks.set(key, []);\n  let flushHandlers = () => {\n    while (directiveHandlerStacks.get(key).length)\n      directiveHandlerStacks.get(key).shift()();\n    directiveHandlerStacks.delete(key);\n  };\n  let stopDeferring = () => {\n    isDeferringHandlers = false;\n    flushHandlers();\n  };\n  callback(flushHandlers);\n  stopDeferring();\n}\nfunction getElementBoundUtilities(el) {\n  let cleanups = [];\n  let cleanup2 = (callback) => cleanups.push(callback);\n  let [effect3, cleanupEffect] = elementBoundEffect(el);\n  cleanups.push(cleanupEffect);\n  let utilities = {\n    Alpine: alpine_default,\n    effect: effect3,\n    cleanup: cleanup2,\n    evaluateLater: evaluateLater.bind(evaluateLater, el),\n    evaluate: evaluate.bind(evaluate, el)\n  };\n  let doCleanup = () => cleanups.forEach((i) => i());\n  return [utilities, doCleanup];\n}\nfunction getDirectiveHandler(el, directive2) {\n  let noop = () => {\n  };\n  let handler4 = directiveHandlers[directive2.type] || noop;\n  let [utilities, cleanup2] = getElementBoundUtilities(el);\n  onAttributeRemoved(el, directive2.original, cleanup2);\n  let fullHandler = () => {\n    if (el._x_ignore || el._x_ignoreSelf)\n      return;\n    handler4.inline && handler4.inline(el, directive2, utilities);\n    handler4 = handler4.bind(handler4, el, directive2, utilities);\n    isDeferringHandlers ? directiveHandlerStacks.get(currentHandlerStackKey).push(handler4) : handler4();\n  };\n  fullHandler.runCleanups = cleanup2;\n  return fullHandler;\n}\nvar startingWith = (subject, replacement) => ({ name, value }) => {\n  if (name.startsWith(subject))\n    name = name.replace(subject, replacement);\n  return { name, value };\n};\nvar into = (i) => i;\nfunction toTransformedAttributes(callback = () => {\n}) {\n  return ({ name, value }) => {\n    let { name: newName, value: newValue } = attributeTransformers.reduce((carry, transform) => {\n      return transform(carry);\n    }, { name, value });\n    if (newName !== name)\n      callback(newName, name);\n    return { name: newName, value: newValue };\n  };\n}\nvar attributeTransformers = [];\nfunction mapAttributes(callback) {\n  attributeTransformers.push(callback);\n}\nfunction outNonAlpineAttributes({ name }) {\n  return alpineAttributeRegex().test(name);\n}\nvar alpineAttributeRegex = () => new RegExp(`^${prefixAsString}([^:^.]+)\\\\b`);\nfunction toParsedDirectives(transformedAttributeMap, originalAttributeOverride) {\n  return ({ name, value }) => {\n    let typeMatch = name.match(alpineAttributeRegex());\n    let valueMatch = name.match(/:([a-zA-Z0-9\\-:]+)/);\n    let modifiers = name.match(/\\.[^.\\]]+(?=[^\\]]*$)/g) || [];\n    let original = originalAttributeOverride || transformedAttributeMap[name] || name;\n    return {\n      type: typeMatch ? typeMatch[1] : null,\n      value: valueMatch ? valueMatch[1] : null,\n      modifiers: modifiers.map((i) => i.replace(\".\", \"\")),\n      expression: value,\n      original\n    };\n  };\n}\nvar DEFAULT = \"DEFAULT\";\nvar directiveOrder = [\n  \"ignore\",\n  \"ref\",\n  \"data\",\n  \"id\",\n  \"bind\",\n  \"init\",\n  \"for\",\n  \"model\",\n  \"modelable\",\n  \"transition\",\n  \"show\",\n  \"if\",\n  DEFAULT,\n  \"teleport\"\n];\nfunction byPriority(a, b) {\n  let typeA = directiveOrder.indexOf(a.type) === -1 ? DEFAULT : a.type;\n  let typeB = directiveOrder.indexOf(b.type) === -1 ? DEFAULT : b.type;\n  return directiveOrder.indexOf(typeA) - directiveOrder.indexOf(typeB);\n}\n\n// packages/alpinejs/src/nextTick.js\nvar tickStack = [];\nvar isHolding = false;\nfunction nextTick(callback = () => {\n}) {\n  queueMicrotask(() => {\n    isHolding || setTimeout(() => {\n      releaseNextTicks();\n    });\n  });\n  return new Promise((res) => {\n    tickStack.push(() => {\n      callback();\n      res();\n    });\n  });\n}\nfunction releaseNextTicks() {\n  isHolding = false;\n  while (tickStack.length)\n    tickStack.shift()();\n}\nfunction holdNextTicks() {\n  isHolding = true;\n}\n\n// packages/alpinejs/src/utils/classes.js\nfunction setClasses(el, value) {\n  if (Array.isArray(value)) {\n    return setClassesFromString(el, value.join(\" \"));\n  } else if (typeof value === \"object\" && value !== null) {\n    return setClassesFromObject(el, value);\n  } else if (typeof value === \"function\") {\n    return setClasses(el, value());\n  }\n  return setClassesFromString(el, value);\n}\nfunction setClassesFromString(el, classString) {\n  let split = (classString2) => classString2.split(\" \").filter(Boolean);\n  let missingClasses = (classString2) => classString2.split(\" \").filter((i) => !el.classList.contains(i)).filter(Boolean);\n  let addClassesAndReturnUndo = (classes) => {\n    el.classList.add(...classes);\n    return () => {\n      el.classList.remove(...classes);\n    };\n  };\n  classString = classString === true ? classString = \"\" : classString || \"\";\n  return addClassesAndReturnUndo(missingClasses(classString));\n}\nfunction setClassesFromObject(el, classObject) {\n  let split = (classString) => classString.split(\" \").filter(Boolean);\n  let forAdd = Object.entries(classObject).flatMap(([classString, bool]) => bool ? split(classString) : false).filter(Boolean);\n  let forRemove = Object.entries(classObject).flatMap(([classString, bool]) => !bool ? split(classString) : false).filter(Boolean);\n  let added = [];\n  let removed = [];\n  forRemove.forEach((i) => {\n    if (el.classList.contains(i)) {\n      el.classList.remove(i);\n      removed.push(i);\n    }\n  });\n  forAdd.forEach((i) => {\n    if (!el.classList.contains(i)) {\n      el.classList.add(i);\n      added.push(i);\n    }\n  });\n  return () => {\n    removed.forEach((i) => el.classList.add(i));\n    added.forEach((i) => el.classList.remove(i));\n  };\n}\n\n// packages/alpinejs/src/utils/styles.js\nfunction setStyles(el, value) {\n  if (typeof value === \"object\" && value !== null) {\n    return setStylesFromObject(el, value);\n  }\n  return setStylesFromString(el, value);\n}\nfunction setStylesFromObject(el, value) {\n  let previousStyles = {};\n  Object.entries(value).forEach(([key, value2]) => {\n    previousStyles[key] = el.style[key];\n    if (!key.startsWith(\"--\")) {\n      key = kebabCase(key);\n    }\n    el.style.setProperty(key, value2);\n  });\n  setTimeout(() => {\n    if (el.style.length === 0) {\n      el.removeAttribute(\"style\");\n    }\n  });\n  return () => {\n    setStyles(el, previousStyles);\n  };\n}\nfunction setStylesFromString(el, value) {\n  let cache = el.getAttribute(\"style\", value);\n  el.setAttribute(\"style\", value);\n  return () => {\n    el.setAttribute(\"style\", cache || \"\");\n  };\n}\nfunction kebabCase(subject) {\n  return subject.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n\n// packages/alpinejs/src/utils/once.js\nfunction once(callback, fallback = () => {\n}) {\n  let called = false;\n  return function() {\n    if (!called) {\n      called = true;\n      callback.apply(this, arguments);\n    } else {\n      fallback.apply(this, arguments);\n    }\n  };\n}\n\n// packages/alpinejs/src/directives/x-transition.js\ndirective(\"transition\", (el, { value, modifiers, expression }, { evaluate: evaluate2 }) => {\n  if (typeof expression === \"function\")\n    expression = evaluate2(expression);\n  if (expression === false)\n    return;\n  if (!expression || typeof expression === \"boolean\") {\n    registerTransitionsFromHelper(el, modifiers, value);\n  } else {\n    registerTransitionsFromClassString(el, expression, value);\n  }\n});\nfunction registerTransitionsFromClassString(el, classString, stage) {\n  registerTransitionObject(el, setClasses, \"\");\n  let directiveStorageMap = {\n    \"enter\": (classes) => {\n      el._x_transition.enter.during = classes;\n    },\n    \"enter-start\": (classes) => {\n      el._x_transition.enter.start = classes;\n    },\n    \"enter-end\": (classes) => {\n      el._x_transition.enter.end = classes;\n    },\n    \"leave\": (classes) => {\n      el._x_transition.leave.during = classes;\n    },\n    \"leave-start\": (classes) => {\n      el._x_transition.leave.start = classes;\n    },\n    \"leave-end\": (classes) => {\n      el._x_transition.leave.end = classes;\n    }\n  };\n  directiveStorageMap[stage](classString);\n}\nfunction registerTransitionsFromHelper(el, modifiers, stage) {\n  registerTransitionObject(el, setStyles);\n  let doesntSpecify = !modifiers.includes(\"in\") && !modifiers.includes(\"out\") && !stage;\n  let transitioningIn = doesntSpecify || modifiers.includes(\"in\") || [\"enter\"].includes(stage);\n  let transitioningOut = doesntSpecify || modifiers.includes(\"out\") || [\"leave\"].includes(stage);\n  if (modifiers.includes(\"in\") && !doesntSpecify) {\n    modifiers = modifiers.filter((i, index) => index < modifiers.indexOf(\"out\"));\n  }\n  if (modifiers.includes(\"out\") && !doesntSpecify) {\n    modifiers = modifiers.filter((i, index) => index > modifiers.indexOf(\"out\"));\n  }\n  let wantsAll = !modifiers.includes(\"opacity\") && !modifiers.includes(\"scale\");\n  let wantsOpacity = wantsAll || modifiers.includes(\"opacity\");\n  let wantsScale = wantsAll || modifiers.includes(\"scale\");\n  let opacityValue = wantsOpacity ? 0 : 1;\n  let scaleValue = wantsScale ? modifierValue(modifiers, \"scale\", 95) / 100 : 1;\n  let delay = modifierValue(modifiers, \"delay\", 0) / 1e3;\n  let origin = modifierValue(modifiers, \"origin\", \"center\");\n  let property = \"opacity, transform\";\n  let durationIn = modifierValue(modifiers, \"duration\", 150) / 1e3;\n  let durationOut = modifierValue(modifiers, \"duration\", 75) / 1e3;\n  let easing = `cubic-bezier(0.4, 0.0, 0.2, 1)`;\n  if (transitioningIn) {\n    el._x_transition.enter.during = {\n      transformOrigin: origin,\n      transitionDelay: `${delay}s`,\n      transitionProperty: property,\n      transitionDuration: `${durationIn}s`,\n      transitionTimingFunction: easing\n    };\n    el._x_transition.enter.start = {\n      opacity: opacityValue,\n      transform: `scale(${scaleValue})`\n    };\n    el._x_transition.enter.end = {\n      opacity: 1,\n      transform: `scale(1)`\n    };\n  }\n  if (transitioningOut) {\n    el._x_transition.leave.during = {\n      transformOrigin: origin,\n      transitionDelay: `${delay}s`,\n      transitionProperty: property,\n      transitionDuration: `${durationOut}s`,\n      transitionTimingFunction: easing\n    };\n    el._x_transition.leave.start = {\n      opacity: 1,\n      transform: `scale(1)`\n    };\n    el._x_transition.leave.end = {\n      opacity: opacityValue,\n      transform: `scale(${scaleValue})`\n    };\n  }\n}\nfunction registerTransitionObject(el, setFunction, defaultValue = {}) {\n  if (!el._x_transition)\n    el._x_transition = {\n      enter: { during: defaultValue, start: defaultValue, end: defaultValue },\n      leave: { during: defaultValue, start: defaultValue, end: defaultValue },\n      in(before = () => {\n      }, after = () => {\n      }) {\n        transition(el, setFunction, {\n          during: this.enter.during,\n          start: this.enter.start,\n          end: this.enter.end\n        }, before, after);\n      },\n      out(before = () => {\n      }, after = () => {\n      }) {\n        transition(el, setFunction, {\n          during: this.leave.during,\n          start: this.leave.start,\n          end: this.leave.end\n        }, before, after);\n      }\n    };\n}\nwindow.Element.prototype._x_toggleAndCascadeWithTransitions = function(el, value, show, hide) {\n  const nextTick2 = document.visibilityState === \"visible\" ? requestAnimationFrame : setTimeout;\n  let clickAwayCompatibleShow = () => nextTick2(show);\n  if (value) {\n    if (el._x_transition && (el._x_transition.enter || el._x_transition.leave)) {\n      el._x_transition.enter && (Object.entries(el._x_transition.enter.during).length || Object.entries(el._x_transition.enter.start).length || Object.entries(el._x_transition.enter.end).length) ? el._x_transition.in(show) : clickAwayCompatibleShow();\n    } else {\n      el._x_transition ? el._x_transition.in(show) : clickAwayCompatibleShow();\n    }\n    return;\n  }\n  el._x_hidePromise = el._x_transition ? new Promise((resolve, reject) => {\n    el._x_transition.out(() => {\n    }, () => resolve(hide));\n    el._x_transitioning.beforeCancel(() => reject({ isFromCancelledTransition: true }));\n  }) : Promise.resolve(hide);\n  queueMicrotask(() => {\n    let closest = closestHide(el);\n    if (closest) {\n      if (!closest._x_hideChildren)\n        closest._x_hideChildren = [];\n      closest._x_hideChildren.push(el);\n    } else {\n      nextTick2(() => {\n        let hideAfterChildren = (el2) => {\n          let carry = Promise.all([\n            el2._x_hidePromise,\n            ...(el2._x_hideChildren || []).map(hideAfterChildren)\n          ]).then(([i]) => i());\n          delete el2._x_hidePromise;\n          delete el2._x_hideChildren;\n          return carry;\n        };\n        hideAfterChildren(el).catch((e) => {\n          if (!e.isFromCancelledTransition)\n            throw e;\n        });\n      });\n    }\n  });\n};\nfunction closestHide(el) {\n  let parent = el.parentNode;\n  if (!parent)\n    return;\n  return parent._x_hidePromise ? parent : closestHide(parent);\n}\nfunction transition(el, setFunction, { during, start: start2, end } = {}, before = () => {\n}, after = () => {\n}) {\n  if (el._x_transitioning)\n    el._x_transitioning.cancel();\n  if (Object.keys(during).length === 0 && Object.keys(start2).length === 0 && Object.keys(end).length === 0) {\n    before();\n    after();\n    return;\n  }\n  let undoStart, undoDuring, undoEnd;\n  performTransition(el, {\n    start() {\n      undoStart = setFunction(el, start2);\n    },\n    during() {\n      undoDuring = setFunction(el, during);\n    },\n    before,\n    end() {\n      undoStart();\n      undoEnd = setFunction(el, end);\n    },\n    after,\n    cleanup() {\n      undoDuring();\n      undoEnd();\n    }\n  });\n}\nfunction performTransition(el, stages) {\n  let interrupted, reachedBefore, reachedEnd;\n  let finish = once(() => {\n    mutateDom(() => {\n      interrupted = true;\n      if (!reachedBefore)\n        stages.before();\n      if (!reachedEnd) {\n        stages.end();\n        releaseNextTicks();\n      }\n      stages.after();\n      if (el.isConnected)\n        stages.cleanup();\n      delete el._x_transitioning;\n    });\n  });\n  el._x_transitioning = {\n    beforeCancels: [],\n    beforeCancel(callback) {\n      this.beforeCancels.push(callback);\n    },\n    cancel: once(function() {\n      while (this.beforeCancels.length) {\n        this.beforeCancels.shift()();\n      }\n      ;\n      finish();\n    }),\n    finish\n  };\n  mutateDom(() => {\n    stages.start();\n    stages.during();\n  });\n  holdNextTicks();\n  requestAnimationFrame(() => {\n    if (interrupted)\n      return;\n    let duration = Number(getComputedStyle(el).transitionDuration.replace(/,.*/, \"\").replace(\"s\", \"\")) * 1e3;\n    let delay = Number(getComputedStyle(el).transitionDelay.replace(/,.*/, \"\").replace(\"s\", \"\")) * 1e3;\n    if (duration === 0)\n      duration = Number(getComputedStyle(el).animationDuration.replace(\"s\", \"\")) * 1e3;\n    mutateDom(() => {\n      stages.before();\n    });\n    reachedBefore = true;\n    requestAnimationFrame(() => {\n      if (interrupted)\n        return;\n      mutateDom(() => {\n        stages.end();\n      });\n      releaseNextTicks();\n      setTimeout(el._x_transitioning.finish, duration + delay);\n      reachedEnd = true;\n    });\n  });\n}\nfunction modifierValue(modifiers, key, fallback) {\n  if (modifiers.indexOf(key) === -1)\n    return fallback;\n  const rawValue = modifiers[modifiers.indexOf(key) + 1];\n  if (!rawValue)\n    return fallback;\n  if (key === \"scale\") {\n    if (isNaN(rawValue))\n      return fallback;\n  }\n  if (key === \"duration\" || key === \"delay\") {\n    let match = rawValue.match(/([0-9]+)ms/);\n    if (match)\n      return match[1];\n  }\n  if (key === \"origin\") {\n    if ([\"top\", \"right\", \"left\", \"center\", \"bottom\"].includes(modifiers[modifiers.indexOf(key) + 2])) {\n      return [rawValue, modifiers[modifiers.indexOf(key) + 2]].join(\" \");\n    }\n  }\n  return rawValue;\n}\n\n// packages/alpinejs/src/clone.js\nvar isCloning = false;\nfunction skipDuringClone(callback, fallback = () => {\n}) {\n  return (...args) => isCloning ? fallback(...args) : callback(...args);\n}\nfunction onlyDuringClone(callback) {\n  return (...args) => isCloning && callback(...args);\n}\nfunction cloneNode(from, to) {\n  if (from._x_dataStack) {\n    to._x_dataStack = from._x_dataStack;\n    to.setAttribute(\"data-has-alpine-state\", true);\n  }\n  isCloning = true;\n  dontRegisterReactiveSideEffects(() => {\n    initTree(to, (el, callback) => {\n      callback(el, () => {\n      });\n    });\n  });\n  isCloning = false;\n}\nvar isCloningLegacy = false;\nfunction clone(oldEl, newEl) {\n  if (!newEl._x_dataStack)\n    newEl._x_dataStack = oldEl._x_dataStack;\n  isCloning = true;\n  isCloningLegacy = true;\n  dontRegisterReactiveSideEffects(() => {\n    cloneTree(newEl);\n  });\n  isCloning = false;\n  isCloningLegacy = false;\n}\nfunction cloneTree(el) {\n  let hasRunThroughFirstEl = false;\n  let shallowWalker = (el2, callback) => {\n    walk(el2, (el3, skip) => {\n      if (hasRunThroughFirstEl && isRoot(el3))\n        return skip();\n      hasRunThroughFirstEl = true;\n      callback(el3, skip);\n    });\n  };\n  initTree(el, shallowWalker);\n}\nfunction dontRegisterReactiveSideEffects(callback) {\n  let cache = effect;\n  overrideEffect((callback2, el) => {\n    let storedEffect = cache(callback2);\n    release(storedEffect);\n    return () => {\n    };\n  });\n  callback();\n  overrideEffect(cache);\n}\nfunction shouldSkipRegisteringDataDuringClone(el) {\n  if (!isCloning)\n    return false;\n  if (isCloningLegacy)\n    return true;\n  return el.hasAttribute(\"data-has-alpine-state\");\n}\n\n// packages/alpinejs/src/utils/bind.js\nfunction bind(el, name, value, modifiers = []) {\n  if (!el._x_bindings)\n    el._x_bindings = reactive({});\n  el._x_bindings[name] = value;\n  name = modifiers.includes(\"camel\") ? camelCase(name) : name;\n  switch (name) {\n    case \"value\":\n      bindInputValue(el, value);\n      break;\n    case \"style\":\n      bindStyles(el, value);\n      break;\n    case \"class\":\n      bindClasses(el, value);\n      break;\n    case \"selected\":\n    case \"checked\":\n      bindAttributeAndProperty(el, name, value);\n      break;\n    default:\n      bindAttribute(el, name, value);\n      break;\n  }\n}\nfunction bindInputValue(el, value) {\n  if (el.type === \"radio\") {\n    if (el.attributes.value === void 0) {\n      el.value = value;\n    }\n    if (window.fromModel) {\n      el.checked = checkedAttrLooseCompare(el.value, value);\n    }\n  } else if (el.type === \"checkbox\") {\n    if (Number.isInteger(value)) {\n      el.value = value;\n    } else if (!Array.isArray(value) && typeof value !== \"boolean\" && ![null, void 0].includes(value)) {\n      el.value = String(value);\n    } else {\n      if (Array.isArray(value)) {\n        el.checked = value.some((val) => checkedAttrLooseCompare(val, el.value));\n      } else {\n        el.checked = !!value;\n      }\n    }\n  } else if (el.tagName === \"SELECT\") {\n    updateSelect(el, value);\n  } else {\n    if (el.value === value)\n      return;\n    el.value = value === void 0 ? \"\" : value;\n  }\n}\nfunction bindClasses(el, value) {\n  if (el._x_undoAddedClasses)\n    el._x_undoAddedClasses();\n  el._x_undoAddedClasses = setClasses(el, value);\n}\nfunction bindStyles(el, value) {\n  if (el._x_undoAddedStyles)\n    el._x_undoAddedStyles();\n  el._x_undoAddedStyles = setStyles(el, value);\n}\nfunction bindAttributeAndProperty(el, name, value) {\n  bindAttribute(el, name, value);\n  setPropertyIfChanged(el, name, value);\n}\nfunction bindAttribute(el, name, value) {\n  if ([null, void 0, false].includes(value) && attributeShouldntBePreservedIfFalsy(name)) {\n    el.removeAttribute(name);\n  } else {\n    if (isBooleanAttr(name))\n      value = name;\n    setIfChanged(el, name, value);\n  }\n}\nfunction setIfChanged(el, attrName, value) {\n  if (el.getAttribute(attrName) != value) {\n    el.setAttribute(attrName, value);\n  }\n}\nfunction setPropertyIfChanged(el, propName, value) {\n  if (el[propName] !== value) {\n    el[propName] = value;\n  }\n}\nfunction updateSelect(el, value) {\n  const arrayWrappedValue = [].concat(value).map((value2) => {\n    return value2 + \"\";\n  });\n  Array.from(el.options).forEach((option) => {\n    option.selected = arrayWrappedValue.includes(option.value);\n  });\n}\nfunction camelCase(subject) {\n  return subject.toLowerCase().replace(/-(\\w)/g, (match, char) => char.toUpperCase());\n}\nfunction checkedAttrLooseCompare(valueA, valueB) {\n  return valueA == valueB;\n}\nfunction isBooleanAttr(attrName) {\n  const booleanAttributes = [\n    \"disabled\",\n    \"checked\",\n    \"required\",\n    \"readonly\",\n    \"hidden\",\n    \"open\",\n    \"selected\",\n    \"autofocus\",\n    \"itemscope\",\n    \"multiple\",\n    \"novalidate\",\n    \"allowfullscreen\",\n    \"allowpaymentrequest\",\n    \"formnovalidate\",\n    \"autoplay\",\n    \"controls\",\n    \"loop\",\n    \"muted\",\n    \"playsinline\",\n    \"default\",\n    \"ismap\",\n    \"reversed\",\n    \"async\",\n    \"defer\",\n    \"nomodule\"\n  ];\n  return booleanAttributes.includes(attrName);\n}\nfunction attributeShouldntBePreservedIfFalsy(name) {\n  return ![\"aria-pressed\", \"aria-checked\", \"aria-expanded\", \"aria-selected\"].includes(name);\n}\nfunction getBinding(el, name, fallback) {\n  if (el._x_bindings && el._x_bindings[name] !== void 0)\n    return el._x_bindings[name];\n  return getAttributeBinding(el, name, fallback);\n}\nfunction extractProp(el, name, fallback, extract = true) {\n  if (el._x_bindings && el._x_bindings[name] !== void 0)\n    return el._x_bindings[name];\n  if (el._x_inlineBindings && el._x_inlineBindings[name] !== void 0) {\n    let binding = el._x_inlineBindings[name];\n    binding.extract = extract;\n    return dontAutoEvaluateFunctions(() => {\n      return evaluate(el, binding.expression);\n    });\n  }\n  return getAttributeBinding(el, name, fallback);\n}\nfunction getAttributeBinding(el, name, fallback) {\n  let attr = el.getAttribute(name);\n  if (attr === null)\n    return typeof fallback === \"function\" ? fallback() : fallback;\n  if (attr === \"\")\n    return true;\n  if (isBooleanAttr(name)) {\n    return !![name, \"true\"].includes(attr);\n  }\n  return attr;\n}\n\n// packages/alpinejs/src/utils/debounce.js\nfunction debounce(func, wait) {\n  var timeout;\n  return function() {\n    var context = this, args = arguments;\n    var later = function() {\n      timeout = null;\n      func.apply(context, args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\n// packages/alpinejs/src/utils/throttle.js\nfunction throttle(func, limit) {\n  let inThrottle;\n  return function() {\n    let context = this, args = arguments;\n    if (!inThrottle) {\n      func.apply(context, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\n// packages/alpinejs/src/entangle.js\nfunction entangle({ get: outerGet, set: outerSet }, { get: innerGet, set: innerSet }) {\n  let firstRun = true;\n  let outerHash, innerHash, outerHashLatest, innerHashLatest;\n  let reference = effect(() => {\n    let outer, inner;\n    if (firstRun) {\n      outer = outerGet();\n      innerSet(JSON.parse(JSON.stringify(outer)));\n      inner = innerGet();\n      firstRun = false;\n    } else {\n      outer = outerGet();\n      inner = innerGet();\n      outerHashLatest = JSON.stringify(outer);\n      innerHashLatest = JSON.stringify(inner);\n      if (outerHashLatest !== outerHash) {\n        inner = innerGet();\n        innerSet(outer);\n        inner = outer;\n      } else {\n        outerSet(JSON.parse(innerHashLatest ?? null));\n        outer = inner;\n      }\n    }\n    outerHash = JSON.stringify(outer);\n    innerHash = JSON.stringify(inner);\n  });\n  return () => {\n    release(reference);\n  };\n}\n\n// packages/alpinejs/src/plugin.js\nfunction plugin(callback) {\n  let callbacks = Array.isArray(callback) ? callback : [callback];\n  callbacks.forEach((i) => i(alpine_default));\n}\n\n// packages/alpinejs/src/store.js\nvar stores = {};\nvar isReactive = false;\nfunction store(name, value) {\n  if (!isReactive) {\n    stores = reactive(stores);\n    isReactive = true;\n  }\n  if (value === void 0) {\n    return stores[name];\n  }\n  stores[name] = value;\n  if (typeof value === \"object\" && value !== null && value.hasOwnProperty(\"init\") && typeof value.init === \"function\") {\n    stores[name].init();\n  }\n  initInterceptors2(stores[name]);\n}\nfunction getStores() {\n  return stores;\n}\n\n// packages/alpinejs/src/binds.js\nvar binds = {};\nfunction bind2(name, bindings) {\n  let getBindings = typeof bindings !== \"function\" ? () => bindings : bindings;\n  if (name instanceof Element) {\n    return applyBindingsObject(name, getBindings());\n  } else {\n    binds[name] = getBindings;\n  }\n  return () => {\n  };\n}\nfunction injectBindingProviders(obj) {\n  Object.entries(binds).forEach(([name, callback]) => {\n    Object.defineProperty(obj, name, {\n      get() {\n        return (...args) => {\n          return callback(...args);\n        };\n      }\n    });\n  });\n  return obj;\n}\nfunction applyBindingsObject(el, obj, original) {\n  let cleanupRunners = [];\n  while (cleanupRunners.length)\n    cleanupRunners.pop()();\n  let attributes = Object.entries(obj).map(([name, value]) => ({ name, value }));\n  let staticAttributes = attributesOnly(attributes);\n  attributes = attributes.map((attribute) => {\n    if (staticAttributes.find((attr) => attr.name === attribute.name)) {\n      return {\n        name: `x-bind:${attribute.name}`,\n        value: `\"${attribute.value}\"`\n      };\n    }\n    return attribute;\n  });\n  directives(el, attributes, original).map((handle) => {\n    cleanupRunners.push(handle.runCleanups);\n    handle();\n  });\n  return () => {\n    while (cleanupRunners.length)\n      cleanupRunners.pop()();\n  };\n}\n\n// packages/alpinejs/src/datas.js\nvar datas = {};\nfunction data(name, callback) {\n  datas[name] = callback;\n}\nfunction injectDataProviders(obj, context) {\n  Object.entries(datas).forEach(([name, callback]) => {\n    Object.defineProperty(obj, name, {\n      get() {\n        return (...args) => {\n          return callback.bind(context)(...args);\n        };\n      },\n      enumerable: false\n    });\n  });\n  return obj;\n}\n\n// packages/alpinejs/src/alpine.js\nvar Alpine = {\n  get reactive() {\n    return reactive;\n  },\n  get release() {\n    return release;\n  },\n  get effect() {\n    return effect;\n  },\n  get raw() {\n    return raw;\n  },\n  version: \"3.13.0\",\n  flushAndStopDeferringMutations,\n  dontAutoEvaluateFunctions,\n  disableEffectScheduling,\n  startObservingMutations,\n  stopObservingMutations,\n  setReactivityEngine,\n  onAttributeRemoved,\n  onAttributesAdded,\n  closestDataStack,\n  skipDuringClone,\n  onlyDuringClone,\n  addRootSelector,\n  addInitSelector,\n  addScopeToNode,\n  deferMutations,\n  mapAttributes,\n  evaluateLater,\n  interceptInit,\n  setEvaluator,\n  mergeProxies,\n  extractProp,\n  findClosest,\n  onElRemoved,\n  closestRoot,\n  destroyTree,\n  interceptor,\n  // INTERNAL: not public API and is subject to change without major release.\n  transition,\n  // INTERNAL\n  setStyles,\n  // INTERNAL\n  mutateDom,\n  directive,\n  entangle,\n  throttle,\n  debounce,\n  evaluate,\n  initTree,\n  nextTick,\n  prefixed: prefix,\n  prefix: setPrefix,\n  plugin,\n  magic,\n  store,\n  start,\n  clone,\n  // INTERNAL\n  cloneNode,\n  // INTERNAL\n  bound: getBinding,\n  $data: scope,\n  walk,\n  data,\n  bind: bind2\n};\nvar alpine_default = Alpine;\n\n// node_modules/@vue/shared/dist/shared.esm-bundler.js\nfunction makeMap(str, expectsLowerCase) {\n  const map = /* @__PURE__ */ Object.create(null);\n  const list = str.split(\",\");\n  for (let i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase ? (val) => !!map[val.toLowerCase()] : (val) => !!map[val];\n}\nvar specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;\nvar isBooleanAttr2 = /* @__PURE__ */ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);\nvar EMPTY_OBJ =  true ? Object.freeze({}) : 0;\nvar EMPTY_ARR =  true ? Object.freeze([]) : 0;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar hasOwn = (val, key) => hasOwnProperty.call(val, key);\nvar isArray = Array.isArray;\nvar isMap = (val) => toTypeString(val) === \"[object Map]\";\nvar isString = (val) => typeof val === \"string\";\nvar isSymbol = (val) => typeof val === \"symbol\";\nvar isObject = (val) => val !== null && typeof val === \"object\";\nvar objectToString = Object.prototype.toString;\nvar toTypeString = (value) => objectToString.call(value);\nvar toRawType = (value) => {\n  return toTypeString(value).slice(8, -1);\n};\nvar isIntegerKey = (key) => isString(key) && key !== \"NaN\" && key[0] !== \"-\" && \"\" + parseInt(key, 10) === key;\nvar cacheStringFunction = (fn) => {\n  const cache = /* @__PURE__ */ Object.create(null);\n  return (str) => {\n    const hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n};\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cacheStringFunction((str) => {\n  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : \"\");\n});\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, \"-$1\").toLowerCase());\nvar capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));\nvar toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);\nvar hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);\n\n// node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\nvar targetMap = /* @__PURE__ */ new WeakMap();\nvar effectStack = [];\nvar activeEffect;\nvar ITERATE_KEY = Symbol( true ? \"iterate\" : 0);\nvar MAP_KEY_ITERATE_KEY = Symbol( true ? \"Map key iterate\" : 0);\nfunction isEffect(fn) {\n  return fn && fn._isEffect === true;\n}\nfunction effect2(fn, options = EMPTY_OBJ) {\n  if (isEffect(fn)) {\n    fn = fn.raw;\n  }\n  const effect3 = createReactiveEffect(fn, options);\n  if (!options.lazy) {\n    effect3();\n  }\n  return effect3;\n}\nfunction stop(effect3) {\n  if (effect3.active) {\n    cleanup(effect3);\n    if (effect3.options.onStop) {\n      effect3.options.onStop();\n    }\n    effect3.active = false;\n  }\n}\nvar uid = 0;\nfunction createReactiveEffect(fn, options) {\n  const effect3 = function reactiveEffect() {\n    if (!effect3.active) {\n      return fn();\n    }\n    if (!effectStack.includes(effect3)) {\n      cleanup(effect3);\n      try {\n        enableTracking();\n        effectStack.push(effect3);\n        activeEffect = effect3;\n        return fn();\n      } finally {\n        effectStack.pop();\n        resetTracking();\n        activeEffect = effectStack[effectStack.length - 1];\n      }\n    }\n  };\n  effect3.id = uid++;\n  effect3.allowRecurse = !!options.allowRecurse;\n  effect3._isEffect = true;\n  effect3.active = true;\n  effect3.raw = fn;\n  effect3.deps = [];\n  effect3.options = options;\n  return effect3;\n}\nfunction cleanup(effect3) {\n  const { deps } = effect3;\n  if (deps.length) {\n    for (let i = 0; i < deps.length; i++) {\n      deps[i].delete(effect3);\n    }\n    deps.length = 0;\n  }\n}\nvar shouldTrack = true;\nvar trackStack = [];\nfunction pauseTracking() {\n  trackStack.push(shouldTrack);\n  shouldTrack = false;\n}\nfunction enableTracking() {\n  trackStack.push(shouldTrack);\n  shouldTrack = true;\n}\nfunction resetTracking() {\n  const last = trackStack.pop();\n  shouldTrack = last === void 0 ? true : last;\n}\nfunction track(target, type, key) {\n  if (!shouldTrack || activeEffect === void 0) {\n    return;\n  }\n  let depsMap = targetMap.get(target);\n  if (!depsMap) {\n    targetMap.set(target, depsMap = /* @__PURE__ */ new Map());\n  }\n  let dep = depsMap.get(key);\n  if (!dep) {\n    depsMap.set(key, dep = /* @__PURE__ */ new Set());\n  }\n  if (!dep.has(activeEffect)) {\n    dep.add(activeEffect);\n    activeEffect.deps.push(dep);\n    if (activeEffect.options.onTrack) {\n      activeEffect.options.onTrack({\n        effect: activeEffect,\n        target,\n        type,\n        key\n      });\n    }\n  }\n}\nfunction trigger(target, type, key, newValue, oldValue, oldTarget) {\n  const depsMap = targetMap.get(target);\n  if (!depsMap) {\n    return;\n  }\n  const effects = /* @__PURE__ */ new Set();\n  const add2 = (effectsToAdd) => {\n    if (effectsToAdd) {\n      effectsToAdd.forEach((effect3) => {\n        if (effect3 !== activeEffect || effect3.allowRecurse) {\n          effects.add(effect3);\n        }\n      });\n    }\n  };\n  if (type === \"clear\") {\n    depsMap.forEach(add2);\n  } else if (key === \"length\" && isArray(target)) {\n    depsMap.forEach((dep, key2) => {\n      if (key2 === \"length\" || key2 >= newValue) {\n        add2(dep);\n      }\n    });\n  } else {\n    if (key !== void 0) {\n      add2(depsMap.get(key));\n    }\n    switch (type) {\n      case \"add\":\n        if (!isArray(target)) {\n          add2(depsMap.get(ITERATE_KEY));\n          if (isMap(target)) {\n            add2(depsMap.get(MAP_KEY_ITERATE_KEY));\n          }\n        } else if (isIntegerKey(key)) {\n          add2(depsMap.get(\"length\"));\n        }\n        break;\n      case \"delete\":\n        if (!isArray(target)) {\n          add2(depsMap.get(ITERATE_KEY));\n          if (isMap(target)) {\n            add2(depsMap.get(MAP_KEY_ITERATE_KEY));\n          }\n        }\n        break;\n      case \"set\":\n        if (isMap(target)) {\n          add2(depsMap.get(ITERATE_KEY));\n        }\n        break;\n    }\n  }\n  const run = (effect3) => {\n    if (effect3.options.onTrigger) {\n      effect3.options.onTrigger({\n        effect: effect3,\n        target,\n        key,\n        type,\n        newValue,\n        oldValue,\n        oldTarget\n      });\n    }\n    if (effect3.options.scheduler) {\n      effect3.options.scheduler(effect3);\n    } else {\n      effect3();\n    }\n  };\n  effects.forEach(run);\n}\nvar isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);\nvar builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(isSymbol));\nvar get2 = /* @__PURE__ */ createGetter();\nvar readonlyGet = /* @__PURE__ */ createGetter(true);\nvar arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();\nfunction createArrayInstrumentations() {\n  const instrumentations = {};\n  [\"includes\", \"indexOf\", \"lastIndexOf\"].forEach((key) => {\n    instrumentations[key] = function(...args) {\n      const arr = toRaw(this);\n      for (let i = 0, l = this.length; i < l; i++) {\n        track(arr, \"get\", i + \"\");\n      }\n      const res = arr[key](...args);\n      if (res === -1 || res === false) {\n        return arr[key](...args.map(toRaw));\n      } else {\n        return res;\n      }\n    };\n  });\n  [\"push\", \"pop\", \"shift\", \"unshift\", \"splice\"].forEach((key) => {\n    instrumentations[key] = function(...args) {\n      pauseTracking();\n      const res = toRaw(this)[key].apply(this, args);\n      resetTracking();\n      return res;\n    };\n  });\n  return instrumentations;\n}\nfunction createGetter(isReadonly = false, shallow = false) {\n  return function get3(target, key, receiver) {\n    if (key === \"__v_isReactive\") {\n      return !isReadonly;\n    } else if (key === \"__v_isReadonly\") {\n      return isReadonly;\n    } else if (key === \"__v_raw\" && receiver === (isReadonly ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {\n      return target;\n    }\n    const targetIsArray = isArray(target);\n    if (!isReadonly && targetIsArray && hasOwn(arrayInstrumentations, key)) {\n      return Reflect.get(arrayInstrumentations, key, receiver);\n    }\n    const res = Reflect.get(target, key, receiver);\n    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {\n      return res;\n    }\n    if (!isReadonly) {\n      track(target, \"get\", key);\n    }\n    if (shallow) {\n      return res;\n    }\n    if (isRef(res)) {\n      const shouldUnwrap = !targetIsArray || !isIntegerKey(key);\n      return shouldUnwrap ? res.value : res;\n    }\n    if (isObject(res)) {\n      return isReadonly ? readonly(res) : reactive2(res);\n    }\n    return res;\n  };\n}\nvar set2 = /* @__PURE__ */ createSetter();\nfunction createSetter(shallow = false) {\n  return function set3(target, key, value, receiver) {\n    let oldValue = target[key];\n    if (!shallow) {\n      value = toRaw(value);\n      oldValue = toRaw(oldValue);\n      if (!isArray(target) && isRef(oldValue) && !isRef(value)) {\n        oldValue.value = value;\n        return true;\n      }\n    }\n    const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);\n    const result = Reflect.set(target, key, value, receiver);\n    if (target === toRaw(receiver)) {\n      if (!hadKey) {\n        trigger(target, \"add\", key, value);\n      } else if (hasChanged(value, oldValue)) {\n        trigger(target, \"set\", key, value, oldValue);\n      }\n    }\n    return result;\n  };\n}\nfunction deleteProperty(target, key) {\n  const hadKey = hasOwn(target, key);\n  const oldValue = target[key];\n  const result = Reflect.deleteProperty(target, key);\n  if (result && hadKey) {\n    trigger(target, \"delete\", key, void 0, oldValue);\n  }\n  return result;\n}\nfunction has(target, key) {\n  const result = Reflect.has(target, key);\n  if (!isSymbol(key) || !builtInSymbols.has(key)) {\n    track(target, \"has\", key);\n  }\n  return result;\n}\nfunction ownKeys(target) {\n  track(target, \"iterate\", isArray(target) ? \"length\" : ITERATE_KEY);\n  return Reflect.ownKeys(target);\n}\nvar mutableHandlers = {\n  get: get2,\n  set: set2,\n  deleteProperty,\n  has,\n  ownKeys\n};\nvar readonlyHandlers = {\n  get: readonlyGet,\n  set(target, key) {\n    if (true) {\n      console.warn(`Set operation on key \"${String(key)}\" failed: target is readonly.`, target);\n    }\n    return true;\n  },\n  deleteProperty(target, key) {\n    if (true) {\n      console.warn(`Delete operation on key \"${String(key)}\" failed: target is readonly.`, target);\n    }\n    return true;\n  }\n};\nvar toReactive = (value) => isObject(value) ? reactive2(value) : value;\nvar toReadonly = (value) => isObject(value) ? readonly(value) : value;\nvar toShallow = (value) => value;\nvar getProto = (v) => Reflect.getPrototypeOf(v);\nfunction get$1(target, key, isReadonly = false, isShallow = false) {\n  target = target[\n    \"__v_raw\"\n    /* RAW */\n  ];\n  const rawTarget = toRaw(target);\n  const rawKey = toRaw(key);\n  if (key !== rawKey) {\n    !isReadonly && track(rawTarget, \"get\", key);\n  }\n  !isReadonly && track(rawTarget, \"get\", rawKey);\n  const { has: has2 } = getProto(rawTarget);\n  const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\n  if (has2.call(rawTarget, key)) {\n    return wrap(target.get(key));\n  } else if (has2.call(rawTarget, rawKey)) {\n    return wrap(target.get(rawKey));\n  } else if (target !== rawTarget) {\n    target.get(key);\n  }\n}\nfunction has$1(key, isReadonly = false) {\n  const target = this[\n    \"__v_raw\"\n    /* RAW */\n  ];\n  const rawTarget = toRaw(target);\n  const rawKey = toRaw(key);\n  if (key !== rawKey) {\n    !isReadonly && track(rawTarget, \"has\", key);\n  }\n  !isReadonly && track(rawTarget, \"has\", rawKey);\n  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);\n}\nfunction size(target, isReadonly = false) {\n  target = target[\n    \"__v_raw\"\n    /* RAW */\n  ];\n  !isReadonly && track(toRaw(target), \"iterate\", ITERATE_KEY);\n  return Reflect.get(target, \"size\", target);\n}\nfunction add(value) {\n  value = toRaw(value);\n  const target = toRaw(this);\n  const proto = getProto(target);\n  const hadKey = proto.has.call(target, value);\n  if (!hadKey) {\n    target.add(value);\n    trigger(target, \"add\", value, value);\n  }\n  return this;\n}\nfunction set$1(key, value) {\n  value = toRaw(value);\n  const target = toRaw(this);\n  const { has: has2, get: get3 } = getProto(target);\n  let hadKey = has2.call(target, key);\n  if (!hadKey) {\n    key = toRaw(key);\n    hadKey = has2.call(target, key);\n  } else if (true) {\n    checkIdentityKeys(target, has2, key);\n  }\n  const oldValue = get3.call(target, key);\n  target.set(key, value);\n  if (!hadKey) {\n    trigger(target, \"add\", key, value);\n  } else if (hasChanged(value, oldValue)) {\n    trigger(target, \"set\", key, value, oldValue);\n  }\n  return this;\n}\nfunction deleteEntry(key) {\n  const target = toRaw(this);\n  const { has: has2, get: get3 } = getProto(target);\n  let hadKey = has2.call(target, key);\n  if (!hadKey) {\n    key = toRaw(key);\n    hadKey = has2.call(target, key);\n  } else if (true) {\n    checkIdentityKeys(target, has2, key);\n  }\n  const oldValue = get3 ? get3.call(target, key) : void 0;\n  const result = target.delete(key);\n  if (hadKey) {\n    trigger(target, \"delete\", key, void 0, oldValue);\n  }\n  return result;\n}\nfunction clear() {\n  const target = toRaw(this);\n  const hadItems = target.size !== 0;\n  const oldTarget =  true ? isMap(target) ? new Map(target) : new Set(target) : 0;\n  const result = target.clear();\n  if (hadItems) {\n    trigger(target, \"clear\", void 0, void 0, oldTarget);\n  }\n  return result;\n}\nfunction createForEach(isReadonly, isShallow) {\n  return function forEach(callback, thisArg) {\n    const observed = this;\n    const target = observed[\n      \"__v_raw\"\n      /* RAW */\n    ];\n    const rawTarget = toRaw(target);\n    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\n    !isReadonly && track(rawTarget, \"iterate\", ITERATE_KEY);\n    return target.forEach((value, key) => {\n      return callback.call(thisArg, wrap(value), wrap(key), observed);\n    });\n  };\n}\nfunction createIterableMethod(method, isReadonly, isShallow) {\n  return function(...args) {\n    const target = this[\n      \"__v_raw\"\n      /* RAW */\n    ];\n    const rawTarget = toRaw(target);\n    const targetIsMap = isMap(rawTarget);\n    const isPair = method === \"entries\" || method === Symbol.iterator && targetIsMap;\n    const isKeyOnly = method === \"keys\" && targetIsMap;\n    const innerIterator = target[method](...args);\n    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\n    !isReadonly && track(rawTarget, \"iterate\", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);\n    return {\n      // iterator protocol\n      next() {\n        const { value, done } = innerIterator.next();\n        return done ? { value, done } : {\n          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),\n          done\n        };\n      },\n      // iterable protocol\n      [Symbol.iterator]() {\n        return this;\n      }\n    };\n  };\n}\nfunction createReadonlyMethod(type) {\n  return function(...args) {\n    if (true) {\n      const key = args[0] ? `on key \"${args[0]}\" ` : ``;\n      console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));\n    }\n    return type === \"delete\" ? false : this;\n  };\n}\nfunction createInstrumentations() {\n  const mutableInstrumentations2 = {\n    get(key) {\n      return get$1(this, key);\n    },\n    get size() {\n      return size(this);\n    },\n    has: has$1,\n    add,\n    set: set$1,\n    delete: deleteEntry,\n    clear,\n    forEach: createForEach(false, false)\n  };\n  const shallowInstrumentations2 = {\n    get(key) {\n      return get$1(this, key, false, true);\n    },\n    get size() {\n      return size(this);\n    },\n    has: has$1,\n    add,\n    set: set$1,\n    delete: deleteEntry,\n    clear,\n    forEach: createForEach(false, true)\n  };\n  const readonlyInstrumentations2 = {\n    get(key) {\n      return get$1(this, key, true);\n    },\n    get size() {\n      return size(this, true);\n    },\n    has(key) {\n      return has$1.call(this, key, true);\n    },\n    add: createReadonlyMethod(\n      \"add\"\n      /* ADD */\n    ),\n    set: createReadonlyMethod(\n      \"set\"\n      /* SET */\n    ),\n    delete: createReadonlyMethod(\n      \"delete\"\n      /* DELETE */\n    ),\n    clear: createReadonlyMethod(\n      \"clear\"\n      /* CLEAR */\n    ),\n    forEach: createForEach(true, false)\n  };\n  const shallowReadonlyInstrumentations2 = {\n    get(key) {\n      return get$1(this, key, true, true);\n    },\n    get size() {\n      return size(this, true);\n    },\n    has(key) {\n      return has$1.call(this, key, true);\n    },\n    add: createReadonlyMethod(\n      \"add\"\n      /* ADD */\n    ),\n    set: createReadonlyMethod(\n      \"set\"\n      /* SET */\n    ),\n    delete: createReadonlyMethod(\n      \"delete\"\n      /* DELETE */\n    ),\n    clear: createReadonlyMethod(\n      \"clear\"\n      /* CLEAR */\n    ),\n    forEach: createForEach(true, true)\n  };\n  const iteratorMethods = [\"keys\", \"values\", \"entries\", Symbol.iterator];\n  iteratorMethods.forEach((method) => {\n    mutableInstrumentations2[method] = createIterableMethod(method, false, false);\n    readonlyInstrumentations2[method] = createIterableMethod(method, true, false);\n    shallowInstrumentations2[method] = createIterableMethod(method, false, true);\n    shallowReadonlyInstrumentations2[method] = createIterableMethod(method, true, true);\n  });\n  return [\n    mutableInstrumentations2,\n    readonlyInstrumentations2,\n    shallowInstrumentations2,\n    shallowReadonlyInstrumentations2\n  ];\n}\nvar [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* @__PURE__ */ createInstrumentations();\nfunction createInstrumentationGetter(isReadonly, shallow) {\n  const instrumentations = shallow ? isReadonly ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly ? readonlyInstrumentations : mutableInstrumentations;\n  return (target, key, receiver) => {\n    if (key === \"__v_isReactive\") {\n      return !isReadonly;\n    } else if (key === \"__v_isReadonly\") {\n      return isReadonly;\n    } else if (key === \"__v_raw\") {\n      return target;\n    }\n    return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);\n  };\n}\nvar mutableCollectionHandlers = {\n  get: /* @__PURE__ */ createInstrumentationGetter(false, false)\n};\nvar readonlyCollectionHandlers = {\n  get: /* @__PURE__ */ createInstrumentationGetter(true, false)\n};\nfunction checkIdentityKeys(target, has2, key) {\n  const rawKey = toRaw(key);\n  if (rawKey !== key && has2.call(target, rawKey)) {\n    const type = toRawType(target);\n    console.warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);\n  }\n}\nvar reactiveMap = /* @__PURE__ */ new WeakMap();\nvar shallowReactiveMap = /* @__PURE__ */ new WeakMap();\nvar readonlyMap = /* @__PURE__ */ new WeakMap();\nvar shallowReadonlyMap = /* @__PURE__ */ new WeakMap();\nfunction targetTypeMap(rawType) {\n  switch (rawType) {\n    case \"Object\":\n    case \"Array\":\n      return 1;\n    case \"Map\":\n    case \"Set\":\n    case \"WeakMap\":\n    case \"WeakSet\":\n      return 2;\n    default:\n      return 0;\n  }\n}\nfunction getTargetType(value) {\n  return value[\n    \"__v_skip\"\n    /* SKIP */\n  ] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));\n}\nfunction reactive2(target) {\n  if (target && target[\n    \"__v_isReadonly\"\n    /* IS_READONLY */\n  ]) {\n    return target;\n  }\n  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);\n}\nfunction readonly(target) {\n  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);\n}\nfunction createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {\n  if (!isObject(target)) {\n    if (true) {\n      console.warn(`value cannot be made reactive: ${String(target)}`);\n    }\n    return target;\n  }\n  if (target[\n    \"__v_raw\"\n    /* RAW */\n  ] && !(isReadonly && target[\n    \"__v_isReactive\"\n    /* IS_REACTIVE */\n  ])) {\n    return target;\n  }\n  const existingProxy = proxyMap.get(target);\n  if (existingProxy) {\n    return existingProxy;\n  }\n  const targetType = getTargetType(target);\n  if (targetType === 0) {\n    return target;\n  }\n  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);\n  proxyMap.set(target, proxy);\n  return proxy;\n}\nfunction toRaw(observed) {\n  return observed && toRaw(observed[\n    \"__v_raw\"\n    /* RAW */\n  ]) || observed;\n}\nfunction isRef(r) {\n  return Boolean(r && r.__v_isRef === true);\n}\n\n// packages/alpinejs/src/magics/$nextTick.js\nmagic(\"nextTick\", () => nextTick);\n\n// packages/alpinejs/src/magics/$dispatch.js\nmagic(\"dispatch\", (el) => dispatch.bind(dispatch, el));\n\n// packages/alpinejs/src/magics/$watch.js\nmagic(\"watch\", (el, { evaluateLater: evaluateLater2, effect: effect3 }) => (key, callback) => {\n  let evaluate2 = evaluateLater2(key);\n  let firstTime = true;\n  let oldValue;\n  let effectReference = effect3(() => evaluate2((value) => {\n    JSON.stringify(value);\n    if (!firstTime) {\n      queueMicrotask(() => {\n        callback(value, oldValue);\n        oldValue = value;\n      });\n    } else {\n      oldValue = value;\n    }\n    firstTime = false;\n  }));\n  el._x_effects.delete(effectReference);\n});\n\n// packages/alpinejs/src/magics/$store.js\nmagic(\"store\", getStores);\n\n// packages/alpinejs/src/magics/$data.js\nmagic(\"data\", (el) => scope(el));\n\n// packages/alpinejs/src/magics/$root.js\nmagic(\"root\", (el) => closestRoot(el));\n\n// packages/alpinejs/src/magics/$refs.js\nmagic(\"refs\", (el) => {\n  if (el._x_refs_proxy)\n    return el._x_refs_proxy;\n  el._x_refs_proxy = mergeProxies(getArrayOfRefObject(el));\n  return el._x_refs_proxy;\n});\nfunction getArrayOfRefObject(el) {\n  let refObjects = [];\n  let currentEl = el;\n  while (currentEl) {\n    if (currentEl._x_refs)\n      refObjects.push(currentEl._x_refs);\n    currentEl = currentEl.parentNode;\n  }\n  return refObjects;\n}\n\n// packages/alpinejs/src/ids.js\nvar globalIdMemo = {};\nfunction findAndIncrementId(name) {\n  if (!globalIdMemo[name])\n    globalIdMemo[name] = 0;\n  return ++globalIdMemo[name];\n}\nfunction closestIdRoot(el, name) {\n  return findClosest(el, (element) => {\n    if (element._x_ids && element._x_ids[name])\n      return true;\n  });\n}\nfunction setIdRoot(el, name) {\n  if (!el._x_ids)\n    el._x_ids = {};\n  if (!el._x_ids[name])\n    el._x_ids[name] = findAndIncrementId(name);\n}\n\n// packages/alpinejs/src/magics/$id.js\nmagic(\"id\", (el) => (name, key = null) => {\n  let root = closestIdRoot(el, name);\n  let id = root ? root._x_ids[name] : findAndIncrementId(name);\n  return key ? `${name}-${id}-${key}` : `${name}-${id}`;\n});\n\n// packages/alpinejs/src/magics/$el.js\nmagic(\"el\", (el) => el);\n\n// packages/alpinejs/src/magics/index.js\nwarnMissingPluginMagic(\"Focus\", \"focus\", \"focus\");\nwarnMissingPluginMagic(\"Persist\", \"persist\", \"persist\");\nfunction warnMissingPluginMagic(name, magicName, slug) {\n  magic(magicName, (el) => warn(`You can't use [$${directiveName}] without first installing the \"${name}\" plugin here: https://alpinejs.dev/plugins/${slug}`, el));\n}\n\n// packages/alpinejs/src/directives/x-modelable.js\ndirective(\"modelable\", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2, cleanup: cleanup2 }) => {\n  let func = evaluateLater2(expression);\n  let innerGet = () => {\n    let result;\n    func((i) => result = i);\n    return result;\n  };\n  let evaluateInnerSet = evaluateLater2(`${expression} = __placeholder`);\n  let innerSet = (val) => evaluateInnerSet(() => {\n  }, { scope: { \"__placeholder\": val } });\n  let initialValue = innerGet();\n  innerSet(initialValue);\n  queueMicrotask(() => {\n    if (!el._x_model)\n      return;\n    el._x_removeModelListeners[\"default\"]();\n    let outerGet = el._x_model.get;\n    let outerSet = el._x_model.set;\n    let releaseEntanglement = entangle(\n      {\n        get() {\n          return outerGet();\n        },\n        set(value) {\n          outerSet(value);\n        }\n      },\n      {\n        get() {\n          return innerGet();\n        },\n        set(value) {\n          innerSet(value);\n        }\n      }\n    );\n    cleanup2(releaseEntanglement);\n  });\n});\n\n// packages/alpinejs/src/directives/x-teleport.js\nvar teleportContainerDuringClone = document.createElement(\"div\");\ndirective(\"teleport\", (el, { modifiers, expression }, { cleanup: cleanup2 }) => {\n  if (el.tagName.toLowerCase() !== \"template\")\n    warn(\"x-teleport can only be used on a <template> tag\", el);\n  let target = skipDuringClone(() => {\n    return document.querySelector(expression);\n  }, () => {\n    return teleportContainerDuringClone;\n  })();\n  if (!target)\n    warn(`Cannot find x-teleport element for selector: \"${expression}\"`);\n  let clone2 = el.content.cloneNode(true).firstElementChild;\n  el._x_teleport = clone2;\n  clone2._x_teleportBack = el;\n  if (el._x_forwardEvents) {\n    el._x_forwardEvents.forEach((eventName) => {\n      clone2.addEventListener(eventName, (e) => {\n        e.stopPropagation();\n        el.dispatchEvent(new e.constructor(e.type, e));\n      });\n    });\n  }\n  addScopeToNode(clone2, {}, el);\n  mutateDom(() => {\n    if (modifiers.includes(\"prepend\")) {\n      target.parentNode.insertBefore(clone2, target);\n    } else if (modifiers.includes(\"append\")) {\n      target.parentNode.insertBefore(clone2, target.nextSibling);\n    } else {\n      target.appendChild(clone2);\n    }\n    initTree(clone2);\n    clone2._x_ignore = true;\n  });\n  cleanup2(() => clone2.remove());\n});\n\n// packages/alpinejs/src/directives/x-ignore.js\nvar handler = () => {\n};\nhandler.inline = (el, { modifiers }, { cleanup: cleanup2 }) => {\n  modifiers.includes(\"self\") ? el._x_ignoreSelf = true : el._x_ignore = true;\n  cleanup2(() => {\n    modifiers.includes(\"self\") ? delete el._x_ignoreSelf : delete el._x_ignore;\n  });\n};\ndirective(\"ignore\", handler);\n\n// packages/alpinejs/src/directives/x-effect.js\ndirective(\"effect\", (el, { expression }, { effect: effect3 }) => effect3(evaluateLater(el, expression)));\n\n// packages/alpinejs/src/utils/on.js\nfunction on(el, event, modifiers, callback) {\n  let listenerTarget = el;\n  let handler4 = (e) => callback(e);\n  let options = {};\n  let wrapHandler = (callback2, wrapper) => (e) => wrapper(callback2, e);\n  if (modifiers.includes(\"dot\"))\n    event = dotSyntax(event);\n  if (modifiers.includes(\"camel\"))\n    event = camelCase2(event);\n  if (modifiers.includes(\"passive\"))\n    options.passive = true;\n  if (modifiers.includes(\"capture\"))\n    options.capture = true;\n  if (modifiers.includes(\"window\"))\n    listenerTarget = window;\n  if (modifiers.includes(\"document\"))\n    listenerTarget = document;\n  if (modifiers.includes(\"debounce\")) {\n    let nextModifier = modifiers[modifiers.indexOf(\"debounce\") + 1] || \"invalid-wait\";\n    let wait = isNumeric(nextModifier.split(\"ms\")[0]) ? Number(nextModifier.split(\"ms\")[0]) : 250;\n    handler4 = debounce(handler4, wait);\n  }\n  if (modifiers.includes(\"throttle\")) {\n    let nextModifier = modifiers[modifiers.indexOf(\"throttle\") + 1] || \"invalid-wait\";\n    let wait = isNumeric(nextModifier.split(\"ms\")[0]) ? Number(nextModifier.split(\"ms\")[0]) : 250;\n    handler4 = throttle(handler4, wait);\n  }\n  if (modifiers.includes(\"prevent\"))\n    handler4 = wrapHandler(handler4, (next, e) => {\n      e.preventDefault();\n      next(e);\n    });\n  if (modifiers.includes(\"stop\"))\n    handler4 = wrapHandler(handler4, (next, e) => {\n      e.stopPropagation();\n      next(e);\n    });\n  if (modifiers.includes(\"self\"))\n    handler4 = wrapHandler(handler4, (next, e) => {\n      e.target === el && next(e);\n    });\n  if (modifiers.includes(\"away\") || modifiers.includes(\"outside\")) {\n    listenerTarget = document;\n    handler4 = wrapHandler(handler4, (next, e) => {\n      if (el.contains(e.target))\n        return;\n      if (e.target.isConnected === false)\n        return;\n      if (el.offsetWidth < 1 && el.offsetHeight < 1)\n        return;\n      if (el._x_isShown === false)\n        return;\n      next(e);\n    });\n  }\n  if (modifiers.includes(\"once\")) {\n    handler4 = wrapHandler(handler4, (next, e) => {\n      next(e);\n      listenerTarget.removeEventListener(event, handler4, options);\n    });\n  }\n  handler4 = wrapHandler(handler4, (next, e) => {\n    if (isKeyEvent(event)) {\n      if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {\n        return;\n      }\n    }\n    next(e);\n  });\n  listenerTarget.addEventListener(event, handler4, options);\n  return () => {\n    listenerTarget.removeEventListener(event, handler4, options);\n  };\n}\nfunction dotSyntax(subject) {\n  return subject.replace(/-/g, \".\");\n}\nfunction camelCase2(subject) {\n  return subject.toLowerCase().replace(/-(\\w)/g, (match, char) => char.toUpperCase());\n}\nfunction isNumeric(subject) {\n  return !Array.isArray(subject) && !isNaN(subject);\n}\nfunction kebabCase2(subject) {\n  if ([\" \", \"_\"].includes(\n    subject\n  ))\n    return subject;\n  return subject.replace(/([a-z])([A-Z])/g, \"$1-$2\").replace(/[_\\s]/, \"-\").toLowerCase();\n}\nfunction isKeyEvent(event) {\n  return [\"keydown\", \"keyup\"].includes(event);\n}\nfunction isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {\n  let keyModifiers = modifiers.filter((i) => {\n    return ![\"window\", \"document\", \"prevent\", \"stop\", \"once\", \"capture\"].includes(i);\n  });\n  if (keyModifiers.includes(\"debounce\")) {\n    let debounceIndex = keyModifiers.indexOf(\"debounce\");\n    keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || \"invalid-wait\").split(\"ms\")[0]) ? 2 : 1);\n  }\n  if (keyModifiers.includes(\"throttle\")) {\n    let debounceIndex = keyModifiers.indexOf(\"throttle\");\n    keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || \"invalid-wait\").split(\"ms\")[0]) ? 2 : 1);\n  }\n  if (keyModifiers.length === 0)\n    return false;\n  if (keyModifiers.length === 1 && keyToModifiers(e.key).includes(keyModifiers[0]))\n    return false;\n  const systemKeyModifiers = [\"ctrl\", \"shift\", \"alt\", \"meta\", \"cmd\", \"super\"];\n  const selectedSystemKeyModifiers = systemKeyModifiers.filter((modifier) => keyModifiers.includes(modifier));\n  keyModifiers = keyModifiers.filter((i) => !selectedSystemKeyModifiers.includes(i));\n  if (selectedSystemKeyModifiers.length > 0) {\n    const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter((modifier) => {\n      if (modifier === \"cmd\" || modifier === \"super\")\n        modifier = \"meta\";\n      return e[`${modifier}Key`];\n    });\n    if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {\n      if (keyToModifiers(e.key).includes(keyModifiers[0]))\n        return false;\n    }\n  }\n  return true;\n}\nfunction keyToModifiers(key) {\n  if (!key)\n    return [];\n  key = kebabCase2(key);\n  let modifierToKeyMap = {\n    \"ctrl\": \"control\",\n    \"slash\": \"/\",\n    \"space\": \" \",\n    \"spacebar\": \" \",\n    \"cmd\": \"meta\",\n    \"esc\": \"escape\",\n    \"up\": \"arrow-up\",\n    \"down\": \"arrow-down\",\n    \"left\": \"arrow-left\",\n    \"right\": \"arrow-right\",\n    \"period\": \".\",\n    \"equal\": \"=\",\n    \"minus\": \"-\",\n    \"underscore\": \"_\"\n  };\n  modifierToKeyMap[key] = key;\n  return Object.keys(modifierToKeyMap).map((modifier) => {\n    if (modifierToKeyMap[modifier] === key)\n      return modifier;\n  }).filter((modifier) => modifier);\n}\n\n// packages/alpinejs/src/directives/x-model.js\ndirective(\"model\", (el, { modifiers, expression }, { effect: effect3, cleanup: cleanup2 }) => {\n  let scopeTarget = el;\n  if (modifiers.includes(\"parent\")) {\n    scopeTarget = el.parentNode;\n  }\n  let evaluateGet = evaluateLater(scopeTarget, expression);\n  let evaluateSet;\n  if (typeof expression === \"string\") {\n    evaluateSet = evaluateLater(scopeTarget, `${expression} = __placeholder`);\n  } else if (typeof expression === \"function\" && typeof expression() === \"string\") {\n    evaluateSet = evaluateLater(scopeTarget, `${expression()} = __placeholder`);\n  } else {\n    evaluateSet = () => {\n    };\n  }\n  let getValue = () => {\n    let result;\n    evaluateGet((value) => result = value);\n    return isGetterSetter(result) ? result.get() : result;\n  };\n  let setValue = (value) => {\n    let result;\n    evaluateGet((value2) => result = value2);\n    if (isGetterSetter(result)) {\n      result.set(value);\n    } else {\n      evaluateSet(() => {\n      }, {\n        scope: { \"__placeholder\": value }\n      });\n    }\n  };\n  if (typeof expression === \"string\" && el.type === \"radio\") {\n    mutateDom(() => {\n      if (!el.hasAttribute(\"name\"))\n        el.setAttribute(\"name\", expression);\n    });\n  }\n  var event = el.tagName.toLowerCase() === \"select\" || [\"checkbox\", \"radio\"].includes(el.type) || modifiers.includes(\"lazy\") ? \"change\" : \"input\";\n  let removeListener = isCloning ? () => {\n  } : on(el, event, modifiers, (e) => {\n    setValue(getInputValue(el, modifiers, e, getValue()));\n  });\n  if (modifiers.includes(\"fill\")) {\n    if ([null, \"\"].includes(getValue()) || el.type === \"checkbox\" && Array.isArray(getValue())) {\n      el.dispatchEvent(new Event(event, {}));\n    }\n  }\n  if (!el._x_removeModelListeners)\n    el._x_removeModelListeners = {};\n  el._x_removeModelListeners[\"default\"] = removeListener;\n  cleanup2(() => el._x_removeModelListeners[\"default\"]());\n  if (el.form) {\n    let removeResetListener = on(el.form, \"reset\", [], (e) => {\n      nextTick(() => el._x_model && el._x_model.set(el.value));\n    });\n    cleanup2(() => removeResetListener());\n  }\n  el._x_model = {\n    get() {\n      return getValue();\n    },\n    set(value) {\n      setValue(value);\n    }\n  };\n  el._x_forceModelUpdate = (value) => {\n    if (value === void 0 && typeof expression === \"string\" && expression.match(/\\./))\n      value = \"\";\n    window.fromModel = true;\n    mutateDom(() => bind(el, \"value\", value));\n    delete window.fromModel;\n  };\n  effect3(() => {\n    let value = getValue();\n    if (modifiers.includes(\"unintrusive\") && document.activeElement.isSameNode(el))\n      return;\n    el._x_forceModelUpdate(value);\n  });\n});\nfunction getInputValue(el, modifiers, event, currentValue) {\n  return mutateDom(() => {\n    if (event instanceof CustomEvent && event.detail !== void 0)\n      return event.detail ?? event.target.value;\n    else if (el.type === \"checkbox\") {\n      if (Array.isArray(currentValue)) {\n        let newValue = modifiers.includes(\"number\") ? safeParseNumber(event.target.value) : event.target.value;\n        return event.target.checked ? currentValue.concat([newValue]) : currentValue.filter((el2) => !checkedAttrLooseCompare2(el2, newValue));\n      } else {\n        return event.target.checked;\n      }\n    } else if (el.tagName.toLowerCase() === \"select\" && el.multiple) {\n      return modifiers.includes(\"number\") ? Array.from(event.target.selectedOptions).map((option) => {\n        let rawValue = option.value || option.text;\n        return safeParseNumber(rawValue);\n      }) : Array.from(event.target.selectedOptions).map((option) => {\n        return option.value || option.text;\n      });\n    } else {\n      let rawValue = event.target.value;\n      return modifiers.includes(\"number\") ? safeParseNumber(rawValue) : modifiers.includes(\"trim\") ? rawValue.trim() : rawValue;\n    }\n  });\n}\nfunction safeParseNumber(rawValue) {\n  let number = rawValue ? parseFloat(rawValue) : null;\n  return isNumeric2(number) ? number : rawValue;\n}\nfunction checkedAttrLooseCompare2(valueA, valueB) {\n  return valueA == valueB;\n}\nfunction isNumeric2(subject) {\n  return !Array.isArray(subject) && !isNaN(subject);\n}\nfunction isGetterSetter(value) {\n  return value !== null && typeof value === \"object\" && typeof value.get === \"function\" && typeof value.set === \"function\";\n}\n\n// packages/alpinejs/src/directives/x-cloak.js\ndirective(\"cloak\", (el) => queueMicrotask(() => mutateDom(() => el.removeAttribute(prefix(\"cloak\")))));\n\n// packages/alpinejs/src/directives/x-init.js\naddInitSelector(() => `[${prefix(\"init\")}]`);\ndirective(\"init\", skipDuringClone((el, { expression }, { evaluate: evaluate2 }) => {\n  if (typeof expression === \"string\") {\n    return !!expression.trim() && evaluate2(expression, {}, false);\n  }\n  return evaluate2(expression, {}, false);\n}));\n\n// packages/alpinejs/src/directives/x-text.js\ndirective(\"text\", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2 }) => {\n  let evaluate2 = evaluateLater2(expression);\n  effect3(() => {\n    evaluate2((value) => {\n      mutateDom(() => {\n        el.textContent = value;\n      });\n    });\n  });\n});\n\n// packages/alpinejs/src/directives/x-html.js\ndirective(\"html\", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2 }) => {\n  let evaluate2 = evaluateLater2(expression);\n  effect3(() => {\n    evaluate2((value) => {\n      mutateDom(() => {\n        el.innerHTML = value;\n        el._x_ignoreSelf = true;\n        initTree(el);\n        delete el._x_ignoreSelf;\n      });\n    });\n  });\n});\n\n// packages/alpinejs/src/directives/x-bind.js\nmapAttributes(startingWith(\":\", into(prefix(\"bind:\"))));\nvar handler2 = (el, { value, modifiers, expression, original }, { effect: effect3 }) => {\n  if (!value) {\n    let bindingProviders = {};\n    injectBindingProviders(bindingProviders);\n    let getBindings = evaluateLater(el, expression);\n    getBindings((bindings) => {\n      applyBindingsObject(el, bindings, original);\n    }, { scope: bindingProviders });\n    return;\n  }\n  if (value === \"key\")\n    return storeKeyForXFor(el, expression);\n  if (el._x_inlineBindings && el._x_inlineBindings[value] && el._x_inlineBindings[value].extract) {\n    return;\n  }\n  let evaluate2 = evaluateLater(el, expression);\n  effect3(() => evaluate2((result) => {\n    if (result === void 0 && typeof expression === \"string\" && expression.match(/\\./)) {\n      result = \"\";\n    }\n    mutateDom(() => bind(el, value, result, modifiers));\n  }));\n};\nhandler2.inline = (el, { value, modifiers, expression }) => {\n  if (!value)\n    return;\n  if (!el._x_inlineBindings)\n    el._x_inlineBindings = {};\n  el._x_inlineBindings[value] = { expression, extract: false };\n};\ndirective(\"bind\", handler2);\nfunction storeKeyForXFor(el, expression) {\n  el._x_keyExpression = expression;\n}\n\n// packages/alpinejs/src/directives/x-data.js\naddRootSelector(() => `[${prefix(\"data\")}]`);\ndirective(\"data\", (el, { expression }, { cleanup: cleanup2 }) => {\n  if (shouldSkipRegisteringDataDuringClone(el))\n    return;\n  expression = expression === \"\" ? \"{}\" : expression;\n  let magicContext = {};\n  injectMagics(magicContext, el);\n  let dataProviderContext = {};\n  injectDataProviders(dataProviderContext, magicContext);\n  let data2 = evaluate(el, expression, { scope: dataProviderContext });\n  if (data2 === void 0 || data2 === true)\n    data2 = {};\n  injectMagics(data2, el);\n  let reactiveData = reactive(data2);\n  initInterceptors2(reactiveData);\n  let undo = addScopeToNode(el, reactiveData);\n  reactiveData[\"init\"] && evaluate(el, reactiveData[\"init\"]);\n  cleanup2(() => {\n    reactiveData[\"destroy\"] && evaluate(el, reactiveData[\"destroy\"]);\n    undo();\n  });\n});\n\n// packages/alpinejs/src/directives/x-show.js\ndirective(\"show\", (el, { modifiers, expression }, { effect: effect3 }) => {\n  let evaluate2 = evaluateLater(el, expression);\n  if (!el._x_doHide)\n    el._x_doHide = () => {\n      mutateDom(() => {\n        el.style.setProperty(\"display\", \"none\", modifiers.includes(\"important\") ? \"important\" : void 0);\n      });\n    };\n  if (!el._x_doShow)\n    el._x_doShow = () => {\n      mutateDom(() => {\n        if (el.style.length === 1 && el.style.display === \"none\") {\n          el.removeAttribute(\"style\");\n        } else {\n          el.style.removeProperty(\"display\");\n        }\n      });\n    };\n  let hide = () => {\n    el._x_doHide();\n    el._x_isShown = false;\n  };\n  let show = () => {\n    el._x_doShow();\n    el._x_isShown = true;\n  };\n  let clickAwayCompatibleShow = () => setTimeout(show);\n  let toggle = once(\n    (value) => value ? show() : hide(),\n    (value) => {\n      if (typeof el._x_toggleAndCascadeWithTransitions === \"function\") {\n        el._x_toggleAndCascadeWithTransitions(el, value, show, hide);\n      } else {\n        value ? clickAwayCompatibleShow() : hide();\n      }\n    }\n  );\n  let oldValue;\n  let firstTime = true;\n  effect3(() => evaluate2((value) => {\n    if (!firstTime && value === oldValue)\n      return;\n    if (modifiers.includes(\"immediate\"))\n      value ? clickAwayCompatibleShow() : hide();\n    toggle(value);\n    oldValue = value;\n    firstTime = false;\n  }));\n});\n\n// packages/alpinejs/src/directives/x-for.js\ndirective(\"for\", (el, { expression }, { effect: effect3, cleanup: cleanup2 }) => {\n  let iteratorNames = parseForExpression(expression);\n  let evaluateItems = evaluateLater(el, iteratorNames.items);\n  let evaluateKey = evaluateLater(\n    el,\n    // the x-bind:key expression is stored for our use instead of evaluated.\n    el._x_keyExpression || \"index\"\n  );\n  el._x_prevKeys = [];\n  el._x_lookup = {};\n  effect3(() => loop(el, iteratorNames, evaluateItems, evaluateKey));\n  cleanup2(() => {\n    Object.values(el._x_lookup).forEach((el2) => el2.remove());\n    delete el._x_prevKeys;\n    delete el._x_lookup;\n  });\n});\nfunction loop(el, iteratorNames, evaluateItems, evaluateKey) {\n  let isObject2 = (i) => typeof i === \"object\" && !Array.isArray(i);\n  let templateEl = el;\n  evaluateItems((items) => {\n    if (isNumeric3(items) && items >= 0) {\n      items = Array.from(Array(items).keys(), (i) => i + 1);\n    }\n    if (items === void 0)\n      items = [];\n    let lookup = el._x_lookup;\n    let prevKeys = el._x_prevKeys;\n    let scopes = [];\n    let keys = [];\n    if (isObject2(items)) {\n      items = Object.entries(items).map(([key, value]) => {\n        let scope2 = getIterationScopeVariables(iteratorNames, value, key, items);\n        evaluateKey((value2) => keys.push(value2), { scope: { index: key, ...scope2 } });\n        scopes.push(scope2);\n      });\n    } else {\n      for (let i = 0; i < items.length; i++) {\n        let scope2 = getIterationScopeVariables(iteratorNames, items[i], i, items);\n        evaluateKey((value) => keys.push(value), { scope: { index: i, ...scope2 } });\n        scopes.push(scope2);\n      }\n    }\n    let adds = [];\n    let moves = [];\n    let removes = [];\n    let sames = [];\n    for (let i = 0; i < prevKeys.length; i++) {\n      let key = prevKeys[i];\n      if (keys.indexOf(key) === -1)\n        removes.push(key);\n    }\n    prevKeys = prevKeys.filter((key) => !removes.includes(key));\n    let lastKey = \"template\";\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let prevIndex = prevKeys.indexOf(key);\n      if (prevIndex === -1) {\n        prevKeys.splice(i, 0, key);\n        adds.push([lastKey, i]);\n      } else if (prevIndex !== i) {\n        let keyInSpot = prevKeys.splice(i, 1)[0];\n        let keyForSpot = prevKeys.splice(prevIndex - 1, 1)[0];\n        prevKeys.splice(i, 0, keyForSpot);\n        prevKeys.splice(prevIndex, 0, keyInSpot);\n        moves.push([keyInSpot, keyForSpot]);\n      } else {\n        sames.push(key);\n      }\n      lastKey = key;\n    }\n    for (let i = 0; i < removes.length; i++) {\n      let key = removes[i];\n      if (!!lookup[key]._x_effects) {\n        lookup[key]._x_effects.forEach(dequeueJob);\n      }\n      lookup[key].remove();\n      lookup[key] = null;\n      delete lookup[key];\n    }\n    for (let i = 0; i < moves.length; i++) {\n      let [keyInSpot, keyForSpot] = moves[i];\n      let elInSpot = lookup[keyInSpot];\n      let elForSpot = lookup[keyForSpot];\n      let marker = document.createElement(\"div\");\n      mutateDom(() => {\n        if (!elForSpot)\n          warn(`x-for \":key\" is undefined or invalid`, templateEl);\n        elForSpot.after(marker);\n        elInSpot.after(elForSpot);\n        elForSpot._x_currentIfEl && elForSpot.after(elForSpot._x_currentIfEl);\n        marker.before(elInSpot);\n        elInSpot._x_currentIfEl && elInSpot.after(elInSpot._x_currentIfEl);\n        marker.remove();\n      });\n      elForSpot._x_refreshXForScope(scopes[keys.indexOf(keyForSpot)]);\n    }\n    for (let i = 0; i < adds.length; i++) {\n      let [lastKey2, index] = adds[i];\n      let lastEl = lastKey2 === \"template\" ? templateEl : lookup[lastKey2];\n      if (lastEl._x_currentIfEl)\n        lastEl = lastEl._x_currentIfEl;\n      let scope2 = scopes[index];\n      let key = keys[index];\n      let clone2 = document.importNode(templateEl.content, true).firstElementChild;\n      let reactiveScope = reactive(scope2);\n      addScopeToNode(clone2, reactiveScope, templateEl);\n      clone2._x_refreshXForScope = (newScope) => {\n        Object.entries(newScope).forEach(([key2, value]) => {\n          reactiveScope[key2] = value;\n        });\n      };\n      mutateDom(() => {\n        lastEl.after(clone2);\n        initTree(clone2);\n      });\n      if (typeof key === \"object\") {\n        warn(\"x-for key cannot be an object, it must be a string or an integer\", templateEl);\n      }\n      lookup[key] = clone2;\n    }\n    for (let i = 0; i < sames.length; i++) {\n      lookup[sames[i]]._x_refreshXForScope(scopes[keys.indexOf(sames[i])]);\n    }\n    templateEl._x_prevKeys = keys;\n  });\n}\nfunction parseForExpression(expression) {\n  let forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\n  let stripParensRE = /^\\s*\\(|\\)\\s*$/g;\n  let forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\n  let inMatch = expression.match(forAliasRE);\n  if (!inMatch)\n    return;\n  let res = {};\n  res.items = inMatch[2].trim();\n  let item = inMatch[1].replace(stripParensRE, \"\").trim();\n  let iteratorMatch = item.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.item = item.replace(forIteratorRE, \"\").trim();\n    res.index = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.collection = iteratorMatch[2].trim();\n    }\n  } else {\n    res.item = item;\n  }\n  return res;\n}\nfunction getIterationScopeVariables(iteratorNames, item, index, items) {\n  let scopeVariables = {};\n  if (/^\\[.*\\]$/.test(iteratorNames.item) && Array.isArray(item)) {\n    let names = iteratorNames.item.replace(\"[\", \"\").replace(\"]\", \"\").split(\",\").map((i) => i.trim());\n    names.forEach((name, i) => {\n      scopeVariables[name] = item[i];\n    });\n  } else if (/^\\{.*\\}$/.test(iteratorNames.item) && !Array.isArray(item) && typeof item === \"object\") {\n    let names = iteratorNames.item.replace(\"{\", \"\").replace(\"}\", \"\").split(\",\").map((i) => i.trim());\n    names.forEach((name) => {\n      scopeVariables[name] = item[name];\n    });\n  } else {\n    scopeVariables[iteratorNames.item] = item;\n  }\n  if (iteratorNames.index)\n    scopeVariables[iteratorNames.index] = index;\n  if (iteratorNames.collection)\n    scopeVariables[iteratorNames.collection] = items;\n  return scopeVariables;\n}\nfunction isNumeric3(subject) {\n  return !Array.isArray(subject) && !isNaN(subject);\n}\n\n// packages/alpinejs/src/directives/x-ref.js\nfunction handler3() {\n}\nhandler3.inline = (el, { expression }, { cleanup: cleanup2 }) => {\n  let root = closestRoot(el);\n  if (!root._x_refs)\n    root._x_refs = {};\n  root._x_refs[expression] = el;\n  cleanup2(() => delete root._x_refs[expression]);\n};\ndirective(\"ref\", handler3);\n\n// packages/alpinejs/src/directives/x-if.js\ndirective(\"if\", (el, { expression }, { effect: effect3, cleanup: cleanup2 }) => {\n  let evaluate2 = evaluateLater(el, expression);\n  let show = () => {\n    if (el._x_currentIfEl)\n      return el._x_currentIfEl;\n    let clone2 = el.content.cloneNode(true).firstElementChild;\n    addScopeToNode(clone2, {}, el);\n    mutateDom(() => {\n      el.after(clone2);\n      initTree(clone2);\n    });\n    el._x_currentIfEl = clone2;\n    el._x_undoIf = () => {\n      walk(clone2, (node) => {\n        if (!!node._x_effects) {\n          node._x_effects.forEach(dequeueJob);\n        }\n      });\n      clone2.remove();\n      delete el._x_currentIfEl;\n    };\n    return clone2;\n  };\n  let hide = () => {\n    if (!el._x_undoIf)\n      return;\n    el._x_undoIf();\n    delete el._x_undoIf;\n  };\n  effect3(() => evaluate2((value) => {\n    value ? show() : hide();\n  }));\n  cleanup2(() => el._x_undoIf && el._x_undoIf());\n});\n\n// packages/alpinejs/src/directives/x-id.js\ndirective(\"id\", (el, { expression }, { evaluate: evaluate2 }) => {\n  let names = evaluate2(expression);\n  names.forEach((name) => setIdRoot(el, name));\n});\n\n// packages/alpinejs/src/directives/x-on.js\nmapAttributes(startingWith(\"@\", into(prefix(\"on:\"))));\ndirective(\"on\", skipDuringClone((el, { value, modifiers, expression }, { cleanup: cleanup2 }) => {\n  let evaluate2 = expression ? evaluateLater(el, expression) : () => {\n  };\n  if (el.tagName.toLowerCase() === \"template\") {\n    if (!el._x_forwardEvents)\n      el._x_forwardEvents = [];\n    if (!el._x_forwardEvents.includes(value))\n      el._x_forwardEvents.push(value);\n  }\n  let removeListener = on(el, value, modifiers, (e) => {\n    evaluate2(() => {\n    }, { scope: { \"$event\": e }, params: [e] });\n  });\n  cleanup2(() => removeListener());\n}));\n\n// packages/alpinejs/src/directives/index.js\nwarnMissingPluginDirective(\"Collapse\", \"collapse\", \"collapse\");\nwarnMissingPluginDirective(\"Intersect\", \"intersect\", \"intersect\");\nwarnMissingPluginDirective(\"Focus\", \"trap\", \"focus\");\nwarnMissingPluginDirective(\"Mask\", \"mask\", \"mask\");\nfunction warnMissingPluginDirective(name, directiveName2, slug) {\n  directive(directiveName2, (el) => warn(`You can't use [x-${directiveName2}] without first installing the \"${name}\" plugin here: https://alpinejs.dev/plugins/${slug}`, el));\n}\n\n// packages/alpinejs/src/index.js\nalpine_default.setEvaluator(normalEvaluator);\nalpine_default.setReactivityEngine({ reactive: reactive2, effect: effect2, release: stop, raw: toRaw });\nvar src_default = alpine_default;\n\n// packages/alpinejs/builds/module.js\nvar module_default = src_default;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/alpinejs/dist/module.esm.js\n");

/***/ }),

/***/ "./src/js/accordion.js":
/*!*****************************!*\
  !*** ./src/js/accordion.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var accordion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! accordion-js */ \"./node_modules/accordion-js/dist/accordion.min.js\");\n/* harmony import */ var accordion_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(accordion_js__WEBPACK_IMPORTED_MODULE_0__);\n\nvar faqFliter = document.querySelector('#faqFilter');\nvar accordions;\ndocument.addEventListener('DOMContentLoaded', function () {\n  accordions = Array.from(document.querySelectorAll('.accordion-container-multi'));\n  if (accordions.length > 0) {\n    new (accordion_js__WEBPACK_IMPORTED_MODULE_0___default())(accordions, {\n      duration: 400\n    });\n  }\n  if (faqFliter) {\n    var categorySelections = document.querySelectorAll(\".category-selection\");\n    var seasonSelections = document.querySelectorAll(\".season-selection\");\n    var filterButtonDiv = document.querySelector(\".fliter-arrow-mobile\");\n    filterButtonDiv.addEventListener('click', function (e) {\n      e.preventDefault();\n      showOrHideFilters();\n    });\n\n    // console.log(categorySelections);\n\n    categorySelections.forEach(function (selection) {\n      selection.addEventListener('click', function (e) {\n        e.preventDefault();\n        if (selection.classList.contains('is-active-cat')) {\n          selection.classList.remove('is-active-cat');\n          selection.style.backgroundColor = \"\";\n        } else {\n          selection.classList.add('is-active-cat');\n          selection.style.backgroundColor = \"white\";\n        }\n        filtersOnClick();\n      });\n    });\n    seasonSelections.forEach(function (selection) {\n      selection.addEventListener('click', function (e) {\n        e.preventDefault();\n        if (selection.classList.contains('is-active-season')) {\n          selection.classList.remove('is-active-season');\n          selection.style.backgroundColor = \"\";\n        } else {\n          selection.classList.add('is-active-season');\n          selection.style.backgroundColor = \"white\";\n        }\n        filtersOnClick();\n      });\n    });\n  }\n});\nfunction filtersOnClick() {\n  var cats = [];\n  var seas = [];\n  var activeCats = document.querySelectorAll('.is-active-cat');\n  var activeSeasons = document.querySelectorAll('.is-active-season');\n  activeCats.forEach(function (activeCat) {\n    var cat = activeCat.getAttribute('data-categoryselection');\n    cats.push(cat);\n  });\n  activeSeasons.forEach(function (activeSeason) {\n    var season = activeSeason.getAttribute('data-seasonselection');\n    seas.push(season);\n  });\n  if (accordions) accordions.forEach(function (accordion) {\n    var acs = accordion.querySelectorAll('.ac');\n    acs.forEach(function (ac) {\n      var categories = ac.getAttribute('data-categories').split(',');\n      var seasons = ac.getAttribute('data-seasons').split(',');\n      // console.log(seasons);\n      if (cats.every(function (i) {\n        return categories.includes(i);\n      }) && seas.every(function (i) {\n        return seasons.includes(i);\n      })) {\n        ac.style.display = \"block\";\n        console.log(\"categories: [\" + cats + \"] seasons: [\" + seas + \"]\");\n      } else {\n        ac.style.display = \"none\";\n      }\n      ;\n    });\n  });\n}\nfunction showOrHideFilters() {\n  var filtersContent = document.querySelector(\".filters-content\");\n  var filtersArrowButton = document.querySelector(\".fliter-arrow-mobile\");\n  var hide = filtersContent.classList.contains('hidden');\n  var bgImgDown = \"/assets/images/arrow-down.svg\";\n  var bgImgUp = \"/assets/images/arrow-up.svg\";\n  var bgImg = filtersArrowButton.style[\"background-image\"].slice(4, -1).replace(/\"/g, \"\");\n  hide ? filtersContent.classList.remove('hidden') : filtersContent.classList.add('hidden');\n  bgImg == bgImgDown ? filtersArrowButton.style.background = \"url(\".concat(bgImgUp, \")\") : filtersArrowButton.style.background = \"url(\".concat(bgImgDown, \")\");\n  filtersArrowButton.style['background-size'] = \"fit\";\n  filtersArrowButton.style['background-repeat'] = \"no-repeat\";\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/accordion.js\n");

/***/ }),

/***/ "./src/js/bookingForm.js":
/*!*******************************!*\
  !*** ./src/js/bookingForm.js ***!
  \*******************************/
/***/ (() => {

eval("document.addEventListener('DOMContentLoaded', function () {\n  var bfpTitles = document.getElementsByClassName('bookingform-p-tab');\n  var bfpContents = document.getElementsByClassName('bookingform-p-content');\n  var checkboxes = [];\n  if (bfpContents.length > 0) checkboxes = bfpContents[0].querySelectorAll('input[type=checkbox]');\n  var packageCards = document.querySelectorAll('.p-card-on-form');\n  var _loop = function _loop(i) {\n    Array.from(bfpTitles, function (el) {\n      return initBfpTitle(el);\n    });\n    Array.from(bfpContents, function (el) {\n      return initBfpContent(el);\n    });\n    bfpTitles[i].addEventListener('click', function (e) {\n      Array.from(bfpTitles, function (el) {\n        return initBfpTitle(el);\n      });\n      Array.from(bfpContents, function (el) {\n        return initBfpContent(el);\n      });\n      // keep for slide\n      // let paginationDot = bfpContents[i].querySelector(\".splide__pagination\");\n      // paginationDot.style.display = \"flex\";\n      bfpTitles[i].style.backgroundColor = '#ffffff';\n      bfpContents[i].style.display = 'flex';\n      checkboxes = bfpContents[i].querySelectorAll('input[type=checkbox]');\n      initCheckboxes(checkboxes);\n    });\n  };\n  for (var i = 0; i < bfpTitles.length; i++) {\n    _loop(i);\n  }\n  if (bfpContents.length > 0) {\n    bfpTitles[0].style.backgroundColor = '#ffffff';\n    bfpContents[0].style.display = 'flex';\n  }\n  packageCards.forEach(function (card) {\n    card.addEventListener('click', function () {\n      return cardsOnClick(card);\n    });\n  });\n  if (checkboxes.length > 0) {\n    checkboxes[0].checked = true;\n    initCheckboxes(checkboxes);\n    updatePrice(checkboxes[0]);\n  }\n});\nfunction cardsOnClick(card) {\n  var checkbox = card.querySelector('input[type=checkbox]');\n  checkbox.checked == true ? checkbox.checked = false : checkbox.checked = true;\n  var change = new Event('change');\n  checkbox.dispatchEvent(change);\n}\nfunction initBfpTitle(el) {\n  el.style.backgroundColor = 'transparent';\n}\nfunction initBfpContent(el) {\n  el.style.display = 'none';\n}\nfunction initCheckbox(el) {\n  el.checked = false;\n}\nfunction checkboxOnClick(checkbox) {}\nfunction initCheckboxes(checkboxes) {\n  var _loop2 = function _loop2(i) {\n    Array.from(checkboxes, function (el) {\n      return initCheckbox(el);\n    });\n    checkboxes[i].addEventListener('click', function (e) {\n      e.stopPropagation();\n    });\n    checkboxes[i].addEventListener('change', function (e) {\n      if (checkboxes[i].checked) {\n        Array.from(checkboxes, function (el) {\n          return initCheckbox(el);\n        });\n        updatePrice(checkboxes[i]);\n        checkboxes[i].checked = true;\n      } else {\n        return;\n      }\n    });\n  };\n  for (var i = 0; i < checkboxes.length; i++) {\n    _loop2(i);\n  }\n  checkboxes[0].checked = true;\n  updatePrice(checkboxes[0]);\n}\nfunction updatePrice(checkbox) {\n  var servicePrice = 0,\n    addtionPrice = 59.99,\n    taxRate = 0.05,\n    totalPrice = 0,\n    tax = 0;\n  var priceBox = document.querySelector('.price-box');\n  if (priceBox) {\n    var serviceNameEl = priceBox.querySelector('.service-name');\n    var servicePriceEl = priceBox.querySelector('.service-price');\n    var taxEl = priceBox.querySelector('.tax');\n    var addtionPriceEl = priceBox.querySelector('.addtion-price');\n    var totalPriceEl = priceBox.querySelector('.total-price');\n    var servicePriceFinder = checkbox.parentElement.querySelector('.service-price').innerText;\n    servicePrice = Number(servicePriceFinder.substr(1));\n    tax = servicePrice * taxRate;\n    tax = Number(tax.toFixed(2));\n    totalPrice = Number(servicePrice + tax + addtionPrice).toFixed(2);\n    var serviceName = checkbox.parentElement.querySelector('h3').innerText;\n    serviceNameEl.innerText = serviceName;\n\n    // console.log(serviceName);\n\n    servicePriceEl.innerText = '$' + servicePrice;\n    addtionPriceEl.innerText = '$' + addtionPrice;\n    taxEl.innerText = '$' + tax;\n    totalPriceEl.innerText = '$' + totalPrice;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJiZnBUaXRsZXMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiYmZwQ29udGVudHMiLCJjaGVja2JveGVzIiwibGVuZ3RoIiwicXVlcnlTZWxlY3RvckFsbCIsInBhY2thZ2VDYXJkcyIsIl9sb29wIiwiaSIsIkFycmF5IiwiZnJvbSIsImVsIiwiaW5pdEJmcFRpdGxlIiwiaW5pdEJmcENvbnRlbnQiLCJlIiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJkaXNwbGF5IiwiaW5pdENoZWNrYm94ZXMiLCJmb3JFYWNoIiwiY2FyZCIsImNhcmRzT25DbGljayIsImNoZWNrZWQiLCJ1cGRhdGVQcmljZSIsImNoZWNrYm94IiwicXVlcnlTZWxlY3RvciIsImNoYW5nZSIsIkV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImluaXRDaGVja2JveCIsImNoZWNrYm94T25DbGljayIsIl9sb29wMiIsInN0b3BQcm9wYWdhdGlvbiIsInNlcnZpY2VQcmljZSIsImFkZHRpb25QcmljZSIsInRheFJhdGUiLCJ0b3RhbFByaWNlIiwidGF4IiwicHJpY2VCb3giLCJzZXJ2aWNlTmFtZUVsIiwic2VydmljZVByaWNlRWwiLCJ0YXhFbCIsImFkZHRpb25QcmljZUVsIiwidG90YWxQcmljZUVsIiwic2VydmljZVByaWNlRmluZGVyIiwicGFyZW50RWxlbWVudCIsImlubmVyVGV4dCIsIk51bWJlciIsInN1YnN0ciIsInRvRml4ZWQiLCJzZXJ2aWNlTmFtZSJdLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmVlbi8uL3NyYy9qcy9ib29raW5nRm9ybS5qcz83MzVlIl0sInNvdXJjZXNDb250ZW50IjpbImRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGJmcFRpdGxlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2Jvb2tpbmdmb3JtLXAtdGFiJyk7XG4gIGNvbnN0IGJmcENvbnRlbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYm9va2luZ2Zvcm0tcC1jb250ZW50Jyk7XG4gIGxldCBjaGVja2JveGVzID0gW107XG4gIGlmIChiZnBDb250ZW50cy5sZW5ndGggPiAwKVxuICAgIGNoZWNrYm94ZXMgPSBiZnBDb250ZW50c1swXS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFt0eXBlPWNoZWNrYm94XScpO1xuICBsZXQgcGFja2FnZUNhcmRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnAtY2FyZC1vbi1mb3JtJyk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBiZnBUaXRsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBBcnJheS5mcm9tKGJmcFRpdGxlcywgKGVsKSA9PiBpbml0QmZwVGl0bGUoZWwpKTtcbiAgICBBcnJheS5mcm9tKGJmcENvbnRlbnRzLCAoZWwpID0+IGluaXRCZnBDb250ZW50KGVsKSk7XG4gICAgYmZwVGl0bGVzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIEFycmF5LmZyb20oYmZwVGl0bGVzLCAoZWwpID0+IGluaXRCZnBUaXRsZShlbCkpO1xuICAgICAgQXJyYXkuZnJvbShiZnBDb250ZW50cywgKGVsKSA9PiBpbml0QmZwQ29udGVudChlbCkpO1xuICAgICAgLy8ga2VlcCBmb3Igc2xpZGVcbiAgICAgIC8vIGxldCBwYWdpbmF0aW9uRG90ID0gYmZwQ29udGVudHNbaV0ucXVlcnlTZWxlY3RvcihcIi5zcGxpZGVfX3BhZ2luYXRpb25cIik7XG4gICAgICAvLyBwYWdpbmF0aW9uRG90LnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICAgIGJmcFRpdGxlc1tpXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI2ZmZmZmZic7XG4gICAgICBiZnBDb250ZW50c1tpXS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgY2hlY2tib3hlcyA9IGJmcENvbnRlbnRzW2ldLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9Y2hlY2tib3hdJyk7XG4gICAgICBpbml0Q2hlY2tib3hlcyhjaGVja2JveGVzKTtcbiAgICB9KTtcbiAgfVxuICBpZiAoYmZwQ29udGVudHMubGVuZ3RoID4gMCkge1xuICAgIGJmcFRpdGxlc1swXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI2ZmZmZmZic7XG4gICAgYmZwQ29udGVudHNbMF0uc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgfVxuXG4gIHBhY2thZ2VDYXJkcy5mb3JFYWNoKChjYXJkKSA9PiB7XG4gICAgY2FyZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGNhcmRzT25DbGljayhjYXJkKSk7XG4gIH0pO1xuXG4gIGlmIChjaGVja2JveGVzLmxlbmd0aCA+IDApIHtcbiAgICBjaGVja2JveGVzWzBdLmNoZWNrZWQgPSB0cnVlO1xuICAgIGluaXRDaGVja2JveGVzKGNoZWNrYm94ZXMpO1xuICAgIHVwZGF0ZVByaWNlKGNoZWNrYm94ZXNbMF0pO1xuICB9XG59KTtcblxuZnVuY3Rpb24gY2FyZHNPbkNsaWNrKGNhcmQpIHtcbiAgbGV0IGNoZWNrYm94ID0gY2FyZC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPWNoZWNrYm94XScpO1xuICBjaGVja2JveC5jaGVja2VkID09IHRydWVcbiAgICA/IChjaGVja2JveC5jaGVja2VkID0gZmFsc2UpXG4gICAgOiAoY2hlY2tib3guY2hlY2tlZCA9IHRydWUpO1xuICBjb25zdCBjaGFuZ2UgPSBuZXcgRXZlbnQoJ2NoYW5nZScpO1xuICBjaGVja2JveC5kaXNwYXRjaEV2ZW50KGNoYW5nZSk7XG59XG5cbmZ1bmN0aW9uIGluaXRCZnBUaXRsZShlbCkge1xuICBlbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xufVxuZnVuY3Rpb24gaW5pdEJmcENvbnRlbnQoZWwpIHtcbiAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbn1cbmZ1bmN0aW9uIGluaXRDaGVja2JveChlbCkge1xuICBlbC5jaGVja2VkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNoZWNrYm94T25DbGljayhjaGVja2JveCkge31cblxuZnVuY3Rpb24gaW5pdENoZWNrYm94ZXMoY2hlY2tib3hlcykge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoZWNrYm94ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBBcnJheS5mcm9tKGNoZWNrYm94ZXMsIChlbCkgPT4gaW5pdENoZWNrYm94KGVsKSk7XG4gICAgY2hlY2tib3hlc1tpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0pO1xuICAgIGNoZWNrYm94ZXNbaV0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICAgIGlmIChjaGVja2JveGVzW2ldLmNoZWNrZWQpIHtcbiAgICAgICAgQXJyYXkuZnJvbShjaGVja2JveGVzLCAoZWwpID0+IGluaXRDaGVja2JveChlbCkpO1xuICAgICAgICB1cGRhdGVQcmljZShjaGVja2JveGVzW2ldKTtcbiAgICAgICAgY2hlY2tib3hlc1tpXS5jaGVja2VkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBjaGVja2JveGVzWzBdLmNoZWNrZWQgPSB0cnVlO1xuICB1cGRhdGVQcmljZShjaGVja2JveGVzWzBdKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlUHJpY2UoY2hlY2tib3gpIHtcbiAgbGV0IHNlcnZpY2VQcmljZSA9IDAsXG4gICAgYWRkdGlvblByaWNlID0gNTkuOTksXG4gICAgdGF4UmF0ZSA9IDAuMDUsXG4gICAgdG90YWxQcmljZSA9IDAsXG4gICAgdGF4ID0gMDtcbiAgbGV0IHByaWNlQm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByaWNlLWJveCcpO1xuICBpZiAocHJpY2VCb3gpIHtcbiAgICBsZXQgc2VydmljZU5hbWVFbCA9IHByaWNlQm94LnF1ZXJ5U2VsZWN0b3IoJy5zZXJ2aWNlLW5hbWUnKTtcbiAgICBsZXQgc2VydmljZVByaWNlRWwgPSBwcmljZUJveC5xdWVyeVNlbGVjdG9yKCcuc2VydmljZS1wcmljZScpO1xuICAgIGxldCB0YXhFbCA9IHByaWNlQm94LnF1ZXJ5U2VsZWN0b3IoJy50YXgnKTtcbiAgICBsZXQgYWRkdGlvblByaWNlRWwgPSBwcmljZUJveC5xdWVyeVNlbGVjdG9yKCcuYWRkdGlvbi1wcmljZScpO1xuICAgIGxldCB0b3RhbFByaWNlRWwgPSBwcmljZUJveC5xdWVyeVNlbGVjdG9yKCcudG90YWwtcHJpY2UnKTtcblxuICAgIGxldCBzZXJ2aWNlUHJpY2VGaW5kZXIgPVxuICAgICAgY2hlY2tib3gucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuc2VydmljZS1wcmljZScpLmlubmVyVGV4dDtcblxuICAgIHNlcnZpY2VQcmljZSA9IE51bWJlcihzZXJ2aWNlUHJpY2VGaW5kZXIuc3Vic3RyKDEpKTtcbiAgICB0YXggPSBzZXJ2aWNlUHJpY2UgKiB0YXhSYXRlO1xuICAgIHRheCA9IE51bWJlcih0YXgudG9GaXhlZCgyKSk7XG4gICAgdG90YWxQcmljZSA9IE51bWJlcihzZXJ2aWNlUHJpY2UgKyB0YXggKyBhZGR0aW9uUHJpY2UpLnRvRml4ZWQoMik7XG5cbiAgICBsZXQgc2VydmljZU5hbWUgPSBjaGVja2JveC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2gzJykuaW5uZXJUZXh0O1xuXG4gICAgc2VydmljZU5hbWVFbC5pbm5lclRleHQgPSBzZXJ2aWNlTmFtZTtcblxuICAgIC8vIGNvbnNvbGUubG9nKHNlcnZpY2VOYW1lKTtcblxuICAgIHNlcnZpY2VQcmljZUVsLmlubmVyVGV4dCA9ICckJyArIHNlcnZpY2VQcmljZTtcbiAgICBhZGR0aW9uUHJpY2VFbC5pbm5lclRleHQgPSAnJCcgKyBhZGR0aW9uUHJpY2U7XG4gICAgdGF4RWwuaW5uZXJUZXh0ID0gJyQnICsgdGF4O1xuICAgIHRvdGFsUHJpY2VFbC5pbm5lclRleHQgPSAnJCcgKyB0b3RhbFByaWNlO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFRLENBQUNDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLFlBQVk7RUFDeEQsSUFBTUMsU0FBUyxHQUFHRixRQUFRLENBQUNHLHNCQUFzQixDQUFDLG1CQUFtQixDQUFDO0VBQ3RFLElBQU1DLFdBQVcsR0FBR0osUUFBUSxDQUFDRyxzQkFBc0IsQ0FBQyx1QkFBdUIsQ0FBQztFQUM1RSxJQUFJRSxVQUFVLEdBQUcsRUFBRTtFQUNuQixJQUFJRCxXQUFXLENBQUNFLE1BQU0sR0FBRyxDQUFDLEVBQ3hCRCxVQUFVLEdBQUdELFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQ0csZ0JBQWdCLENBQUMsc0JBQXNCLENBQUM7RUFDdEUsSUFBSUMsWUFBWSxHQUFHUixRQUFRLENBQUNPLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDO0VBQUMsSUFBQUUsS0FBQSxZQUFBQSxNQUFBQyxDQUFBLEVBRXJCO0lBQ3pDQyxLQUFLLENBQUNDLElBQUksQ0FBQ1YsU0FBUyxFQUFFLFVBQUNXLEVBQUU7TUFBQSxPQUFLQyxZQUFZLENBQUNELEVBQUUsQ0FBQztJQUFBLEVBQUM7SUFDL0NGLEtBQUssQ0FBQ0MsSUFBSSxDQUFDUixXQUFXLEVBQUUsVUFBQ1MsRUFBRTtNQUFBLE9BQUtFLGNBQWMsQ0FBQ0YsRUFBRSxDQUFDO0lBQUEsRUFBQztJQUNuRFgsU0FBUyxDQUFDUSxDQUFDLENBQUMsQ0FBQ1QsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFVBQVVlLENBQUMsRUFBRTtNQUNsREwsS0FBSyxDQUFDQyxJQUFJLENBQUNWLFNBQVMsRUFBRSxVQUFDVyxFQUFFO1FBQUEsT0FBS0MsWUFBWSxDQUFDRCxFQUFFLENBQUM7TUFBQSxFQUFDO01BQy9DRixLQUFLLENBQUNDLElBQUksQ0FBQ1IsV0FBVyxFQUFFLFVBQUNTLEVBQUU7UUFBQSxPQUFLRSxjQUFjLENBQUNGLEVBQUUsQ0FBQztNQUFBLEVBQUM7TUFDbkQ7TUFDQTtNQUNBO01BQ0FYLFNBQVMsQ0FBQ1EsQ0FBQyxDQUFDLENBQUNPLEtBQUssQ0FBQ0MsZUFBZSxHQUFHLFNBQVM7TUFDOUNkLFdBQVcsQ0FBQ00sQ0FBQyxDQUFDLENBQUNPLEtBQUssQ0FBQ0UsT0FBTyxHQUFHLE1BQU07TUFDckNkLFVBQVUsR0FBR0QsV0FBVyxDQUFDTSxDQUFDLENBQUMsQ0FBQ0gsZ0JBQWdCLENBQUMsc0JBQXNCLENBQUM7TUFDcEVhLGNBQWMsQ0FBQ2YsVUFBVSxDQUFDO0lBQzVCLENBQUMsQ0FBQztFQUNKLENBQUM7RUFkRCxLQUFLLElBQUlLLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR1IsU0FBUyxDQUFDSSxNQUFNLEVBQUVJLENBQUMsRUFBRTtJQUFBRCxLQUFBLENBQUFDLENBQUE7RUFBQTtFQWV6QyxJQUFJTixXQUFXLENBQUNFLE1BQU0sR0FBRyxDQUFDLEVBQUU7SUFDMUJKLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQ2UsS0FBSyxDQUFDQyxlQUFlLEdBQUcsU0FBUztJQUM5Q2QsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDYSxLQUFLLENBQUNFLE9BQU8sR0FBRyxNQUFNO0VBQ3ZDO0VBRUFYLFlBQVksQ0FBQ2EsT0FBTyxDQUFDLFVBQUNDLElBQUksRUFBSztJQUM3QkEsSUFBSSxDQUFDckIsZ0JBQWdCLENBQUMsT0FBTyxFQUFFO01BQUEsT0FBTXNCLFlBQVksQ0FBQ0QsSUFBSSxDQUFDO0lBQUEsRUFBQztFQUMxRCxDQUFDLENBQUM7RUFFRixJQUFJakIsVUFBVSxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0lBQ3pCRCxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUNtQixPQUFPLEdBQUcsSUFBSTtJQUM1QkosY0FBYyxDQUFDZixVQUFVLENBQUM7SUFDMUJvQixXQUFXLENBQUNwQixVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDNUI7QUFDRixDQUFDLENBQUM7QUFFRixTQUFTa0IsWUFBWUEsQ0FBQ0QsSUFBSSxFQUFFO0VBQzFCLElBQUlJLFFBQVEsR0FBR0osSUFBSSxDQUFDSyxhQUFhLENBQUMsc0JBQXNCLENBQUM7RUFDekRELFFBQVEsQ0FBQ0YsT0FBTyxJQUFJLElBQUksR0FDbkJFLFFBQVEsQ0FBQ0YsT0FBTyxHQUFHLEtBQUssR0FDeEJFLFFBQVEsQ0FBQ0YsT0FBTyxHQUFHLElBQUs7RUFDN0IsSUFBTUksTUFBTSxHQUFHLElBQUlDLEtBQUssQ0FBQyxRQUFRLENBQUM7RUFDbENILFFBQVEsQ0FBQ0ksYUFBYSxDQUFDRixNQUFNLENBQUM7QUFDaEM7QUFFQSxTQUFTZCxZQUFZQSxDQUFDRCxFQUFFLEVBQUU7RUFDeEJBLEVBQUUsQ0FBQ0ksS0FBSyxDQUFDQyxlQUFlLEdBQUcsYUFBYTtBQUMxQztBQUNBLFNBQVNILGNBQWNBLENBQUNGLEVBQUUsRUFBRTtFQUMxQkEsRUFBRSxDQUFDSSxLQUFLLENBQUNFLE9BQU8sR0FBRyxNQUFNO0FBQzNCO0FBQ0EsU0FBU1ksWUFBWUEsQ0FBQ2xCLEVBQUUsRUFBRTtFQUN4QkEsRUFBRSxDQUFDVyxPQUFPLEdBQUcsS0FBSztBQUNwQjtBQUVBLFNBQVNRLGVBQWVBLENBQUNOLFFBQVEsRUFBRSxDQUFDO0FBRXBDLFNBQVNOLGNBQWNBLENBQUNmLFVBQVUsRUFBRTtFQUFBLElBQUE0QixNQUFBLFlBQUFBLE9BQUF2QixDQUFBLEVBQ1U7SUFDMUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDUCxVQUFVLEVBQUUsVUFBQ1EsRUFBRTtNQUFBLE9BQUtrQixZQUFZLENBQUNsQixFQUFFLENBQUM7SUFBQSxFQUFDO0lBQ2hEUixVQUFVLENBQUNLLENBQUMsQ0FBQyxDQUFDVCxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsVUFBQ2UsQ0FBQyxFQUFLO01BQzdDQSxDQUFDLENBQUNrQixlQUFlLENBQUMsQ0FBQztJQUNyQixDQUFDLENBQUM7SUFDRjdCLFVBQVUsQ0FBQ0ssQ0FBQyxDQUFDLENBQUNULGdCQUFnQixDQUFDLFFBQVEsRUFBRSxVQUFDZSxDQUFDLEVBQUs7TUFDOUMsSUFBSVgsVUFBVSxDQUFDSyxDQUFDLENBQUMsQ0FBQ2MsT0FBTyxFQUFFO1FBQ3pCYixLQUFLLENBQUNDLElBQUksQ0FBQ1AsVUFBVSxFQUFFLFVBQUNRLEVBQUU7VUFBQSxPQUFLa0IsWUFBWSxDQUFDbEIsRUFBRSxDQUFDO1FBQUEsRUFBQztRQUNoRFksV0FBVyxDQUFDcEIsVUFBVSxDQUFDSyxDQUFDLENBQUMsQ0FBQztRQUMxQkwsVUFBVSxDQUFDSyxDQUFDLENBQUMsQ0FBQ2MsT0FBTyxHQUFHLElBQUk7TUFDOUIsQ0FBQyxNQUFNO1FBQ0w7TUFDRjtJQUNGLENBQUMsQ0FBQztFQUNKLENBQUM7RUFkRCxLQUFLLElBQUlkLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0wsVUFBVSxDQUFDQyxNQUFNLEVBQUVJLENBQUMsRUFBRTtJQUFBdUIsTUFBQSxDQUFBdkIsQ0FBQTtFQUFBO0VBZTFDTCxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUNtQixPQUFPLEdBQUcsSUFBSTtFQUM1QkMsV0FBVyxDQUFDcEIsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVCO0FBRUEsU0FBU29CLFdBQVdBLENBQUNDLFFBQVEsRUFBRTtFQUM3QixJQUFJUyxZQUFZLEdBQUcsQ0FBQztJQUNsQkMsWUFBWSxHQUFHLEtBQUs7SUFDcEJDLE9BQU8sR0FBRyxJQUFJO0lBQ2RDLFVBQVUsR0FBRyxDQUFDO0lBQ2RDLEdBQUcsR0FBRyxDQUFDO0VBQ1QsSUFBSUMsUUFBUSxHQUFHeEMsUUFBUSxDQUFDMkIsYUFBYSxDQUFDLFlBQVksQ0FBQztFQUNuRCxJQUFJYSxRQUFRLEVBQUU7SUFDWixJQUFJQyxhQUFhLEdBQUdELFFBQVEsQ0FBQ2IsYUFBYSxDQUFDLGVBQWUsQ0FBQztJQUMzRCxJQUFJZSxjQUFjLEdBQUdGLFFBQVEsQ0FBQ2IsYUFBYSxDQUFDLGdCQUFnQixDQUFDO0lBQzdELElBQUlnQixLQUFLLEdBQUdILFFBQVEsQ0FBQ2IsYUFBYSxDQUFDLE1BQU0sQ0FBQztJQUMxQyxJQUFJaUIsY0FBYyxHQUFHSixRQUFRLENBQUNiLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQztJQUM3RCxJQUFJa0IsWUFBWSxHQUFHTCxRQUFRLENBQUNiLGFBQWEsQ0FBQyxjQUFjLENBQUM7SUFFekQsSUFBSW1CLGtCQUFrQixHQUNwQnBCLFFBQVEsQ0FBQ3FCLGFBQWEsQ0FBQ3BCLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDcUIsU0FBUztJQUVsRWIsWUFBWSxHQUFHYyxNQUFNLENBQUNILGtCQUFrQixDQUFDSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkRYLEdBQUcsR0FBR0osWUFBWSxHQUFHRSxPQUFPO0lBQzVCRSxHQUFHLEdBQUdVLE1BQU0sQ0FBQ1YsR0FBRyxDQUFDWSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUJiLFVBQVUsR0FBR1csTUFBTSxDQUFDZCxZQUFZLEdBQUdJLEdBQUcsR0FBR0gsWUFBWSxDQUFDLENBQUNlLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFFakUsSUFBSUMsV0FBVyxHQUFHMUIsUUFBUSxDQUFDcUIsYUFBYSxDQUFDcEIsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDcUIsU0FBUztJQUV0RVAsYUFBYSxDQUFDTyxTQUFTLEdBQUdJLFdBQVc7O0lBRXJDOztJQUVBVixjQUFjLENBQUNNLFNBQVMsR0FBRyxHQUFHLEdBQUdiLFlBQVk7SUFDN0NTLGNBQWMsQ0FBQ0ksU0FBUyxHQUFHLEdBQUcsR0FBR1osWUFBWTtJQUM3Q08sS0FBSyxDQUFDSyxTQUFTLEdBQUcsR0FBRyxHQUFHVCxHQUFHO0lBQzNCTSxZQUFZLENBQUNHLFNBQVMsR0FBRyxHQUFHLEdBQUdWLFVBQVU7RUFDM0M7QUFDRiIsImZpbGUiOiIuL3NyYy9qcy9ib29raW5nRm9ybS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/bookingForm.js\n");

/***/ }),

/***/ "./src/js/estimate.js":
/*!****************************!*\
  !*** ./src/js/estimate.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   reposition: () => (/* binding */ reposition)\n/* harmony export */ });\nvar headerHeight;\nvar reposition = function reposition() {\n  console.log('reposition');\n  headerHeight || (headerHeight = document.querySelector('#buzz-header').offsetHeight + 50);\n  setTimeout(function () {\n    window.scrollBy(0, -headerHeight);\n  }, 50);\n};\nvar estimateForm = document.getElementById('EstimateEstimateForm');\nif (estimateForm) {\n  var formSubmitButton = estimateForm.querySelector('button[type=\"submit\"]');\n  formSubmitButton.addEventListener('click', function (e) {\n    formSubmitButton.disabled = true;\n    formSubmitButton.innerText = 'Submitting...';\n    if (!estimateForm.checkValidity()) {\n      formSubmitButton.disabled = false;\n      formSubmitButton.innerText = 'Submit';\n      reposition();\n      return;\n    }\n    e.preventDefault();\n    estimateForm.submit();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvZXN0aW1hdGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLFlBQVk7QUFDVCxJQUFNQyxVQUFVLEdBQUcsU0FBYkEsVUFBVUEsQ0FBQSxFQUFlO0VBQ3BDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxZQUFZLENBQUM7RUFDekJILFlBQVksS0FDVEEsWUFBWSxHQUFHSSxRQUFRLENBQUNDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQ0MsWUFBWSxHQUFHLEVBQUUsQ0FBQztFQUMzRUMsVUFBVSxDQUFDLFlBQVk7SUFDckJDLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDVCxZQUFZLENBQUM7RUFDbkMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUNSLENBQUM7QUFFRCxJQUFNVSxZQUFZLEdBQUdOLFFBQVEsQ0FBQ08sY0FBYyxDQUFDLHNCQUFzQixDQUFDO0FBRXBFLElBQUlELFlBQVksRUFBRTtFQUNoQixJQUFNRSxnQkFBZ0IsR0FBR0YsWUFBWSxDQUFDTCxhQUFhLENBQUMsdUJBQXVCLENBQUM7RUFDNUVPLGdCQUFnQixDQUFDQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsVUFBVUMsQ0FBQyxFQUFFO0lBQ3RERixnQkFBZ0IsQ0FBQ0csUUFBUSxHQUFHLElBQUk7SUFDaENILGdCQUFnQixDQUFDSSxTQUFTLEdBQUcsZUFBZTtJQUM1QyxJQUFJLENBQUNOLFlBQVksQ0FBQ08sYUFBYSxDQUFDLENBQUMsRUFBRTtNQUNqQ0wsZ0JBQWdCLENBQUNHLFFBQVEsR0FBRyxLQUFLO01BQ2pDSCxnQkFBZ0IsQ0FBQ0ksU0FBUyxHQUFHLFFBQVE7TUFDckNmLFVBQVUsQ0FBQyxDQUFDO01BQ1o7SUFDRjtJQUNBYSxDQUFDLENBQUNJLGNBQWMsQ0FBQyxDQUFDO0lBQ2xCUixZQUFZLENBQUNTLE1BQU0sQ0FBQyxDQUFDO0VBQ3ZCLENBQUMsQ0FBQztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JlZW4vLi9zcmMvanMvZXN0aW1hdGUuanM/ZGNjYyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgaGVhZGVySGVpZ2h0O1xuZXhwb3J0IGNvbnN0IHJlcG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnNvbGUubG9nKCdyZXBvc2l0aW9uJyk7XG4gIGhlYWRlckhlaWdodCB8fFxuICAgIChoZWFkZXJIZWlnaHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYnV6ei1oZWFkZXInKS5vZmZzZXRIZWlnaHQgKyA1MCk7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHdpbmRvdy5zY3JvbGxCeSgwLCAtaGVhZGVySGVpZ2h0KTtcbiAgfSwgNTApO1xufTtcblxuY29uc3QgZXN0aW1hdGVGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0VzdGltYXRlRXN0aW1hdGVGb3JtJyk7XG5cbmlmIChlc3RpbWF0ZUZvcm0pIHtcbiAgY29uc3QgZm9ybVN1Ym1pdEJ1dHRvbiA9IGVzdGltYXRlRm9ybS5xdWVyeVNlbGVjdG9yKCdidXR0b25bdHlwZT1cInN1Ym1pdFwiXScpO1xuICBmb3JtU3VibWl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICBmb3JtU3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICBmb3JtU3VibWl0QnV0dG9uLmlubmVyVGV4dCA9ICdTdWJtaXR0aW5nLi4uJztcbiAgICBpZiAoIWVzdGltYXRlRm9ybS5jaGVja1ZhbGlkaXR5KCkpIHtcbiAgICAgIGZvcm1TdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIGZvcm1TdWJtaXRCdXR0b24uaW5uZXJUZXh0ID0gJ1N1Ym1pdCc7XG4gICAgICByZXBvc2l0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlc3RpbWF0ZUZvcm0uc3VibWl0KCk7XG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbImhlYWRlckhlaWdodCIsInJlcG9zaXRpb24iLCJjb25zb2xlIiwibG9nIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwib2Zmc2V0SGVpZ2h0Iiwic2V0VGltZW91dCIsIndpbmRvdyIsInNjcm9sbEJ5IiwiZXN0aW1hdGVGb3JtIiwiZ2V0RWxlbWVudEJ5SWQiLCJmb3JtU3VibWl0QnV0dG9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJkaXNhYmxlZCIsImlubmVyVGV4dCIsImNoZWNrVmFsaWRpdHkiLCJwcmV2ZW50RGVmYXVsdCIsInN1Ym1pdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/estimate.js\n");

/***/ }),

/***/ "./src/js/forms/bb-quote.js":
/*!**********************************!*\
  !*** ./src/js/forms/bb-quote.js ***!
  \**********************************/
/***/ (() => {

eval("var quoteFormContainer = document.getElementById('bb-quote-form-container');\nif (quoteFormContainer) {\n  var updateBookingTotals = function updateBookingTotals() {\n    var taxable = true;\n    var package_price = 0;\n    var addon_price = 0;\n    var subtotal = 0;\n    var selected_package = $('#package-select').find('option:selected');\n    if (selected_package.val() != '') {\n      package_price = parseFloat(selected_package.data('price'));\n    }\n    $('.add-ons.active').find('input[type=checkbox]:checked').each(function (i, el) {\n      addon_price += parseFloat($(this).data('price'));\n    });\n    subtotal = package_price + addon_price;\n    $('#subtotal').val(subtotal);\n    $('#subtotal-label').html((subtotal / 100).toFixed(2));\n    if (taxable) {\n      var tax = Math.round(subtotal * 0.05);\n      $('#gst').val(tax);\n      $('#gst-label').html((tax / 100).toFixed(2));\n    } else {\n      var zero = 0;\n      $('#gst').val(zero);\n      $('#gst-label').html((zero / 100).toFixed(2));\n    }\n    var total = subtotal + tax;\n    $('#total').val(total);\n    $('#total-label').html((total / 100).toFixed(2));\n  };\n  var createToken = function createToken() {\n    var additional_data = {\n      address_line1: document.getElementById('OrderBillingAddress').value,\n      name: document.getElementById('card-holder-name').value,\n      address_city: document.getElementById('OrderBillingCity').value,\n      address_state: document.getElementById('OrderBillingProvince').value,\n      address_zip: document.getElementById('OrderBillingPostal').value\n    };\n    stripe.createToken(card_num, additional_data).then(function (result) {\n      if (result.error) {\n        $('#error-wrapper').append('<p>' + result.error.message + '</p>').show();\n        $('html,body').animate({\n          scrollTop: 0\n        }, 'slow');\n        $('#submit-button').prop('disabled', false);\n        $('#submit-button').text($('#submit-button').data('default-label'));\n      } else {\n        stripeTokenHandler(result.token);\n      }\n    });\n  };\n  var stripeTokenHandler = function stripeTokenHandler(token) {\n    var token_el = document.getElementById('stripe_token');\n    if (token_el !== null) {\n      token_el.parentNode.removeChild(token_el);\n    }\n    var hiddenInput = document.createElement('input');\n    hiddenInput.setAttribute('id', 'stripe_token');\n    hiddenInput.setAttribute('type', 'hidden');\n    hiddenInput.setAttribute('name', 'stripeToken');\n    hiddenInput.setAttribute('value', token.id);\n    bookForm.appendChild(hiddenInput);\n\n    //   const formData = new FormData(bookForm);\n\n    // for (let [key, value] of formData.entries()) {\n    //     console.log(key, value);\n    // }\n\n    bookForm.submit();\n  };\n  var customerSubmission = true;\n  var bookForm = document.getElementById('book-form');\n  if (typeof pca !== 'undefined') {\n    var fields = [{\n      element: 'BookingAddress',\n      field: 'Line1'\n    }, {\n      element: 'BookingCity',\n      field: 'City',\n      mode: pca.fieldMode.POPULATE\n    }, {\n      element: 'BookingProvince',\n      field: 'ProvinceName',\n      mode: pca.fieldMode.POPULATE\n    }, {\n      element: 'BookingPostal',\n      field: 'PostalCode'\n    }];\n    var options = {\n      key: 'rx64-hf58-kw39-ww95'\n    };\n    var control = new pca.Address(fields, options);\n  }\n  var stripePublicKey = bookForm.dataset.stripePublicKey;\n  var stripe = Stripe(stripePublicKey);\n  var elements = stripe.elements();\n  var card_num = elements.create('card', {\n    style: {\n      base: {\n        fontFamily: '\"museo-sans\",\"Helvetica Neue\",Helvetica,Roboto,Arial,sans-serif',\n        fontSize: '14px'\n      },\n      invalid: {\n        color: 'red'\n      }\n    },\n    hidePostalCode: true\n  });\n  card_num.mount('#card_num');\n\n  // $('#package-select').trigger('change');\n  $('.addon-checkbox').on('click', updateBookingTotals);\n\n  //When an invalid field is selected remove the styling\n  $('.form-error').on('click touch', function () {\n    $(this).removeClass('form-error');\n  });\n  var managerSubmitButton = document.getElementById('submit-button-manager');\n  if (managerSubmitButton) {\n    managerSubmitButton.addEventListener('click', function () {\n      customerSubmission = false;\n      bookForm.setAttribute('action', '/transfer-to-manager');\n    });\n  }\n  $('#book-form').submit(function (event) {\n    event.preventDefault();\n    var validated = true;\n    $('#error-wrapper').html('');\n\n    // check for at least one package or service\n    if ($('#subtotal').val() == 0) {\n      $('#error-wrapper').append('<p>Please select at least one Package or Service.</p>').show();\n      validated = false;\n    }\n\n    // Check Card Holder Name field\n    if (customerSubmission) {\n      if ($('#card-holder-name').val() == '') {\n        $('#error-wrapper').append('<p>Please enter the Card Holder Name.</p>').show();\n        validated = false;\n      }\n    }\n    if (!validated) {\n      $('html,body').animate({\n        scrollTop: 0\n      }, 'slow');\n    } else {\n      // Start Stripe submission (if not a manual booking)\n      if (!$('#invalidZip').prop('checked')) {\n        // Disable the submit button to prevent repeated clicks\n        $('#submit-button').prop('disabled', true);\n        $('#submit-button').html('Processing&hellip;');\n        event.preventDefault();\n        if (!customerSubmission) {\n          // bookForm.submit();\n          return;\n        }\n        createToken();\n      } else {\n        // Manual Booking\n        // Disable the submit button to prevent repeated clicks on manual booking\n        $('#submit-button').prop('disabled', true);\n        $('#submit-button').html('Processing&hellip;');\n      }\n    }\n  });\n}\n\n// quote to order form finish//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/forms/bb-quote.js\n");

/***/ }),

/***/ "./src/js/forms/gd-book.js":
/*!*********************************!*\
  !*** ./src/js/forms/gd-book.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_address__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/address */ \"./src/js/utils/address.js\");\n/* harmony import */ var _utils_anchor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/anchor */ \"./src/js/utils/anchor.js\");\n/* harmony import */ var _utils_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/forms */ \"./src/js/utils/forms.js\");\n/* harmony import */ var _utils_stripe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/stripe */ \"./src/js/utils/stripe.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\n\nvar bookForm = document.querySelector('form#book-form-greendrop');\nif (bookForm) {\n  var initializeForm = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var locationSelect, managerPackagesResponse, managerPackages, fillInAddress, _setUpStripe, _setUpStripe2, stripe, card, calculateTotals, paymentSplitRadios, updatePriceOptionAndUpdatePriceBox, phoneInput, promoCodeInput, promoCodeInputButton, checkConditionalNotification, additionalCheckboxes, submitButton;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            checkConditionalNotification = function _checkConditionalNoti() {\n              console.log('checking notification');\n              var sprinklers = $('#has_underground_sprinklers').prop('checked');\n              var dogs = $('#has_dog').prop('checked');\n              var gate = $('#has_locked_gate').prop('checked');\n              if (sprinklers || dogs || gate) {\n                $('#notification-select').show();\n              } else {\n                $('#notification-select').children('input[type=checkbox]').prop('checked', false);\n                $('#notification-select').hide();\n              }\n            };\n            updatePriceOptionAndUpdatePriceBox = function _updatePriceOptionAnd() {\n              console.log('updating price option');\n              var splitPriceInformation = document.querySelectorAll('.split-payment-information-wrapper');\n              var singlePaymentInformation = document.querySelectorAll('.single-payment-information-wrapper');\n              splitPriceInformation.forEach(function (el) {\n                return el.classList.toggle('hidden');\n              });\n              singlePaymentInformation.forEach(function (el) {\n                return el.classList.toggle('hidden');\n              });\n              calculateTotals();\n            };\n            calculateTotals = function _calculateTotals() {\n              (0,_utils_forms__WEBPACK_IMPORTED_MODULE_2__.updateBookingTotals)(managerPackages);\n            };\n            fillInAddress = function _fillInAddress(autocomplete) {\n              // Get the place details from the autocomplete object.\n              var place = autocomplete.getPlace();\n              var address1 = '';\n              var postcode = '';\n\n              // Get each component of the address from the place details,\n              // and then fill-in the corresponding field on the form.\n              // place.address_components are google.maps.GeocoderAddressComponent objects\n              // which are documented at http://goo.gle/3l5i5Mr\n              var _iterator = _createForOfIteratorHelper(place.address_components),\n                _step;\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var component = _step.value;\n                  // @ts-ignore remove once typings fixed\n                  var componentType = component.types[0];\n                  switch (componentType) {\n                    case 'street_number':\n                      {\n                        address1 = \"\".concat(component.long_name, \" \").concat(address1);\n                        break;\n                      }\n                    case 'route':\n                      {\n                        address1 += component.short_name;\n                        break;\n                      }\n                    case 'postal_code':\n                      {\n                        postcode = \"\".concat(component.long_name).concat(postcode);\n                        break;\n                      }\n                    case 'postal_code_suffix':\n                      {\n                        postcode = \"\".concat(postcode, \"-\").concat(component.long_name);\n                        break;\n                      }\n                    case 'locality':\n                      // city\n                      document.querySelector('#OrderCity').value = component.long_name;\n                      document.querySelector('#OrderBillingCity').value = component.long_name;\n                      break;\n                    case 'administrative_area_level_1':\n                      {\n                        // province\n                        document.querySelector('#OrderProvince').value = component.short_name;\n                        document.querySelector('#OrderBillingProvince').value = component.short_name;\n                        break;\n                      }\n                  }\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n              document.querySelector('#manual-address').style.display = 'block';\n              document.querySelector('#manual-address-billing-notice').style.display = 'block';\n              document.querySelector('#OrderAddress').value = address1;\n              document.querySelector('#OrderNewBillingAddress').value = address1;\n              document.querySelector('#OrderPostal').value = postcode;\n              document.querySelector('#OrderNewBillingPostal').value = postcode;\n              document.querySelector('#OrderOrderNotes').focus();\n            };\n            locationSelect = document.querySelector('#OrderLocation');\n            _context3.next = 7;\n            return fetch(\"/actions/green-drop-feedme-module/default/packages?location_id=\".concat(locationSelect.value));\n          case 7:\n            managerPackagesResponse = _context3.sent;\n            _context3.next = 10;\n            return managerPackagesResponse.json();\n          case 10:\n            managerPackages = _context3.sent;\n            (0,_utils_address__WEBPACK_IMPORTED_MODULE_0__.setUpAddressAutoComplete)(fillInAddress);\n            _setUpStripe = (0,_utils_stripe__WEBPACK_IMPORTED_MODULE_3__.setUpStripe)(bookForm), _setUpStripe2 = _slicedToArray(_setUpStripe, 2), stripe = _setUpStripe2[0], card = _setUpStripe2[1];\n            (0,_utils_forms__WEBPACK_IMPORTED_MODULE_2__.resetSplitPayment)(managerPackages);\n            calculateTotals();\n            bookForm.querySelector('#OrderLocation').addEventListener('change', _utils_forms__WEBPACK_IMPORTED_MODULE_2__.changeBookingFormLocation);\n            bookForm.querySelectorAll('input[type=radio].select-package').forEach(function (input) {\n              return input.addEventListener('change', function () {\n                (0,_utils_forms__WEBPACK_IMPORTED_MODULE_2__.resetAddons)();\n                (0,_utils_forms__WEBPACK_IMPORTED_MODULE_2__.resetSplitPayment)(managerPackages);\n                calculateTotals();\n              });\n            });\n            bookForm.querySelectorAll('input[type=checkbox].addon_select').forEach(function (input) {\n              return input.addEventListener('change', calculateTotals);\n            });\n            paymentSplitRadios = Array.from(document.getElementsByName('payment-plan'));\n            paymentSplitRadios.forEach(function (radio) {\n              return radio.addEventListener('change', updatePriceOptionAndUpdatePriceBox);\n            });\n            phoneInput = bookForm.querySelector('#OrderPhone');\n            phoneInput.addEventListener('input', function () {\n              (0,_utils_forms__WEBPACK_IMPORTED_MODULE_2__.phoneNumberInputRestrict)(phoneInput);\n            });\n            promoCodeInput = bookForm.querySelector('#promo_code_input');\n            promoCodeInputButton = bookForm.querySelector('#promo_code_button');\n            promoCodeInputButton.addEventListener('click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n              var promoCode, fetchUrl, promoCodeResponse, promoCodeData, promoWrapper, html;\n              return _regeneratorRuntime().wrap(function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    promoCode = promoCodeInput.value;\n                    fetchUrl = \"/actions/promotions-module/default/promotion?promo_code=\".concat(promoCode, \"&location_id=\").concat(locationSelect.value);\n                    _context.next = 4;\n                    return fetch(fetchUrl);\n                  case 4:\n                    promoCodeResponse = _context.sent;\n                    _context.next = 7;\n                    return promoCodeResponse.json();\n                  case 7:\n                    promoCodeData = _context.sent;\n                    if (promoCodeData.error) {\n                      alert(promoCodeData.error);\n                    } else {\n                      promoWrapper = bookForm.querySelector('#promo_wrapper');\n                      html = promoCodeData.html;\n                      promoWrapper.innerHTML = html;\n                      calculateTotals();\n                    }\n                  case 9:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _callee);\n            })));\n            $('#same_as_service').on('change', function () {\n              if ($('#same_as_service').is(':checked')) {\n                $('#OrderNewBillingAddress').val($('#OrderAddress').val());\n                $('#OrderBillingCity').val($('#OrderCity').val());\n                $('#OrderBillingProvince').val($('#OrderProvince').val());\n                $('#OrderNewBillingPostal').val($('#OrderPostal').val());\n                $('#OrderNewBillingAddress').prop('readonly', true);\n                $('#OrderBillingCity').prop('readonly', true);\n                $('#OrderBillingProvince').prop('readonly', true);\n                $('#OrderNewBillingPostal').prop('readonly', true);\n              } else {\n                $('#OrderNewBillingAddress').val('');\n                $('#OrderBillingCity').val('');\n                $('#OrderBillingProvince').val('');\n                $('#OrderNewBillingPostal').val('');\n                $('#OrderNewBillingAddress').prop('readonly', false);\n                $('#OrderBillingCity').prop('readonly', false);\n                $('#OrderBillingProvince').prop('readonly', false);\n                $('#OrderNewBillingPostal').prop('readonly', false);\n                $('#manual-address-billing-notice').animate({\n                  height: 'show'\n                });\n              }\n            });\n            additionalCheckboxes = bookForm.querySelectorAll('#additional_information_checkboxes input[type=checkbox]');\n            additionalCheckboxes.forEach(function (box) {\n              return box.addEventListener('change', checkConditionalNotification);\n            });\n            submitButton = bookForm.querySelector('#submit-button');\n            submitButton.addEventListener('click', /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(event) {\n                var isValidForm, stripeTokenResponse, stipeTokenId, stripTokenInput;\n                return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      bookForm.querySelectorAll('.error-message').forEach(function (el) {\n                        return el.remove();\n                      });\n                      if (!(bookForm.checkValidity() === false)) {\n                        _context2.next = 4;\n                        break;\n                      }\n                      (0,_utils_anchor__WEBPACK_IMPORTED_MODULE_1__.repositionFromFixedHeader)('#greendrop-header');\n                      return _context2.abrupt(\"return\");\n                    case 4:\n                      event.preventDefault();\n                      document.querySelector('#manual-address').style.display = 'block';\n                      document.querySelector('#manual-address-billing-notice').style.display = 'block';\n                      submitButton.disabled = true;\n                      submitButton.value = 'processing...';\n                      isValidForm = (0,_utils_forms__WEBPACK_IMPORTED_MODULE_2__.validateBookingForm)();\n                      if (!isValidForm) {\n                        submitButton.disabled = false;\n                        submitButton.value = 'failed processing, review for and re-submit';\n                      }\n                      _context2.next = 13;\n                      return (0,_utils_stripe__WEBPACK_IMPORTED_MODULE_3__.requestStripeToken)(stripe, card);\n                    case 13:\n                      stripeTokenResponse = _context2.sent;\n                      if (stripeTokenResponse.error) {\n                        (0,_utils_stripe__WEBPACK_IMPORTED_MODULE_3__.createStripeErrorMessage)(stripeTokenResponse.error.message, '#card-details');\n                        submitButton.disabled = false;\n                        submitButton.value = 'Process Order';\n                      }\n                      stipeTokenId = stripeTokenResponse.token.id;\n                      stripTokenInput = (0,_utils_stripe__WEBPACK_IMPORTED_MODULE_3__.createStripeTokenInput)(stipeTokenId);\n                      bookForm.appendChild(stripTokenInput);\n                      bookForm.submit();\n                    case 19:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }, _callee2);\n              }));\n              return function (_x) {\n                return _ref3.apply(this, arguments);\n              };\n            }());\n          case 30:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return function initializeForm() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  initializeForm();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/forms/gd-book.js\n");

/***/ }),

/***/ "./src/js/forms/gd-estimate.js":
/*!*************************************!*\
  !*** ./src/js/forms/gd-estimate.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_address__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/address */ \"./src/js/utils/address.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\nvar estimateForm = document.querySelector('form#greendrop-estimate');\nif (estimateForm) {\n  var fillInAddress = function fillInAddress(autocomplete) {\n    // Get the place details from the autocomplete object.\n    var place = autocomplete.getPlace();\n    var address1 = '';\n    var postcode = '';\n\n    // Get each component of the address from the place details,\n    // and then fill-in the corresponding field on the form.\n    // place.address_components are google.maps.GeocoderAddressComponent objects\n    // which are documented at http://goo.gle/3l5i5Mr\n    var _iterator = _createForOfIteratorHelper(place.address_components),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var component = _step.value;\n        // @ts-ignore remove once typings fixed\n        var componentType = component.types[0];\n        switch (componentType) {\n          case 'street_number':\n            {\n              address1 = \"\".concat(component.long_name, \" \").concat(address1);\n              break;\n            }\n          case 'route':\n            {\n              address1 += component.short_name;\n              break;\n            }\n          case 'postal_code':\n            {\n              postcode = \"\".concat(component.long_name).concat(postcode);\n              break;\n            }\n          case 'postal_code_suffix':\n            {\n              postcode = \"\".concat(postcode, \"-\").concat(component.long_name);\n              break;\n            }\n          case 'locality':\n            // city\n            document.querySelector('#EstimateCity').value = component.long_name;\n            break;\n          case 'administrative_area_level_1':\n            {\n              // province\n              document.querySelector('#EstimateProvince').value = component.short_name;\n              break;\n            }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    document.querySelector('#EstimateAddress').value = address1;\n    document.querySelector('#EstimatePostal').value = postcode;\n    // After filling the form with address components from the Autocomplete\n    // prediction, set cursor focus on the second address line to encourage\n    // entry of subpremise information such as apartment, unit, or floor number.\n    document.querySelector('#EstimateMessage').focus();\n  };\n  (0,_utils_address__WEBPACK_IMPORTED_MODULE_0__.setUpAddressAutoComplete)(fillInAddress);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvZm9ybXMvZ2QtZXN0aW1hdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEQ7QUFFNUQsSUFBTUMsWUFBWSxHQUFHQyxRQUFRLENBQUNDLGFBQWEsQ0FBQyx5QkFBeUIsQ0FBQztBQUN0RSxJQUFJRixZQUFZLEVBQUU7RUFBQSxJQUNQRyxhQUFhLEdBQXRCLFNBQVNBLGFBQWFBLENBQUNDLFlBQVksRUFBRTtJQUNuQztJQUNBLElBQU1DLEtBQUssR0FBR0QsWUFBWSxDQUFDRSxRQUFRLENBQUMsQ0FBQztJQUNyQyxJQUFJQyxRQUFRLEdBQUcsRUFBRTtJQUNqQixJQUFJQyxRQUFRLEdBQUcsRUFBRTs7SUFFakI7SUFDQTtJQUNBO0lBQ0E7SUFBQSxJQUFBQyxTQUFBLEdBQUFDLDBCQUFBLENBQ3dCTCxLQUFLLENBQUNNLGtCQUFrQjtNQUFBQyxLQUFBO0lBQUE7TUFBaEQsS0FBQUgsU0FBQSxDQUFBSSxDQUFBLE1BQUFELEtBQUEsR0FBQUgsU0FBQSxDQUFBSyxDQUFBLElBQUFDLElBQUEsR0FBa0Q7UUFBQSxJQUF2Q0MsU0FBUyxHQUFBSixLQUFBLENBQUFLLEtBQUE7UUFDbEI7UUFDQSxJQUFNQyxhQUFhLEdBQUdGLFNBQVMsQ0FBQ0csS0FBSyxDQUFDLENBQUMsQ0FBQztRQUV4QyxRQUFRRCxhQUFhO1VBQ25CLEtBQUssZUFBZTtZQUFFO2NBQ3BCWCxRQUFRLE1BQUFhLE1BQUEsQ0FBTUosU0FBUyxDQUFDSyxTQUFTLE9BQUFELE1BQUEsQ0FBSWIsUUFBUSxDQUFFO2NBQy9DO1lBQ0Y7VUFFQSxLQUFLLE9BQU87WUFBRTtjQUNaQSxRQUFRLElBQUlTLFNBQVMsQ0FBQ00sVUFBVTtjQUNoQztZQUNGO1VBRUEsS0FBSyxhQUFhO1lBQUU7Y0FDbEJkLFFBQVEsTUFBQVksTUFBQSxDQUFNSixTQUFTLENBQUNLLFNBQVMsRUFBQUQsTUFBQSxDQUFHWixRQUFRLENBQUU7Y0FDOUM7WUFDRjtVQUVBLEtBQUssb0JBQW9CO1lBQUU7Y0FDekJBLFFBQVEsTUFBQVksTUFBQSxDQUFNWixRQUFRLE9BQUFZLE1BQUEsQ0FBSUosU0FBUyxDQUFDSyxTQUFTLENBQUU7Y0FDL0M7WUFDRjtVQUNBLEtBQUssVUFBVTtZQUNiO1lBQ0FwQixRQUFRLENBQUNDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQ2UsS0FBSyxHQUFHRCxTQUFTLENBQUNLLFNBQVM7WUFDbkU7VUFDRixLQUFLLDZCQUE2QjtZQUFFO2NBQ2xDO2NBQ0FwQixRQUFRLENBQUNDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDZSxLQUFLLEdBQy9DRCxTQUFTLENBQUNNLFVBQVU7Y0FDdEI7WUFDRjtRQUNGO01BQ0Y7SUFBQyxTQUFBQyxHQUFBO01BQUFkLFNBQUEsQ0FBQWUsQ0FBQSxDQUFBRCxHQUFBO0lBQUE7TUFBQWQsU0FBQSxDQUFBZ0IsQ0FBQTtJQUFBO0lBRUR4QixRQUFRLENBQUNDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDZSxLQUFLLEdBQUdWLFFBQVE7SUFDM0ROLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGlCQUFpQixDQUFDLENBQUNlLEtBQUssR0FBR1QsUUFBUTtJQUMxRDtJQUNBO0lBQ0E7SUFDQVAsUUFBUSxDQUFDQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsQ0FBQ3dCLEtBQUssQ0FBQyxDQUFDO0VBQ3BELENBQUM7RUFFRDNCLHdFQUF3QixDQUFDSSxhQUFhLENBQUM7QUFDekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmVlbi8uL3NyYy9qcy9mb3Jtcy9nZC1lc3RpbWF0ZS5qcz9kOGIxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNldFVwQWRkcmVzc0F1dG9Db21wbGV0ZSB9IGZyb20gJy4uL3V0aWxzL2FkZHJlc3MnO1xuXG5jb25zdCBlc3RpbWF0ZUZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdmb3JtI2dyZWVuZHJvcC1lc3RpbWF0ZScpO1xuaWYgKGVzdGltYXRlRm9ybSkge1xuICBmdW5jdGlvbiBmaWxsSW5BZGRyZXNzKGF1dG9jb21wbGV0ZSkge1xuICAgIC8vIEdldCB0aGUgcGxhY2UgZGV0YWlscyBmcm9tIHRoZSBhdXRvY29tcGxldGUgb2JqZWN0LlxuICAgIGNvbnN0IHBsYWNlID0gYXV0b2NvbXBsZXRlLmdldFBsYWNlKCk7XG4gICAgbGV0IGFkZHJlc3MxID0gJyc7XG4gICAgbGV0IHBvc3Rjb2RlID0gJyc7XG5cbiAgICAvLyBHZXQgZWFjaCBjb21wb25lbnQgb2YgdGhlIGFkZHJlc3MgZnJvbSB0aGUgcGxhY2UgZGV0YWlscyxcbiAgICAvLyBhbmQgdGhlbiBmaWxsLWluIHRoZSBjb3JyZXNwb25kaW5nIGZpZWxkIG9uIHRoZSBmb3JtLlxuICAgIC8vIHBsYWNlLmFkZHJlc3NfY29tcG9uZW50cyBhcmUgZ29vZ2xlLm1hcHMuR2VvY29kZXJBZGRyZXNzQ29tcG9uZW50IG9iamVjdHNcbiAgICAvLyB3aGljaCBhcmUgZG9jdW1lbnRlZCBhdCBodHRwOi8vZ29vLmdsZS8zbDVpNU1yXG4gICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgcGxhY2UuYWRkcmVzc19jb21wb25lbnRzKSB7XG4gICAgICAvLyBAdHMtaWdub3JlIHJlbW92ZSBvbmNlIHR5cGluZ3MgZml4ZWRcbiAgICAgIGNvbnN0IGNvbXBvbmVudFR5cGUgPSBjb21wb25lbnQudHlwZXNbMF07XG5cbiAgICAgIHN3aXRjaCAoY29tcG9uZW50VHlwZSkge1xuICAgICAgICBjYXNlICdzdHJlZXRfbnVtYmVyJzoge1xuICAgICAgICAgIGFkZHJlc3MxID0gYCR7Y29tcG9uZW50LmxvbmdfbmFtZX0gJHthZGRyZXNzMX1gO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAncm91dGUnOiB7XG4gICAgICAgICAgYWRkcmVzczEgKz0gY29tcG9uZW50LnNob3J0X25hbWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjYXNlICdwb3N0YWxfY29kZSc6IHtcbiAgICAgICAgICBwb3N0Y29kZSA9IGAke2NvbXBvbmVudC5sb25nX25hbWV9JHtwb3N0Y29kZX1gO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAncG9zdGFsX2NvZGVfc3VmZml4Jzoge1xuICAgICAgICAgIHBvc3Rjb2RlID0gYCR7cG9zdGNvZGV9LSR7Y29tcG9uZW50LmxvbmdfbmFtZX1gO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2xvY2FsaXR5JzpcbiAgICAgICAgICAvLyBjaXR5XG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI0VzdGltYXRlQ2l0eScpLnZhbHVlID0gY29tcG9uZW50LmxvbmdfbmFtZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8xJzoge1xuICAgICAgICAgIC8vIHByb3ZpbmNlXG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI0VzdGltYXRlUHJvdmluY2UnKS52YWx1ZSA9XG4gICAgICAgICAgICBjb21wb25lbnQuc2hvcnRfbmFtZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNFc3RpbWF0ZUFkZHJlc3MnKS52YWx1ZSA9IGFkZHJlc3MxO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNFc3RpbWF0ZVBvc3RhbCcpLnZhbHVlID0gcG9zdGNvZGU7XG4gICAgLy8gQWZ0ZXIgZmlsbGluZyB0aGUgZm9ybSB3aXRoIGFkZHJlc3MgY29tcG9uZW50cyBmcm9tIHRoZSBBdXRvY29tcGxldGVcbiAgICAvLyBwcmVkaWN0aW9uLCBzZXQgY3Vyc29yIGZvY3VzIG9uIHRoZSBzZWNvbmQgYWRkcmVzcyBsaW5lIHRvIGVuY291cmFnZVxuICAgIC8vIGVudHJ5IG9mIHN1YnByZW1pc2UgaW5mb3JtYXRpb24gc3VjaCBhcyBhcGFydG1lbnQsIHVuaXQsIG9yIGZsb29yIG51bWJlci5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjRXN0aW1hdGVNZXNzYWdlJykuZm9jdXMoKTtcbiAgfVxuXG4gIHNldFVwQWRkcmVzc0F1dG9Db21wbGV0ZShmaWxsSW5BZGRyZXNzKTtcbn1cbiJdLCJuYW1lcyI6WyJzZXRVcEFkZHJlc3NBdXRvQ29tcGxldGUiLCJlc3RpbWF0ZUZvcm0iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJmaWxsSW5BZGRyZXNzIiwiYXV0b2NvbXBsZXRlIiwicGxhY2UiLCJnZXRQbGFjZSIsImFkZHJlc3MxIiwicG9zdGNvZGUiLCJfaXRlcmF0b3IiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsImFkZHJlc3NfY29tcG9uZW50cyIsIl9zdGVwIiwicyIsIm4iLCJkb25lIiwiY29tcG9uZW50IiwidmFsdWUiLCJjb21wb25lbnRUeXBlIiwidHlwZXMiLCJjb25jYXQiLCJsb25nX25hbWUiLCJzaG9ydF9uYW1lIiwiZXJyIiwiZSIsImYiLCJmb2N1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/forms/gd-estimate.js\n");

/***/ }),

/***/ "./src/js/forms/gd-invoice.js":
/*!************************************!*\
  !*** ./src/js/forms/gd-invoice.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_address__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/address */ \"./src/js/utils/address.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\nvar gdInvoiceForm = document.querySelector('form#gd-invoice-form');\nif (gdInvoiceForm) {\n  var fillInAddress = function fillInAddress(autocomplete) {\n    // Get the place details from the autocomplete object.\n    var place = autocomplete.getPlace();\n    var address1 = '';\n    var postcode = '';\n\n    // Get each component of the address from the place details,\n    // and then fill-in the corresponding field on the form.\n    // place.address_components are google.maps.GeocoderAddressComponent objects\n    // which are documented at http://goo.gle/3l5i5Mr\n    var _iterator = _createForOfIteratorHelper(place.address_components),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var component = _step.value;\n        // @ts-ignore remove once typings fixed\n        var componentType = component.types[0];\n        switch (componentType) {\n          case 'street_number':\n            {\n              address1 = \"\".concat(component.long_name, \" \").concat(address1);\n              break;\n            }\n          case 'route':\n            {\n              address1 += component.short_name;\n              break;\n            }\n          case 'postal_code':\n            {\n              postcode = \"\".concat(component.long_name).concat(postcode);\n              break;\n            }\n          case 'postal_code_suffix':\n            {\n              postcode = \"\".concat(postcode, \"-\").concat(component.long_name);\n              break;\n            }\n          case 'locality':\n            // city\n            document.querySelector('#InvoiceCity').value = component.long_name;\n            break;\n          case 'administrative_area_level_1':\n            {\n              // province\n              document.querySelector('#InvoiceProvince').value = component.short_name;\n              break;\n            }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    document.querySelector('#InvoiceAddress').value = address1;\n    document.querySelector('#InvoicePostal').value = postcode;\n    addressSection.style.display = 'grid';\n    // After filling the form with address components from the Autocomplete\n    // prediction, set cursor focus on the second address line to encourage\n    // entry of subpremise information such as apartment, unit, or floor number.\n    document.querySelector('#InvoiceInvoiceNumber').focus();\n  };\n  var createToken = function createToken() {\n    var additional_data = {\n      address_line1: document.getElementById('InvoiceAddress').value,\n      name: document.getElementById('card-holder-name').value,\n      address_city: document.getElementById('InvoiceCity').value,\n      address_state: document.getElementById('InvoiceProvince').value,\n      address_zip: document.getElementById('InvoicePostal').value\n    };\n    stripe.createToken(card_num, additional_data).then(function (result) {\n      if (result.error) {\n        $('#error-wrapper').append('<p>' + result.error.message + '</p>').show();\n        $('html,body').animate({\n          scrollTop: 0\n        }, 'slow');\n        $('#submit-button').prop('disabled', false).css('opacity', 1);\n        $('#processing-wrapper').css('opacity', 0);\n      } else {\n        stripeTokenHandler(result.token);\n      }\n    });\n  };\n  var stripeTokenHandler = function stripeTokenHandler(token) {\n    console.log(token);\n    var token_el = document.getElementById('stripe_token');\n    if (token_el !== null) {\n      token_el.parentNode.removeChild(token_el);\n    }\n    var hiddenInput = document.createElement('input');\n    hiddenInput.setAttribute('id', 'stripe_token');\n    hiddenInput.setAttribute('type', 'hidden');\n    hiddenInput.setAttribute('name', 'stripeToken');\n    hiddenInput.setAttribute('value', token.id);\n    gdInvoiceForm.appendChild(hiddenInput);\n    gdInvoiceForm.submit();\n  };\n  var addressSection = document.querySelector('#address-fields');\n  (0,_utils_address__WEBPACK_IMPORTED_MODULE_0__.setUpAddressAutoComplete)(fillInAddress);\n  var stripeKey = document.getElementById('gd-invoice-form').dataset.stripeKey;\n  var stripe = Stripe(stripeKey);\n  var elements = stripe.elements();\n  var card_num = elements.create('card', {\n    style: {\n      base: {\n        fontFamily: '\"museo-sans\",\"Helvetica Neue\",Helvetica,Roboto,Arial,sans-serif',\n        fontSize: '14px'\n      },\n      invalid: {\n        color: 'red'\n      }\n    },\n    hidePostalCode: true\n  });\n  card_num.mount('#card_num');\n\n  // When an invalid field is selected remove the styling\n  $('.form-error').on('click touch', function () {\n    $(this).removeClass('form-error');\n  });\n  gdInvoiceForm.addEventListener('submit', function (event) {\n    event.preventDefault();\n    addressSection.style.display = 'grid';\n    var validated = true;\n    $('#error-wrapper').html('');\n    var amount = +$('#InvoiceInvoiceAmount').val().replace('$', '');\n    if (amount <= 0.01) {\n      $('#error-wrapper').append('<p>Please enter the invoice amount.</p>').show();\n      validated = false;\n    } else if (amount <= 20.0) {\n      $('#error-wrapper').append('<p>Payment failed, please contact us directly by phone <br/> <a href=\"tel:1-844-' + '744-5899\">1-844-744-BUZZ</a> or by email <a href=\"mailto:info@buzzboss.com\">info' + '@buzzboss.com</a>.</p>').show();\n      validated = false;\n    }\n    if (!validated) $('html,body').animate({\n      scrollTop: 0\n    }, 'slow');else {\n      // Disable the submit button to prevent repeated clicks\n      $('#submit-button').prop('disabled', true).css('opacity', 0);\n      $('#processing-wrapper').css('opacity', 1);\n      createToken();\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/forms/gd-invoice.js\n");

/***/ }),

/***/ "./src/js/forms/gd-quote-to-order.js":
/*!*******************************************!*\
  !*** ./src/js/forms/gd-quote-to-order.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var signature_pad__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! signature_pad */ \"./node_modules/signature_pad/dist/signature_pad.js\");\n\n\n//   quote to order form start\nvar quoteFormContainer = document.getElementById('quote-form-container-gd');\nif (quoteFormContainer) {\n  var updateBookingTotals = function updateBookingTotals() {\n    var taxable = true;\n    var package_price = 0;\n    var addon_price = 0;\n    var subtotal = 0;\n    var selected_package = $('#package-select').find('option:selected');\n    if (selected_package.val() != '') {\n      package_price = parseFloat(selected_package.data('price'));\n    }\n    $('.add-ons.active').find('input[type=checkbox]:checked').each(function (i, el) {\n      addon_price += parseFloat($(this).data('price'));\n    });\n    subtotal = package_price + addon_price;\n    $('#subtotal').val(subtotal);\n    $('#subtotal-label').html((subtotal / 100).toFixed(2));\n    if (taxable) {\n      var tax = Math.round(subtotal * 0.05);\n      $('#gst').val(tax);\n      $('#gst-label').html((tax / 100).toFixed(2));\n    } else {\n      var zero = 0;\n      $('#gst').val(zero);\n      $('#gst-label').html((zero / 100).toFixed(2));\n    }\n    var total = subtotal + tax;\n    $('#total').val(total);\n    $('#total-label').html((total / 100).toFixed(2));\n  };\n  var createToken = function createToken() {\n    var additional_data = {\n      address_line1: document.getElementById('OrderBillingAddress').value,\n      name: document.getElementById('card-holder-name').value,\n      address_city: document.getElementById('OrderBillingCity').value,\n      address_state: document.getElementById('OrderBillingProvince').value,\n      address_zip: document.getElementById('OrderBillingPostal').value\n    };\n    stripe.createToken(card_num, additional_data).then(function (result) {\n      if (result.error) {\n        $('#error-wrapper').append('<p>' + result.error.message + '</p>').show();\n        $('html,body').animate({\n          scrollTop: 0\n        }, 'slow');\n        $('#submit-button').prop('disabled', false);\n        $('#submit-button').text($('#submit-button').data('default-label'));\n      } else {\n        stripeTokenHandler(result.token);\n      }\n    });\n  };\n  var stripeTokenHandler = function stripeTokenHandler(token) {\n    var token_el = document.getElementById('stripe_token');\n    if (token_el !== null) {\n      token_el.parentNode.removeChild(token_el);\n    }\n    var hiddenInput = document.createElement('input');\n    hiddenInput.setAttribute('id', 'stripe_token');\n    hiddenInput.setAttribute('type', 'hidden');\n    hiddenInput.setAttribute('name', 'stripeToken');\n    hiddenInput.setAttribute('value', token.id);\n    bookForm.appendChild(hiddenInput);\n    bookForm.submit();\n  }; // quote to order form finish\n  var customerSubmission = true;\n  var bookForm = document.getElementById('book-form');\n  var stripePublicKey = bookForm.dataset.stripePublicKey;\n  var stripe = Stripe(stripePublicKey);\n  var elements = stripe.elements();\n  var card_num = elements.create('card', {\n    style: {\n      base: {\n        fontFamily: '\"museo-sans\",\"Helvetica Neue\",Helvetica,Roboto,Arial,sans-serif',\n        fontSize: '14px'\n      },\n      invalid: {\n        color: 'red'\n      }\n    },\n    hidePostalCode: true\n  });\n  card_num.mount('#card_num');\n\n  // $('#package-select').trigger('change');\n  $('.addon-checkbox').on('click', updateBookingTotals);\n\n  //When an invalid field is selected remove the styling\n  $('.form-error').on('click touch', function () {\n    $(this).removeClass('form-error');\n  });\n  var managerSubmitButton = document.getElementById('submit-button-manager');\n  if (managerSubmitButton) {\n    managerSubmitButton.addEventListener('click', function () {\n      customerSubmission = false;\n      bookForm.setAttribute('action', '/transfer-to-manager');\n    });\n  }\n  $('#book-form').submit(function (event) {\n    event.preventDefault();\n    var validated = true;\n    $('#error-wrapper').html('');\n\n    // check for at least one package or service\n    if ($('#subtotal').val() == 0) {\n      $('#error-wrapper').append('<p>Please select at least one Package or Service.</p>').show();\n      validated = false;\n    }\n\n    // Check Card Holder Name field\n    if (customerSubmission) {\n      if ($('#card-holder-name').val() == '') {\n        $('#error-wrapper').append('<p>Please enter the Card Holder Name.</p>').show();\n        validated = false;\n      }\n    }\n    var signatureInput = document.getElementById('client-signature');\n    if (signatureInput) {\n      if (signatureInput.value == '') {\n        $('#error-wrapper').append('<p>Please enter and confirm your signature.</p>').show();\n        validated = false;\n      }\n    }\n    if (!validated) {\n      $('html,body').animate({\n        scrollTop: 0\n      }, 'slow');\n    } else {\n      // Start Stripe submission (if not a manual booking)\n      if (!$('#invalidZip').prop('checked')) {\n        // Disable the submit button to prevent repeated clicks\n        $('#submit-button').prop('disabled', true);\n        $('#submit-button').html('Processing&hellip;');\n        event.preventDefault();\n        if (!customerSubmission) {\n          // bookForm.submit();\n          return;\n        }\n        createToken();\n      } else {\n        // Manual Booking\n        // Disable the submit button to prevent repeated clicks on manual booking\n        $('#submit-button').prop('disabled', true);\n        $('#submit-button').html('Processing&hellip;');\n      }\n    }\n  });\n  var canvas = document.getElementById('signature-pad');\n  console.log(canvas);\n  if (canvas) {\n    var saveSignature = function saveSignature(event) {\n      event.preventDefault();\n      if (signaturePad.isEmpty()) {\n        return alert('Please provide a signature first.');\n      }\n      var data = signaturePad.toDataURL('image/png');\n      signatureInput.setAttribute('value', data);\n      signatureClearBtn.style.display = 'block';\n      checkIcon.style.display = 'block';\n    };\n    var clearSignature = function clearSignature(event) {\n      event.preventDefault();\n      signaturePad.clear();\n      signatureInput.setAttribute('value', '');\n      checkIcon.style.display = 'none';\n      signatureClearBtn.style.display = 'none';\n      //   signatureClearBtn.setAttribute('disabled', true);\n      //   signatureSaveBtn.setAttribute('disabled', false);\n    };\n    var checkIcon = document.getElementById('signature-saved');\n    var signatureSaveBtn = document.getElementById('signature-save');\n    var signatureClearBtn = document.getElementById('signature-clear');\n    var signaturePad = new signature_pad__WEBPACK_IMPORTED_MODULE_0__[\"default\"](canvas);\n    var signatureInput = document.getElementById('client-signature');\n    signatureSaveBtn.addEventListener('click', saveSignature);\n    signatureClearBtn.addEventListener('click', clearSignature);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/forms/gd-quote-to-order.js\n");

/***/ }),

/***/ "./src/js/forms/gd-service-form.js":
/*!*****************************************!*\
  !*** ./src/js/forms/gd-service-form.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_address__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/address */ \"./src/js/utils/address.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\nvar gdServiceForm = document.querySelector('form#gd-service-form');\nif (gdServiceForm) {\n  var fillInAddress = function fillInAddress(autocomplete) {\n    // Get the place details from the autocomplete object.\n    var place = autocomplete.getPlace();\n    var address1 = '';\n    var postcode = '';\n\n    // Get each component of the address from the place details,\n    // and then fill-in the corresponding field on the form.\n    // place.address_components are google.maps.GeocoderAddressComponent objects\n    // which are documented at http://goo.gle/3l5i5Mr\n    var _iterator = _createForOfIteratorHelper(place.address_components),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var component = _step.value;\n        // @ts-ignore remove once typings fixed\n        var componentType = component.types[0];\n        switch (componentType) {\n          case 'street_number':\n            {\n              address1 = \"\".concat(component.long_name, \" \").concat(address1);\n              break;\n            }\n          case 'route':\n            {\n              address1 += component.short_name;\n              break;\n            }\n          case 'postal_code':\n            {\n              postcode = \"\".concat(component.long_name).concat(postcode);\n              break;\n            }\n          case 'postal_code_suffix':\n            {\n              postcode = \"\".concat(postcode, \"-\").concat(component.long_name);\n              break;\n            }\n          case 'locality':\n            // city\n            document.querySelector('#ServiceRequestCity').value = component.long_name;\n            break;\n          case 'administrative_area_level_1':\n            {\n              // province\n              document.querySelector('#ServiceRequestProvince').value = component.short_name;\n              break;\n            }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    document.querySelector('#ServiceRequestAddress').value = address1;\n    document.querySelector('#ServiceRequestPostal').value = postcode;\n    addressSection.style.display = 'grid';\n    // After filling the form with address components from the Autocomplete\n    // prediction, set cursor focus on the second address line to encourage\n    // entry of subpremise information such as apartment, unit, or floor number.\n    document.querySelector('#ServiceRequestMessage').focus();\n  };\n  console.log('form time');\n  var addressSection = document.querySelector('#address-fields');\n  (0,_utils_address__WEBPACK_IMPORTED_MODULE_0__.setUpAddressAutoComplete)(fillInAddress);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvZm9ybXMvZ2Qtc2VydmljZS1mb3JtLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTREO0FBRTVELElBQU1DLGFBQWEsR0FBR0MsUUFBUSxDQUFDQyxhQUFhLENBQUMsc0JBQXNCLENBQUM7QUFDcEUsSUFBSUYsYUFBYSxFQUFFO0VBQUEsSUFJUkcsYUFBYSxHQUF0QixTQUFTQSxhQUFhQSxDQUFDQyxZQUFZLEVBQUU7SUFDbkM7SUFDQSxJQUFNQyxLQUFLLEdBQUdELFlBQVksQ0FBQ0UsUUFBUSxDQUFDLENBQUM7SUFDckMsSUFBSUMsUUFBUSxHQUFHLEVBQUU7SUFDakIsSUFBSUMsUUFBUSxHQUFHLEVBQUU7O0lBRWpCO0lBQ0E7SUFDQTtJQUNBO0lBQUEsSUFBQUMsU0FBQSxHQUFBQywwQkFBQSxDQUN3QkwsS0FBSyxDQUFDTSxrQkFBa0I7TUFBQUMsS0FBQTtJQUFBO01BQWhELEtBQUFILFNBQUEsQ0FBQUksQ0FBQSxNQUFBRCxLQUFBLEdBQUFILFNBQUEsQ0FBQUssQ0FBQSxJQUFBQyxJQUFBLEdBQWtEO1FBQUEsSUFBdkNDLFNBQVMsR0FBQUosS0FBQSxDQUFBSyxLQUFBO1FBQ2xCO1FBQ0EsSUFBTUMsYUFBYSxHQUFHRixTQUFTLENBQUNHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFeEMsUUFBUUQsYUFBYTtVQUNuQixLQUFLLGVBQWU7WUFBRTtjQUNwQlgsUUFBUSxNQUFBYSxNQUFBLENBQU1KLFNBQVMsQ0FBQ0ssU0FBUyxPQUFBRCxNQUFBLENBQUliLFFBQVEsQ0FBRTtjQUMvQztZQUNGO1VBRUEsS0FBSyxPQUFPO1lBQUU7Y0FDWkEsUUFBUSxJQUFJUyxTQUFTLENBQUNNLFVBQVU7Y0FDaEM7WUFDRjtVQUVBLEtBQUssYUFBYTtZQUFFO2NBQ2xCZCxRQUFRLE1BQUFZLE1BQUEsQ0FBTUosU0FBUyxDQUFDSyxTQUFTLEVBQUFELE1BQUEsQ0FBR1osUUFBUSxDQUFFO2NBQzlDO1lBQ0Y7VUFFQSxLQUFLLG9CQUFvQjtZQUFFO2NBQ3pCQSxRQUFRLE1BQUFZLE1BQUEsQ0FBTVosUUFBUSxPQUFBWSxNQUFBLENBQUlKLFNBQVMsQ0FBQ0ssU0FBUyxDQUFFO2NBQy9DO1lBQ0Y7VUFDQSxLQUFLLFVBQVU7WUFDYjtZQUNBcEIsUUFBUSxDQUFDQyxhQUFhLENBQUMscUJBQXFCLENBQUMsQ0FBQ2UsS0FBSyxHQUNqREQsU0FBUyxDQUFDSyxTQUFTO1lBQ3JCO1VBQ0YsS0FBSyw2QkFBNkI7WUFBRTtjQUNsQztjQUNBcEIsUUFBUSxDQUFDQyxhQUFhLENBQUMseUJBQXlCLENBQUMsQ0FBQ2UsS0FBSyxHQUNyREQsU0FBUyxDQUFDTSxVQUFVO2NBQ3RCO1lBQ0Y7UUFDRjtNQUNGO0lBQUMsU0FBQUMsR0FBQTtNQUFBZCxTQUFBLENBQUFlLENBQUEsQ0FBQUQsR0FBQTtJQUFBO01BQUFkLFNBQUEsQ0FBQWdCLENBQUE7SUFBQTtJQUVEeEIsUUFBUSxDQUFDQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsQ0FBQ2UsS0FBSyxHQUFHVixRQUFRO0lBQ2pFTixRQUFRLENBQUNDLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDZSxLQUFLLEdBQUdULFFBQVE7SUFDaEVrQixjQUFjLENBQUNDLEtBQUssQ0FBQ0MsT0FBTyxHQUFHLE1BQU07SUFDckM7SUFDQTtJQUNBO0lBQ0EzQixRQUFRLENBQUNDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDMkIsS0FBSyxDQUFDLENBQUM7RUFDMUQsQ0FBQztFQTFEREMsT0FBTyxDQUFDQyxHQUFHLENBQUMsV0FBVyxDQUFDO0VBQ3hCLElBQU1MLGNBQWMsR0FBR3pCLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGlCQUFpQixDQUFDO0VBMkRoRUgsd0VBQXdCLENBQUNJLGFBQWEsQ0FBQztBQUN6QyIsInNvdXJjZXMiOlsid2VicGFjazovL2dyZWVuLy4vc3JjL2pzL2Zvcm1zL2dkLXNlcnZpY2UtZm9ybS5qcz8xODdiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNldFVwQWRkcmVzc0F1dG9Db21wbGV0ZSB9IGZyb20gJy4uL3V0aWxzL2FkZHJlc3MnO1xuXG5jb25zdCBnZFNlcnZpY2VGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZm9ybSNnZC1zZXJ2aWNlLWZvcm0nKTtcbmlmIChnZFNlcnZpY2VGb3JtKSB7XG4gIGNvbnNvbGUubG9nKCdmb3JtIHRpbWUnKTtcbiAgY29uc3QgYWRkcmVzc1NlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYWRkcmVzcy1maWVsZHMnKTtcblxuICBmdW5jdGlvbiBmaWxsSW5BZGRyZXNzKGF1dG9jb21wbGV0ZSkge1xuICAgIC8vIEdldCB0aGUgcGxhY2UgZGV0YWlscyBmcm9tIHRoZSBhdXRvY29tcGxldGUgb2JqZWN0LlxuICAgIGNvbnN0IHBsYWNlID0gYXV0b2NvbXBsZXRlLmdldFBsYWNlKCk7XG4gICAgbGV0IGFkZHJlc3MxID0gJyc7XG4gICAgbGV0IHBvc3Rjb2RlID0gJyc7XG5cbiAgICAvLyBHZXQgZWFjaCBjb21wb25lbnQgb2YgdGhlIGFkZHJlc3MgZnJvbSB0aGUgcGxhY2UgZGV0YWlscyxcbiAgICAvLyBhbmQgdGhlbiBmaWxsLWluIHRoZSBjb3JyZXNwb25kaW5nIGZpZWxkIG9uIHRoZSBmb3JtLlxuICAgIC8vIHBsYWNlLmFkZHJlc3NfY29tcG9uZW50cyBhcmUgZ29vZ2xlLm1hcHMuR2VvY29kZXJBZGRyZXNzQ29tcG9uZW50IG9iamVjdHNcbiAgICAvLyB3aGljaCBhcmUgZG9jdW1lbnRlZCBhdCBodHRwOi8vZ29vLmdsZS8zbDVpNU1yXG4gICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgcGxhY2UuYWRkcmVzc19jb21wb25lbnRzKSB7XG4gICAgICAvLyBAdHMtaWdub3JlIHJlbW92ZSBvbmNlIHR5cGluZ3MgZml4ZWRcbiAgICAgIGNvbnN0IGNvbXBvbmVudFR5cGUgPSBjb21wb25lbnQudHlwZXNbMF07XG5cbiAgICAgIHN3aXRjaCAoY29tcG9uZW50VHlwZSkge1xuICAgICAgICBjYXNlICdzdHJlZXRfbnVtYmVyJzoge1xuICAgICAgICAgIGFkZHJlc3MxID0gYCR7Y29tcG9uZW50LmxvbmdfbmFtZX0gJHthZGRyZXNzMX1gO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAncm91dGUnOiB7XG4gICAgICAgICAgYWRkcmVzczEgKz0gY29tcG9uZW50LnNob3J0X25hbWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjYXNlICdwb3N0YWxfY29kZSc6IHtcbiAgICAgICAgICBwb3N0Y29kZSA9IGAke2NvbXBvbmVudC5sb25nX25hbWV9JHtwb3N0Y29kZX1gO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAncG9zdGFsX2NvZGVfc3VmZml4Jzoge1xuICAgICAgICAgIHBvc3Rjb2RlID0gYCR7cG9zdGNvZGV9LSR7Y29tcG9uZW50LmxvbmdfbmFtZX1gO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2xvY2FsaXR5JzpcbiAgICAgICAgICAvLyBjaXR5XG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI1NlcnZpY2VSZXF1ZXN0Q2l0eScpLnZhbHVlID1cbiAgICAgICAgICAgIGNvbXBvbmVudC5sb25nX25hbWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2FkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMSc6IHtcbiAgICAgICAgICAvLyBwcm92aW5jZVxuICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNTZXJ2aWNlUmVxdWVzdFByb3ZpbmNlJykudmFsdWUgPVxuICAgICAgICAgICAgY29tcG9uZW50LnNob3J0X25hbWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjU2VydmljZVJlcXVlc3RBZGRyZXNzJykudmFsdWUgPSBhZGRyZXNzMTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjU2VydmljZVJlcXVlc3RQb3N0YWwnKS52YWx1ZSA9IHBvc3Rjb2RlO1xuICAgIGFkZHJlc3NTZWN0aW9uLnN0eWxlLmRpc3BsYXkgPSAnZ3JpZCc7XG4gICAgLy8gQWZ0ZXIgZmlsbGluZyB0aGUgZm9ybSB3aXRoIGFkZHJlc3MgY29tcG9uZW50cyBmcm9tIHRoZSBBdXRvY29tcGxldGVcbiAgICAvLyBwcmVkaWN0aW9uLCBzZXQgY3Vyc29yIGZvY3VzIG9uIHRoZSBzZWNvbmQgYWRkcmVzcyBsaW5lIHRvIGVuY291cmFnZVxuICAgIC8vIGVudHJ5IG9mIHN1YnByZW1pc2UgaW5mb3JtYXRpb24gc3VjaCBhcyBhcGFydG1lbnQsIHVuaXQsIG9yIGZsb29yIG51bWJlci5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjU2VydmljZVJlcXVlc3RNZXNzYWdlJykuZm9jdXMoKTtcbiAgfVxuXG4gIHNldFVwQWRkcmVzc0F1dG9Db21wbGV0ZShmaWxsSW5BZGRyZXNzKTtcbn1cbiJdLCJuYW1lcyI6WyJzZXRVcEFkZHJlc3NBdXRvQ29tcGxldGUiLCJnZFNlcnZpY2VGb3JtIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZmlsbEluQWRkcmVzcyIsImF1dG9jb21wbGV0ZSIsInBsYWNlIiwiZ2V0UGxhY2UiLCJhZGRyZXNzMSIsInBvc3Rjb2RlIiwiX2l0ZXJhdG9yIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJhZGRyZXNzX2NvbXBvbmVudHMiLCJfc3RlcCIsInMiLCJuIiwiZG9uZSIsImNvbXBvbmVudCIsInZhbHVlIiwiY29tcG9uZW50VHlwZSIsInR5cGVzIiwiY29uY2F0IiwibG9uZ19uYW1lIiwic2hvcnRfbmFtZSIsImVyciIsImUiLCJmIiwiYWRkcmVzc1NlY3Rpb24iLCJzdHlsZSIsImRpc3BsYXkiLCJmb2N1cyIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/forms/gd-service-form.js\n");

/***/ }),

/***/ "./src/js/forms/index.js":
/*!*******************************!*\
  !*** ./src/js/forms/index.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _gd_book__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gd-book */ \"./src/js/forms/gd-book.js\");\n/* harmony import */ var _gd_estimate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gd-estimate */ \"./src/js/forms/gd-estimate.js\");\n/* harmony import */ var _gd_invoice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gd-invoice */ \"./src/js/forms/gd-invoice.js\");\n/* harmony import */ var _gd_quote_to_order__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gd-quote-to-order */ \"./src/js/forms/gd-quote-to-order.js\");\n/* harmony import */ var _gd_service_form__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gd-service-form */ \"./src/js/forms/gd-service-form.js\");\n/* harmony import */ var _bb_quote__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bb-quote */ \"./src/js/forms/bb-quote.js\");\n/* harmony import */ var _bb_quote__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_bb_quote__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvZm9ybXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBbUI7QUFDSTtBQUNEO0FBQ087QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2dyZWVuLy4vc3JjL2pzL2Zvcm1zL2luZGV4LmpzP2U3MDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuL2dkLWJvb2snO1xuaW1wb3J0ICcuL2dkLWVzdGltYXRlJztcbmltcG9ydCAnLi9nZC1pbnZvaWNlJztcbmltcG9ydCAnLi9nZC1xdW90ZS10by1vcmRlcic7XG5pbXBvcnQgJy4vZ2Qtc2VydmljZS1mb3JtJztcbmltcG9ydCAnLi9iYi1xdW90ZSc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/forms/index.js\n");

/***/ }),

/***/ "./src/js/googleMap.js":
/*!*****************************!*\
  !*** ./src/js/googleMap.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _googlemaps_js_api_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @googlemaps/js-api-loader */ \"./node_modules/@googlemaps/js-api-loader/dist/index.esm.js\");\n\nvar map,\n  geocoder,\n  postalCodeLookups = [],\n  cities = [],\n  provinceSelector,\n  setLocationButtons,\n  markers = [],\n  currentAnchorPoint;\nvar distances = [];\nvar defaultCenter = {\n  lat: 51.063355,\n  lng: -114.0028138\n};\nvar citiesList = document.querySelectorAll(\".cities-list\");\nvar googleMapIconCurrent = '/assets/images/icons/google-map-marker-current.svg';\nvar googleMapIcon = '/assets/images/icons/google-map-marker.svg';\nvar defaultCities = [];\nvar serviceArearButtons = document.querySelectorAll(\".service-area-button\");\nvar serviceAreaText = document.querySelectorAll(\".service-area-text\");\nvar searchByPostalCodeInput = document.getElementById(\"searchByPostalCode\");\nvar searchingDiv = document.getElementById(\"searching\");\nvar mapEl = document.getElementById(\"greendropGoogleMap\");\nvar loader = new _googlemaps_js_api_loader__WEBPACK_IMPORTED_MODULE_0__.Loader({\n  // Personal Key from Jianyi@nerder.com\n  apiKey: \"AIzaSyASCax_j9q27TJgiVATXKphzPQcR_-YlEg\",\n  // Real Key from Greendrop, need to use this one when deploying on the production\n  // apiKey: \"AIzaSyDH82rr32TeyLkWwPAZ2gVZJMDtQAm6J1I\",\n  version: \"weekly\",\n  libraries: [\"geometry\"]\n});\ndocument.addEventListener('DOMContentLoaded', function () {\n  window.initMap = initMap(cities);\n  provinceSelector = document.querySelector(\".provinceName\");\n  setLocationButtons = document.querySelectorAll(\".set-location-button\");\n  if (provinceSelector) provinceSelector.addEventListener('change', function () {\n    return changeCity(provinceSelector);\n  });\n  setLocationButtons.forEach(function (el) {\n    el.addEventListener('click', function () {\n      return setCurrentLocation(el);\n    });\n  });\n  serviceArearButtons.forEach(function (el) {\n    el.addEventListener('click', function () {\n      return showOrHideServiceArea(el);\n    });\n  });\n  if (searchByPostalCodeInput) searchByPostalCodeInput.addEventListener('keyup', function (e) {\n    e.preventDefault();\n    if (e.key === \"Enter\") {\n      var postalCode = searchByPostalCodeInput.value;\n      serachByPostalCode(postalCode);\n    }\n  });\n  if (mapEl) loader.load().then(function (google) {\n    map = new google.maps.Map(mapEl, {\n      center: defaultCenter,\n      zoom: 7,\n      mapTypes: 'terrain'\n    });\n    geocoder = new google.maps.Geocoder();\n    currentAnchorPoint = new google.maps.Point(85.5, 85.5);\n    map.addListener(\"center_changed\", function () {\n      window.setTimeout(function () {\n        map.panTo(map.center);\n      }, 3000);\n    });\n    initMap;\n    if (typeof locations !== 'undefined') {\n      defaultCities = locations.filter(function (el) {\n        return el.provinceName == 'Alberta';\n      });\n      locations.forEach(function (location) {\n        postalCodeLookups.push(location.postalCode);\n      });\n    }\n    if (typeof locations !== 'undefined') initialCurrentLocation();\n  })[\"catch\"](function (e) {\n    console.log(e);\n  });\n});\nfunction changeCity(province) {\n  markers = [];\n  var className = '.' + province.value;\n  console.log(className);\n  var currentCitiesDiv = document.querySelector(className);\n  Array.from(citiesList, function (el) {\n    el.classList.add('hidden');\n    el.classList.remove('flex');\n  });\n  currentCitiesDiv.classList.remove('hidden');\n  currentCitiesDiv.classList.add('flex');\n  cities = locations.filter(function (location) {\n    return location.provinceName == province.value;\n  });\n  initMap(cities);\n}\nfunction initMap(cities) {\n  if (cities == null) cities = defaultCities;\n  cities.forEach(function (city) {\n    var address = city.address + ',' + city.cityName + ',' + city.postalCode;\n    geocode(address);\n  });\n}\nfunction geocode(address) {\n  geocoder.geocode({\n    address: address\n  }).then(function (result) {\n    var results = result.results;\n    var city = address.split(\",\").pop();\n    var cookieCity = getGreenCookie('green_drop_location');\n    var dyIcon = city == cookieCity ? {\n      url: googleMapIconCurrent,\n      anchor: currentAnchorPoint\n    } : {\n      url: googleMapIcon\n    };\n    var marker = new google.maps.Marker({\n      position: results[0].geometry.location,\n      map: map,\n      label: {\n        text: address,\n        className: \"gd-google-marker-labels\"\n      },\n      icon: dyIcon\n    });\n    marker.setPosition(results[0].geometry.location);\n    marker.setMap(map);\n    map.setCenter(results[0].geometry.location);\n    markers.push(marker);\n  })[\"catch\"](function (e) {\n    console.log(\"Geocode was not successful for the following reason: \" + e);\n  });\n}\nfunction initialCurrentLocation() {\n  var cookieCity = getGreenCookie(\"green_drop_location\");\n  var findCity = locations.filter(function (el) {\n    return el.postalCode == cookieCity;\n  });\n  if (findCity) {\n    setLocationButtons.forEach(function (button) {\n      var address = button.dataset.address;\n      var provinceName = button.dataset.province;\n      var city = address.split(\",\").pop();\n      if (city == cookieCity) {\n        button.style.backgroundColor = '#007749';\n        button.style.opacity = '0.1';\n        button.style.color = '#F5F3EC';\n        button.textContent = 'Your Current Location';\n        setMarkerIcon(address, true);\n        provinceSelector.value = provinceName;\n        changeCity(provinceSelector);\n      }\n    });\n  }\n}\nfunction setCurrentLocation(el) {\n  var address = el.dataset.address;\n  var city = address.split(\",\").pop();\n  if (el.textContent == 'Your Current Location') {\n    el.textContent = 'set as your location';\n    el.removeAttribute(\"style\");\n    setMarkerIcon(address, false);\n  } else {\n    el.style.backgroundColor = '#007749';\n    el.style.opacity = '0.1';\n    el.style.color = '#F5F3EC';\n    el.textContent = 'Your Current Location';\n    setMarkerIcon(address, true);\n    document.cookie = \"green_drop_location=\" + city;\n  }\n  setLocationButtons.forEach(function (btn) {\n    if (btn !== el) {\n      btn.textContent = 'set as your location';\n      btn.removeAttribute(\"style\");\n    }\n  });\n}\nfunction setMarkerIcon(address, current) {\n  markers.forEach(function (marker) {\n    var text = marker.label.text;\n    if (text == address && current == true) {\n      marker.setIcon({\n        url: googleMapIconCurrent,\n        anchor: currentAnchorPoint\n      });\n      map.setCenter(marker.getPosition());\n    } else {\n      marker.setIcon(googleMapIcon);\n    }\n  });\n}\nfunction showOrHideServiceArea(el) {\n  var serviceText = el.nextElementSibling;\n  if (serviceText.classList.contains('hidden')) serviceText.classList.remove('hidden');else serviceText.classList.add('hidden');\n}\nfunction getGreenCookie(name) {\n  function escape(s) {\n    return s.replace(/([.*+?\\^$(){}|\\[\\]\\/\\\\])/g, '\\\\$1');\n  }\n  var match = document.cookie.match(RegExp('(?:^|;\\\\s*)' + escape(name) + '=([^;]*)'));\n  return match ? decodeURI(match[1]) : null;\n}\nfunction serachByPostalCode(postalcode) {\n  var valide = postalcode.length >= 5 ? true : false;\n  if (valide) {\n    var service = new google.maps.DistanceMatrixService();\n    service.getDistanceMatrix({\n      origins: [postalcode],\n      destinations: postalCodeLookups,\n      travelMode: google.maps.TravelMode.DRIVING,\n      unitSystem: google.maps.UnitSystem.IMPERIAL\n    }, function (response, status) {\n      if (status == google.maps.DistanceMatrixStatus.OK) {\n        var origins = response.originAddresses;\n        var destinations = response.destinationAddresses;\n        for (var i = 0; i < origins.length; i++) {\n          var results = response.rows[i].elements;\n          for (var j = 0; j < results.length; j++) {\n            // console.log(\"From \"+ origins[i] +\" To \" + destinations[j] +\" is \" + results[j].distance.text ) ;  \n            distances.push({\n              address: destinations[j],\n              distance: results[j].distance.text\n            });\n          }\n        }\n      }\n      // console.log(distances);\n      var closest;\n      var closestAddress;\n      var closestCity;\n      distances.forEach(function (el) {\n        var address = el.address;\n        var distance = el.distance.split(\" \")[0];\n        distance = parseFloat(distance.replace(/,/g, ''));\n        // console.log(distance);\n        if (!closest) {\n          closest = distance;\n          closestAddress = address;\n        } else {\n          closest = distance > closest ? closest : distance;\n          closestAddress = distance > closest ? closestAddress : address;\n          closestCity = closestAddress.split(\",\")[0];\n        }\n      });\n      // console.log(closest + \"closestAddress is: \" + closestAddress + \"closetCity is: \" + closestCity);  \n      if (closestCity) {\n        locations.forEach(function (location) {\n          if (location.cityName == closestCity) {\n            searching.classList.remove(\"hidden\");\n            setTimeout(function () {\n              searching.classList.add(\"hidden\");\n              provinceSelector.value = location.provinceName;\n              changeCity(provinceSelector);\n            }, 3000);\n          }\n        });\n      }\n    });\n  } else {\n    alert(\"Please provide a Postal Code\");\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/googleMap.js\n");

/***/ }),

/***/ "./src/js/grassCta.js":
/*!****************************!*\
  !*** ./src/js/grassCta.js ***!
  \****************************/
/***/ (() => {

eval("// Y axis scroll speed\n// todo: check if desktop or mobile for updating variable that sets it correctly\n\nvar velocity = 0.5;\ndocument.addEventListener(\"scroll\", function (event) {\n  var doc = document.documentElement;\n  var pos = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n  var div_list = document.querySelectorAll('.grass-cta-background'); // returns NodeList\n  for (var i = 0, len = div_list.length; i < len; i++) {\n    var element = div_list[i];\n    var elDistanceToTop = (window.pageYOffset + element.getBoundingClientRect().top) / 1.8;\n    var height = element.offsetHeight - 18;\n    var _final = Math.round((height + pos) * velocity - elDistanceToTop) + 'px';\n    div_list[i].style.setProperty('--positionBackground', _final);\n    // div_list[i].setAttribute(\"backgroundData\", final);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ2ZWxvY2l0eSIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZG9jIiwiZG9jdW1lbnRFbGVtZW50IiwicG9zIiwid2luZG93IiwicGFnZVlPZmZzZXQiLCJzY3JvbGxUb3AiLCJjbGllbnRUb3AiLCJkaXZfbGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpIiwibGVuIiwibGVuZ3RoIiwiZWxlbWVudCIsImVsRGlzdGFuY2VUb1RvcCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvcCIsImhlaWdodCIsIm9mZnNldEhlaWdodCIsImZpbmFsIiwiTWF0aCIsInJvdW5kIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSJdLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmVlbi8uL3NyYy9qcy9ncmFzc0N0YS5qcz8zOGJmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFkgYXhpcyBzY3JvbGwgc3BlZWRcbi8vIHRvZG86IGNoZWNrIGlmIGRlc2t0b3Agb3IgbW9iaWxlIGZvciB1cGRhdGluZyB2YXJpYWJsZSB0aGF0IHNldHMgaXQgY29ycmVjdGx5XG5cbnZhciB2ZWxvY2l0eSA9IDAuNTtcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgKGV2ZW50KSA9PiB7XG4gICAgdmFyIGRvYyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgcG9zID0gKHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2Muc2Nyb2xsVG9wKSAgLSAoZG9jLmNsaWVudFRvcCB8fCAwKTtcbiAgICB2YXIgZGl2X2xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZ3Jhc3MtY3RhLWJhY2tncm91bmQnKTsgLy8gcmV0dXJucyBOb2RlTGlzdFxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBkaXZfbGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRpdl9saXN0W2ldO1xuICAgICAgICB2YXIgZWxEaXN0YW5jZVRvVG9wID0gKHdpbmRvdy5wYWdlWU9mZnNldCArIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wKSAvIDEuODtcbiAgICAgICAgdmFyIGhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0LTE4O1xuICAgICAgICB2YXIgZmluYWwgPSBNYXRoLnJvdW5kKChoZWlnaHQgKyBwb3MpICogdmVsb2NpdHkgLSBlbERpc3RhbmNlVG9Ub3ApICsgJ3B4JztcbiAgICAgICAgZGl2X2xpc3RbaV0uc3R5bGUuc2V0UHJvcGVydHkoJy0tcG9zaXRpb25CYWNrZ3JvdW5kJywgZmluYWwpO1xuICAgICAgICAvLyBkaXZfbGlzdFtpXS5zZXRBdHRyaWJ1dGUoXCJiYWNrZ3JvdW5kRGF0YVwiLCBmaW5hbCk7XG4gICAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUEsSUFBSUEsUUFBUSxHQUFHLEdBQUc7QUFDbEJDLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLFVBQUNDLEtBQUssRUFBSztFQUMzQyxJQUFJQyxHQUFHLEdBQUdILFFBQVEsQ0FBQ0ksZUFBZTtFQUNsQyxJQUFJQyxHQUFHLEdBQUcsQ0FBQ0MsTUFBTSxDQUFDQyxXQUFXLElBQUlKLEdBQUcsQ0FBQ0ssU0FBUyxLQUFNTCxHQUFHLENBQUNNLFNBQVMsSUFBSSxDQUFDLENBQUM7RUFDdkUsSUFBSUMsUUFBUSxHQUFHVixRQUFRLENBQUNXLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztFQUNuRSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVDLEdBQUcsR0FBR0gsUUFBUSxDQUFDSSxNQUFNLEVBQUVGLENBQUMsR0FBR0MsR0FBRyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtJQUNqRCxJQUFJRyxPQUFPLEdBQUdMLFFBQVEsQ0FBQ0UsQ0FBQyxDQUFDO0lBQ3pCLElBQUlJLGVBQWUsR0FBRyxDQUFDVixNQUFNLENBQUNDLFdBQVcsR0FBR1EsT0FBTyxDQUFDRSxxQkFBcUIsQ0FBQyxDQUFDLENBQUNDLEdBQUcsSUFBSSxHQUFHO0lBQ3RGLElBQUlDLE1BQU0sR0FBR0osT0FBTyxDQUFDSyxZQUFZLEdBQUMsRUFBRTtJQUNwQyxJQUFJQyxNQUFLLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDLENBQUNKLE1BQU0sR0FBR2QsR0FBRyxJQUFJTixRQUFRLEdBQUdpQixlQUFlLENBQUMsR0FBRyxJQUFJO0lBQzFFTixRQUFRLENBQUNFLENBQUMsQ0FBQyxDQUFDWSxLQUFLLENBQUNDLFdBQVcsQ0FBQyxzQkFBc0IsRUFBRUosTUFBSyxDQUFDO0lBQzVEO0VBQ0o7QUFDSixDQUFDLENBQUMiLCJmaWxlIjoiLi9zcmMvanMvZ3Jhc3NDdGEuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/grassCta.js\n");

/***/ }),

/***/ "./src/js/header.js":
/*!**************************!*\
  !*** ./src/js/header.js ***!
  \**************************/
/***/ (() => {

eval("var greendropHeader = document.getElementById('greendrop-header');\nif (greendropHeader) {\n  var topBar = greendropHeader.querySelector('#topInfo');\n  var logoLarge = greendropHeader.querySelector('#large-logo');\n  var logoSmall = greendropHeader.querySelector('#small-logo');\n  var isPageScrolled = false;\n  window.addEventListener('scroll', function () {\n    var scrollTriggerPosition = 50;\n    if (window.scrollY > scrollTriggerPosition && !isPageScrolled) {\n      isPageScrolled = true;\n      topBar.classList.add('hidden');\n      topBar.classList.remove('flex');\n      logoSmall.classList.add('block');\n      logoSmall.classList.remove('hidden');\n      logoLarge.classList.add('hidden');\n      logoLarge.classList.remove('block');\n      document.documentElement.style.setProperty('--gd-navigation-height', greendropHeader.clientHeight + 'px');\n    }\n    if (window.scrollY < scrollTriggerPosition && isPageScrolled) {\n      isPageScrolled = false;\n      topBar.classList.add('flex');\n      topBar.classList.remove('hidden');\n      logoLarge.classList.add('block');\n      logoLarge.classList.remove('hidden');\n      logoSmall.classList.add('hidden');\n      logoSmall.classList.remove('block');\n      document.documentElement.style.setProperty('--gd-navigation-height', greendropHeader.clientHeight + 'px');\n    }\n  });\n}\nvar bbHeader = document.getElementById('buzz-header');\nif (bbHeader) {\n  var _topBar = bbHeader.querySelector('#topInfo');\n  var _logoLarge = bbHeader.querySelector('#large-logo');\n  var _logoSmall = bbHeader.querySelector('#small-logo');\n  var _isPageScrolled = false;\n  window.addEventListener('scroll', function () {\n    var scrollTriggerPosition = 50;\n    if (window.innerWidth >= 1024) {\n      if (window.scrollY > scrollTriggerPosition && !_isPageScrolled) {\n        _isPageScrolled = true;\n        _topBar.classList.add('hidden');\n        _topBar.classList.remove('flex');\n        _logoSmall.classList.add('block');\n        _logoSmall.classList.remove('hidden');\n        _logoLarge.classList.add('hidden');\n        _logoLarge.classList.remove('block');\n        document.body.style.paddingTop = '67px';\n        document.documentElement.style.setProperty('--bb-navigation-height', bbHeader.clientHeight + 'px');\n      }\n      if (window.scrollY < scrollTriggerPosition && _isPageScrolled) {\n        _isPageScrolled = false;\n        _topBar.classList.add('flex');\n        _topBar.classList.remove('hidden');\n        _logoLarge.classList.add('block');\n        document.body.style.paddingTop = '0';\n        _logoLarge.classList.remove('hidden');\n        _logoSmall.classList.add('hidden');\n        _logoSmall.classList.remove('block');\n        document.documentElement.style.setProperty('--bb-navigation-height', bbHeader.clientHeight + 'px');\n      }\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/header.js\n");

/***/ }),

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _grassCta__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./grassCta */ \"./src/js/grassCta.js\");\n/* harmony import */ var _grassCta__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_grassCta__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _packageSlider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packageSlider */ \"./src/js/packageSlider.js\");\n/* harmony import */ var _packageToggle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./packageToggle */ \"./src/js/packageToggle.js\");\n/* harmony import */ var _packageToggle__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_packageToggle__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _accordion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./accordion */ \"./src/js/accordion.js\");\n/* harmony import */ var _serviceChartTabs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./serviceChartTabs */ \"./src/js/serviceChartTabs.js\");\n/* harmony import */ var _serviceChartTabs__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_serviceChartTabs__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _search__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./search */ \"./src/js/search.js\");\n/* harmony import */ var _search__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_search__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _googleMap__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./googleMap */ \"./src/js/googleMap.js\");\n/* harmony import */ var _bookingForm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bookingForm */ \"./src/js/bookingForm.js\");\n/* harmony import */ var _bookingForm__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_bookingForm__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _sidebarVarValue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sidebarVarValue */ \"./src/js/sidebarVarValue.js\");\n/* harmony import */ var _sidebarVarValue__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_sidebarVarValue__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _treecare__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./treecare */ \"./src/js/treecare.js\");\n/* harmony import */ var _treecare__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_treecare__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _header__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./header */ \"./src/js/header.js\");\n/* harmony import */ var _header__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_header__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _estimate__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./estimate */ \"./src/js/estimate.js\");\n/* harmony import */ var _forms__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./forms */ \"./src/js/forms/index.js\");\n/* harmony import */ var _mobileMenu__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./mobileMenu */ \"./src/js/mobileMenu.js\");\n/* harmony import */ var _mobileMenu__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_mobileMenu__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! alpinejs */ \"./node_modules/alpinejs/dist/module.esm.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwindow.Alpine = alpinejs__WEBPACK_IMPORTED_MODULE_14__[\"default\"];\nalpinejs__WEBPACK_IMPORTED_MODULE_14__[\"default\"].start();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFvQjtBQUNLO0FBQ0E7QUFDSjtBQUNPO0FBQ1Y7QUFDRztBQUNFO0FBQ0k7QUFDUDtBQUNGO0FBQ0U7QUFDSDtBQUNLO0FBRVE7QUFDOUJDLE1BQU0sQ0FBQ0QsTUFBTSxHQUFHQSxpREFBTTtBQUN0QkEsaURBQU0sQ0FBQ0UsS0FBSyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmVlbi8uL3NyYy9qcy9pbmRleC5qcz9hOTA0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi9ncmFzc0N0YSc7XG5pbXBvcnQgJy4vcGFja2FnZVNsaWRlcic7XG5pbXBvcnQgJy4vcGFja2FnZVRvZ2dsZSc7XG5pbXBvcnQgJy4vYWNjb3JkaW9uJztcbmltcG9ydCAnLi9zZXJ2aWNlQ2hhcnRUYWJzJztcbmltcG9ydCAnLi9zZWFyY2gnO1xuaW1wb3J0ICcuL2dvb2dsZU1hcCc7XG5pbXBvcnQgJy4vYm9va2luZ0Zvcm0nO1xuaW1wb3J0ICcuL3NpZGViYXJWYXJWYWx1ZSc7XG5pbXBvcnQgJy4vdHJlZWNhcmUnO1xuaW1wb3J0ICcuL2hlYWRlcic7XG5pbXBvcnQgJy4vZXN0aW1hdGUnO1xuaW1wb3J0ICcuL2Zvcm1zJztcbmltcG9ydCAnLi9tb2JpbGVNZW51JztcblxuaW1wb3J0IEFscGluZSBmcm9tICdhbHBpbmVqcyc7XG53aW5kb3cuQWxwaW5lID0gQWxwaW5lO1xuQWxwaW5lLnN0YXJ0KCk7XG4iXSwibmFtZXMiOlsiQWxwaW5lIiwid2luZG93Iiwic3RhcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/index.js\n");

/***/ }),

/***/ "./src/js/mobileMenu.js":
/*!******************************!*\
  !*** ./src/js/mobileMenu.js ***!
  \******************************/
/***/ (() => {

eval("var mobileToggle = document.getElementById('mobile-menu-toggle');\nvar mobilePanel = document.getElementById('mobile-menu-panel');\nvar iconOpen = document.getElementById('menu-open');\nvar iconClose = document.getElementById('menu-close');\nif (mobileToggle && mobilePanel) {\n  mobileToggle.addEventListener('click', function () {\n    mobilePanel.classList.toggle('opacity-0');\n    mobilePanel.classList.toggle('pointer-events-none');\n    iconClose.classList.toggle('hidden');\n    iconOpen.classList.toggle('hidden');\n  });\n}\nvar mobileSubNavTriggers = document.querySelectorAll('.mobile-nav-item button');\nif (mobileSubNavTriggers) {\n  mobileSubNavTriggers.forEach(function (trigger) {\n    trigger.addEventListener('click', function () {\n      console.log('clicked');\n      trigger.classList.toggle('rotate-90');\n      var parent = trigger.parentElement;\n      var subNav = parent.nextElementSibling;\n      subNav.classList.toggle('hidden');\n      subNav.classList.toggle('grid');\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2JpbGVUb2dnbGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwibW9iaWxlUGFuZWwiLCJpY29uT3BlbiIsImljb25DbG9zZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJtb2JpbGVTdWJOYXZUcmlnZ2VycyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwidHJpZ2dlciIsImNvbnNvbGUiLCJsb2ciLCJwYXJlbnQiLCJwYXJlbnRFbGVtZW50Iiwic3ViTmF2IiwibmV4dEVsZW1lbnRTaWJsaW5nIl0sInNvdXJjZXMiOlsid2VicGFjazovL2dyZWVuLy4vc3JjL2pzL21vYmlsZU1lbnUuanM/OGMyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb2JpbGVUb2dnbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9iaWxlLW1lbnUtdG9nZ2xlJyk7XG5jb25zdCBtb2JpbGVQYW5lbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2JpbGUtbWVudS1wYW5lbCcpO1xuY29uc3QgaWNvbk9wZW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVudS1vcGVuJyk7XG5jb25zdCBpY29uQ2xvc2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVudS1jbG9zZScpO1xuXG5pZiAobW9iaWxlVG9nZ2xlICYmIG1vYmlsZVBhbmVsKSB7XG4gIG1vYmlsZVRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBtb2JpbGVQYW5lbC5jbGFzc0xpc3QudG9nZ2xlKCdvcGFjaXR5LTAnKTtcbiAgICBtb2JpbGVQYW5lbC5jbGFzc0xpc3QudG9nZ2xlKCdwb2ludGVyLWV2ZW50cy1ub25lJyk7XG4gICAgaWNvbkNsb3NlLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpO1xuICAgIGljb25PcGVuLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpO1xuICB9KTtcbn1cblxuY29uc3QgbW9iaWxlU3ViTmF2VHJpZ2dlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAnLm1vYmlsZS1uYXYtaXRlbSBidXR0b24nXG4pO1xuXG5pZiAobW9iaWxlU3ViTmF2VHJpZ2dlcnMpIHtcbiAgbW9iaWxlU3ViTmF2VHJpZ2dlcnMuZm9yRWFjaCgodHJpZ2dlcikgPT4ge1xuICAgIHRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnY2xpY2tlZCcpO1xuICAgICAgdHJpZ2dlci5jbGFzc0xpc3QudG9nZ2xlKCdyb3RhdGUtOTAnKTtcbiAgICAgIGNvbnN0IHBhcmVudCA9IHRyaWdnZXIucGFyZW50RWxlbWVudDtcbiAgICAgIGNvbnN0IHN1Yk5hdiA9IHBhcmVudC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICBzdWJOYXYuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJyk7XG4gICAgICBzdWJOYXYuY2xhc3NMaXN0LnRvZ2dsZSgnZ3JpZCcpO1xuICAgIH0pO1xuICB9KTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTUEsWUFBWSxHQUFHQyxRQUFRLENBQUNDLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQztBQUNsRSxJQUFNQyxXQUFXLEdBQUdGLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDLG1CQUFtQixDQUFDO0FBQ2hFLElBQU1FLFFBQVEsR0FBR0gsUUFBUSxDQUFDQyxjQUFjLENBQUMsV0FBVyxDQUFDO0FBQ3JELElBQU1HLFNBQVMsR0FBR0osUUFBUSxDQUFDQyxjQUFjLENBQUMsWUFBWSxDQUFDO0FBRXZELElBQUlGLFlBQVksSUFBSUcsV0FBVyxFQUFFO0VBQy9CSCxZQUFZLENBQUNNLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxZQUFNO0lBQzNDSCxXQUFXLENBQUNJLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUN6Q0wsV0FBVyxDQUFDSSxTQUFTLENBQUNDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQztJQUNuREgsU0FBUyxDQUFDRSxTQUFTLENBQUNDLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDcENKLFFBQVEsQ0FBQ0csU0FBUyxDQUFDQyxNQUFNLENBQUMsUUFBUSxDQUFDO0VBQ3JDLENBQUMsQ0FBQztBQUNKO0FBRUEsSUFBTUMsb0JBQW9CLEdBQUdSLFFBQVEsQ0FBQ1MsZ0JBQWdCLENBQ3BELHlCQUNGLENBQUM7QUFFRCxJQUFJRCxvQkFBb0IsRUFBRTtFQUN4QkEsb0JBQW9CLENBQUNFLE9BQU8sQ0FBQyxVQUFDQyxPQUFPLEVBQUs7SUFDeENBLE9BQU8sQ0FBQ04sZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFlBQU07TUFDdENPLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFNBQVMsQ0FBQztNQUN0QkYsT0FBTyxDQUFDTCxTQUFTLENBQUNDLE1BQU0sQ0FBQyxXQUFXLENBQUM7TUFDckMsSUFBTU8sTUFBTSxHQUFHSCxPQUFPLENBQUNJLGFBQWE7TUFDcEMsSUFBTUMsTUFBTSxHQUFHRixNQUFNLENBQUNHLGtCQUFrQjtNQUN4Q0QsTUFBTSxDQUFDVixTQUFTLENBQUNDLE1BQU0sQ0FBQyxRQUFRLENBQUM7TUFDakNTLE1BQU0sQ0FBQ1YsU0FBUyxDQUFDQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2pDLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKIiwiZmlsZSI6Ii4vc3JjL2pzL21vYmlsZU1lbnUuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/mobileMenu.js\n");

/***/ }),

/***/ "./src/js/packageSlider.js":
/*!*********************************!*\
  !*** ./src/js/packageSlider.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _splidejs_splide__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @splidejs/splide */ \"./node_modules/@splidejs/splide/dist/js/splide.esm.js\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  var elms = document.getElementsByClassName(\"splide\");\n  if (elms.length > 0) {\n    for (var i = 0; i < elms.length; i++) {\n      var splide = new _splidejs_splide__WEBPACK_IMPORTED_MODULE_0__.Splide(elms[i], {\n        arrows: false,\n        pagination: false,\n        paginationKeyboard: false,\n        drag: false,\n        gap: \"30px\",\n        breakpoints: {\n          768: {\n            perPage: 1,\n            arrows: false,\n            pagination: true,\n            paginationKeyboard: true,\n            gap: \"20px\"\n          }\n        }\n      });\n      splide.mount();\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvcGFja2FnZVNsaWRlci5qcyIsIm1hcHBpbmdzIjoiOztBQUEwQztBQUUxQ0MsUUFBUSxDQUFDQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRSxZQUFZO0VBQ3hELElBQUlDLElBQUksR0FBR0YsUUFBUSxDQUFDRyxzQkFBc0IsQ0FBQyxRQUFRLENBQUM7RUFDcEQsSUFBSUQsSUFBSSxDQUFDRSxNQUFNLEdBQUcsQ0FBQyxFQUFFO0lBQ25CLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSCxJQUFJLENBQUNFLE1BQU0sRUFBRUMsQ0FBQyxFQUFFLEVBQUU7TUFDcEMsSUFBSUMsTUFBTSxHQUFHLElBQUlQLG9EQUFNLENBQUNHLElBQUksQ0FBQ0csQ0FBQyxDQUFDLEVBQUU7UUFDL0JFLE1BQU0sRUFBRSxLQUFLO1FBQ2JDLFVBQVUsRUFBRSxLQUFLO1FBQ2pCQyxrQkFBa0IsRUFBRSxLQUFLO1FBQ3pCQyxJQUFJLEVBQUUsS0FBSztRQUNYQyxHQUFHLEVBQUUsTUFBTTtRQUVYQyxXQUFXLEVBQUU7VUFDWCxHQUFHLEVBQUU7WUFDSEMsT0FBTyxFQUFFLENBQUM7WUFDVk4sTUFBTSxFQUFFLEtBQUs7WUFDYkMsVUFBVSxFQUFFLElBQUk7WUFDaEJDLGtCQUFrQixFQUFFLElBQUk7WUFDeEJFLEdBQUcsRUFBRTtVQUNQO1FBQ0Y7TUFDRixDQUFDLENBQUM7TUFDRkwsTUFBTSxDQUFDUSxLQUFLLENBQUMsQ0FBQztJQUNoQjtFQUNGO0FBQ0YsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JlZW4vLi9zcmMvanMvcGFja2FnZVNsaWRlci5qcz8wZjg5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNwbGlkZSB9IGZyb20gXCJAc3BsaWRlanMvc3BsaWRlXCI7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcbiAgbGV0IGVsbXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwic3BsaWRlXCIpO1xuICBpZiAoZWxtcy5sZW5ndGggPiAwKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbG1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgc3BsaWRlID0gbmV3IFNwbGlkZShlbG1zW2ldLCB7XG4gICAgICAgIGFycm93czogZmFsc2UsXG4gICAgICAgIHBhZ2luYXRpb246IGZhbHNlLFxuICAgICAgICBwYWdpbmF0aW9uS2V5Ym9hcmQ6IGZhbHNlLFxuICAgICAgICBkcmFnOiBmYWxzZSxcbiAgICAgICAgZ2FwOiBcIjMwcHhcIixcblxuICAgICAgICBicmVha3BvaW50czoge1xuICAgICAgICAgIDc2ODoge1xuICAgICAgICAgICAgcGVyUGFnZTogMSxcbiAgICAgICAgICAgIGFycm93czogZmFsc2UsXG4gICAgICAgICAgICBwYWdpbmF0aW9uOiB0cnVlLFxuICAgICAgICAgICAgcGFnaW5hdGlvbktleWJvYXJkOiB0cnVlLFxuICAgICAgICAgICAgZ2FwOiBcIjIwcHhcIixcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBzcGxpZGUubW91bnQoKTtcbiAgICB9XG4gIH1cbn0pO1xuIl0sIm5hbWVzIjpbIlNwbGlkZSIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImVsbXMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwibGVuZ3RoIiwiaSIsInNwbGlkZSIsImFycm93cyIsInBhZ2luYXRpb24iLCJwYWdpbmF0aW9uS2V5Ym9hcmQiLCJkcmFnIiwiZ2FwIiwiYnJlYWtwb2ludHMiLCJwZXJQYWdlIiwibW91bnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/packageSlider.js\n");

/***/ }),

/***/ "./src/js/packageToggle.js":
/*!*********************************!*\
  !*** ./src/js/packageToggle.js ***!
  \*********************************/
/***/ (() => {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar packageToggleWrapper = document.getElementById('package-toggle-wrapper');\nif (packageToggleWrapper) {\n  var getRadioValueByName = function getRadioValueByName(name) {\n    var radios = document.getElementsByName(name);\n    var activeInput = _toConsumableArray(radios).find(function (input) {\n      return input.checked;\n    });\n    if (!activeInput) return null;\n    return activeInput === null || activeInput === void 0 ? void 0 : activeInput.value;\n  };\n  var updatePackageBookButtons = function updatePackageBookButtons(paymentPlan) {\n    if (!paymentPlan || !packageBookButtons) return;\n    packageBookButtons.forEach(function (button) {\n      var url = new URL(button.href);\n      var params = new URLSearchParams(url.search);\n      params.set('payment-plan', paymentPlan);\n      url.search = params.toString();\n      button.href = url.toString();\n      console.log(button.href);\n    });\n  };\n  var toggleCards = function toggleCards() {\n    var selectedValue = getRadioValueByName('payment-plan');\n    var singlePaymentInformationWrappers = document.querySelectorAll('.single-payment-information-wrapper');\n    var splitPaymentInformationWrappers = document.querySelectorAll('.split-payment-information-wrapper');\n    updatePackageBookButtons(selectedValue);\n    if (selectedValue === 'single') {\n      if (discountBadges) {\n        discountBadges.forEach(function (badge) {\n          badge.style.display = 'none';\n        });\n      }\n      singlePaymentInformationWrappers.forEach(function (wrapper) {\n        wrapper.style.display = 'block';\n      });\n      splitPaymentInformationWrappers.forEach(function (wrapper) {\n        wrapper.style.display = 'none';\n      });\n    } else {\n      if (discountBadges) {\n        discountBadges.forEach(function (badge) {\n          badge.style.display = 'none';\n        });\n      }\n      singlePaymentInformationWrappers.forEach(function (wrapper) {\n        wrapper.style.display = 'none';\n      });\n      splitPaymentInformationWrappers.forEach(function (wrapper) {\n        wrapper.style.display = 'block';\n      });\n    }\n  };\n  var packageBookButtons = document.querySelectorAll('.package-book-button');\n  updatePackageBookButtons('single');\n  var discountBadges = document.querySelectorAll('.discount-badge');\n  discountBadges.forEach(function (badge) {\n    badge.style.display = 'none';\n  });\n  var paymentSplitRadios = Array.from(document.getElementsByName('payment-plan'));\n  paymentSplitRadios.forEach(function (radio) {\n    return radio.addEventListener('change', toggleCards);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwYWNrYWdlVG9nZ2xlV3JhcHBlciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRSYWRpb1ZhbHVlQnlOYW1lIiwibmFtZSIsInJhZGlvcyIsImdldEVsZW1lbnRzQnlOYW1lIiwiYWN0aXZlSW5wdXQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJmaW5kIiwiaW5wdXQiLCJjaGVja2VkIiwidmFsdWUiLCJ1cGRhdGVQYWNrYWdlQm9va0J1dHRvbnMiLCJwYXltZW50UGxhbiIsInBhY2thZ2VCb29rQnV0dG9ucyIsImZvckVhY2giLCJidXR0b24iLCJ1cmwiLCJVUkwiLCJocmVmIiwicGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwic2VhcmNoIiwic2V0IiwidG9TdHJpbmciLCJjb25zb2xlIiwibG9nIiwidG9nZ2xlQ2FyZHMiLCJzZWxlY3RlZFZhbHVlIiwic2luZ2xlUGF5bWVudEluZm9ybWF0aW9uV3JhcHBlcnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwic3BsaXRQYXltZW50SW5mb3JtYXRpb25XcmFwcGVycyIsImRpc2NvdW50QmFkZ2VzIiwiYmFkZ2UiLCJzdHlsZSIsImRpc3BsYXkiLCJ3cmFwcGVyIiwicGF5bWVudFNwbGl0UmFkaW9zIiwiQXJyYXkiLCJmcm9tIiwicmFkaW8iLCJhZGRFdmVudExpc3RlbmVyIl0sInNvdXJjZXMiOlsid2VicGFjazovL2dyZWVuLy4vc3JjL2pzL3BhY2thZ2VUb2dnbGUuanM/ZjY0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYWNrYWdlVG9nZ2xlV3JhcHBlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWNrYWdlLXRvZ2dsZS13cmFwcGVyJyk7XG5cbmlmIChwYWNrYWdlVG9nZ2xlV3JhcHBlcikge1xuICBmdW5jdGlvbiBnZXRSYWRpb1ZhbHVlQnlOYW1lKG5hbWUpIHtcbiAgICBjb25zdCByYWRpb3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShuYW1lKTtcbiAgICBjb25zdCBhY3RpdmVJbnB1dCA9IFsuLi5yYWRpb3NdLmZpbmQoKGlucHV0KSA9PiBpbnB1dC5jaGVja2VkKTtcbiAgICBpZiAoIWFjdGl2ZUlucHV0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gYWN0aXZlSW5wdXQ/LnZhbHVlO1xuICB9XG4gIGNvbnN0IHBhY2thZ2VCb29rQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wYWNrYWdlLWJvb2stYnV0dG9uJyk7XG4gIGZ1bmN0aW9uIHVwZGF0ZVBhY2thZ2VCb29rQnV0dG9ucyhwYXltZW50UGxhbikge1xuICAgIGlmICghcGF5bWVudFBsYW4gfHwgIXBhY2thZ2VCb29rQnV0dG9ucykgcmV0dXJuO1xuICAgIHBhY2thZ2VCb29rQnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IHtcbiAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoYnV0dG9uLmhyZWYpO1xuICAgICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh1cmwuc2VhcmNoKTtcbiAgICAgIHBhcmFtcy5zZXQoJ3BheW1lbnQtcGxhbicsIHBheW1lbnRQbGFuKTtcbiAgICAgIHVybC5zZWFyY2ggPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgICAgIGJ1dHRvbi5ocmVmID0gdXJsLnRvU3RyaW5nKCk7XG4gICAgICBjb25zb2xlLmxvZyhidXR0b24uaHJlZik7XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVQYWNrYWdlQm9va0J1dHRvbnMoJ3NpbmdsZScpO1xuXG4gIGNvbnN0IGRpc2NvdW50QmFkZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRpc2NvdW50LWJhZGdlJyk7XG4gIGRpc2NvdW50QmFkZ2VzLmZvckVhY2goKGJhZGdlKSA9PiB7XG4gICAgYmFkZ2Uuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfSk7XG5cbiAgZnVuY3Rpb24gdG9nZ2xlQ2FyZHMoKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRWYWx1ZSA9IGdldFJhZGlvVmFsdWVCeU5hbWUoJ3BheW1lbnQtcGxhbicpO1xuICAgIGNvbnN0IHNpbmdsZVBheW1lbnRJbmZvcm1hdGlvbldyYXBwZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICcuc2luZ2xlLXBheW1lbnQtaW5mb3JtYXRpb24td3JhcHBlcidcbiAgICApO1xuICAgIGNvbnN0IHNwbGl0UGF5bWVudEluZm9ybWF0aW9uV3JhcHBlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgJy5zcGxpdC1wYXltZW50LWluZm9ybWF0aW9uLXdyYXBwZXInXG4gICAgKTtcbiAgICB1cGRhdGVQYWNrYWdlQm9va0J1dHRvbnMoc2VsZWN0ZWRWYWx1ZSk7XG4gICAgaWYgKHNlbGVjdGVkVmFsdWUgPT09ICdzaW5nbGUnKSB7XG4gICAgICBpZiAoZGlzY291bnRCYWRnZXMpIHtcbiAgICAgICAgZGlzY291bnRCYWRnZXMuZm9yRWFjaCgoYmFkZ2UpID0+IHtcbiAgICAgICAgICBiYWRnZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHNpbmdsZVBheW1lbnRJbmZvcm1hdGlvbldyYXBwZXJzLmZvckVhY2goKHdyYXBwZXIpID0+IHtcbiAgICAgICAgd3JhcHBlci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIH0pO1xuICAgICAgc3BsaXRQYXltZW50SW5mb3JtYXRpb25XcmFwcGVycy5mb3JFYWNoKCh3cmFwcGVyKSA9PiB7XG4gICAgICAgIHdyYXBwZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZGlzY291bnRCYWRnZXMpIHtcbiAgICAgICAgZGlzY291bnRCYWRnZXMuZm9yRWFjaCgoYmFkZ2UpID0+IHtcbiAgICAgICAgICBiYWRnZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHNpbmdsZVBheW1lbnRJbmZvcm1hdGlvbldyYXBwZXJzLmZvckVhY2goKHdyYXBwZXIpID0+IHtcbiAgICAgICAgd3JhcHBlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgfSk7XG4gICAgICBzcGxpdFBheW1lbnRJbmZvcm1hdGlvbldyYXBwZXJzLmZvckVhY2goKHdyYXBwZXIpID0+IHtcbiAgICAgICAgd3JhcHBlci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHBheW1lbnRTcGxpdFJhZGlvcyA9IEFycmF5LmZyb20oXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoJ3BheW1lbnQtcGxhbicpXG4gICk7XG4gIHBheW1lbnRTcGxpdFJhZGlvcy5mb3JFYWNoKChyYWRpbykgPT5cbiAgICByYWRpby5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0b2dnbGVDYXJkcylcbiAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTUEsb0JBQW9CLEdBQUdDLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDLHdCQUF3QixDQUFDO0FBRTlFLElBQUlGLG9CQUFvQixFQUFFO0VBQUEsSUFDZkcsbUJBQW1CLEdBQTVCLFNBQVNBLG1CQUFtQkEsQ0FBQ0MsSUFBSSxFQUFFO0lBQ2pDLElBQU1DLE1BQU0sR0FBR0osUUFBUSxDQUFDSyxpQkFBaUIsQ0FBQ0YsSUFBSSxDQUFDO0lBQy9DLElBQU1HLFdBQVcsR0FBR0Msa0JBQUEsQ0FBSUgsTUFBTSxFQUFFSSxJQUFJLENBQUMsVUFBQ0MsS0FBSztNQUFBLE9BQUtBLEtBQUssQ0FBQ0MsT0FBTztJQUFBLEVBQUM7SUFDOUQsSUFBSSxDQUFDSixXQUFXLEVBQUUsT0FBTyxJQUFJO0lBQzdCLE9BQU9BLFdBQVcsYUFBWEEsV0FBVyx1QkFBWEEsV0FBVyxDQUFFSyxLQUFLO0VBQzNCLENBQUM7RUFBQSxJQUVRQyx3QkFBd0IsR0FBakMsU0FBU0Esd0JBQXdCQSxDQUFDQyxXQUFXLEVBQUU7SUFDN0MsSUFBSSxDQUFDQSxXQUFXLElBQUksQ0FBQ0Msa0JBQWtCLEVBQUU7SUFDekNBLGtCQUFrQixDQUFDQyxPQUFPLENBQUMsVUFBQ0MsTUFBTSxFQUFLO01BQ3JDLElBQU1DLEdBQUcsR0FBRyxJQUFJQyxHQUFHLENBQUNGLE1BQU0sQ0FBQ0csSUFBSSxDQUFDO01BQ2hDLElBQU1DLE1BQU0sR0FBRyxJQUFJQyxlQUFlLENBQUNKLEdBQUcsQ0FBQ0ssTUFBTSxDQUFDO01BQzlDRixNQUFNLENBQUNHLEdBQUcsQ0FBQyxjQUFjLEVBQUVWLFdBQVcsQ0FBQztNQUN2Q0ksR0FBRyxDQUFDSyxNQUFNLEdBQUdGLE1BQU0sQ0FBQ0ksUUFBUSxDQUFDLENBQUM7TUFDOUJSLE1BQU0sQ0FBQ0csSUFBSSxHQUFHRixHQUFHLENBQUNPLFFBQVEsQ0FBQyxDQUFDO01BQzVCQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ1YsTUFBTSxDQUFDRyxJQUFJLENBQUM7SUFDMUIsQ0FBQyxDQUFDO0VBQ0osQ0FBQztFQUFBLElBU1FRLFdBQVcsR0FBcEIsU0FBU0EsV0FBV0EsQ0FBQSxFQUFHO0lBQ3JCLElBQU1DLGFBQWEsR0FBRzFCLG1CQUFtQixDQUFDLGNBQWMsQ0FBQztJQUN6RCxJQUFNMkIsZ0NBQWdDLEdBQUc3QixRQUFRLENBQUM4QixnQkFBZ0IsQ0FDaEUscUNBQ0YsQ0FBQztJQUNELElBQU1DLCtCQUErQixHQUFHL0IsUUFBUSxDQUFDOEIsZ0JBQWdCLENBQy9ELG9DQUNGLENBQUM7SUFDRGxCLHdCQUF3QixDQUFDZ0IsYUFBYSxDQUFDO0lBQ3ZDLElBQUlBLGFBQWEsS0FBSyxRQUFRLEVBQUU7TUFDOUIsSUFBSUksY0FBYyxFQUFFO1FBQ2xCQSxjQUFjLENBQUNqQixPQUFPLENBQUMsVUFBQ2tCLEtBQUssRUFBSztVQUNoQ0EsS0FBSyxDQUFDQyxLQUFLLENBQUNDLE9BQU8sR0FBRyxNQUFNO1FBQzlCLENBQUMsQ0FBQztNQUNKO01BQ0FOLGdDQUFnQyxDQUFDZCxPQUFPLENBQUMsVUFBQ3FCLE9BQU8sRUFBSztRQUNwREEsT0FBTyxDQUFDRixLQUFLLENBQUNDLE9BQU8sR0FBRyxPQUFPO01BQ2pDLENBQUMsQ0FBQztNQUNGSiwrQkFBK0IsQ0FBQ2hCLE9BQU8sQ0FBQyxVQUFDcUIsT0FBTyxFQUFLO1FBQ25EQSxPQUFPLENBQUNGLEtBQUssQ0FBQ0MsT0FBTyxHQUFHLE1BQU07TUFDaEMsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxNQUFNO01BQ0wsSUFBSUgsY0FBYyxFQUFFO1FBQ2xCQSxjQUFjLENBQUNqQixPQUFPLENBQUMsVUFBQ2tCLEtBQUssRUFBSztVQUNoQ0EsS0FBSyxDQUFDQyxLQUFLLENBQUNDLE9BQU8sR0FBRyxNQUFNO1FBQzlCLENBQUMsQ0FBQztNQUNKO01BQ0FOLGdDQUFnQyxDQUFDZCxPQUFPLENBQUMsVUFBQ3FCLE9BQU8sRUFBSztRQUNwREEsT0FBTyxDQUFDRixLQUFLLENBQUNDLE9BQU8sR0FBRyxNQUFNO01BQ2hDLENBQUMsQ0FBQztNQUNGSiwrQkFBK0IsQ0FBQ2hCLE9BQU8sQ0FBQyxVQUFDcUIsT0FBTyxFQUFLO1FBQ25EQSxPQUFPLENBQUNGLEtBQUssQ0FBQ0MsT0FBTyxHQUFHLE9BQU87TUFDakMsQ0FBQyxDQUFDO0lBQ0o7RUFDRixDQUFDO0VBdERELElBQU1yQixrQkFBa0IsR0FBR2QsUUFBUSxDQUFDOEIsZ0JBQWdCLENBQUMsc0JBQXNCLENBQUM7RUFhNUVsQix3QkFBd0IsQ0FBQyxRQUFRLENBQUM7RUFFbEMsSUFBTW9CLGNBQWMsR0FBR2hDLFFBQVEsQ0FBQzhCLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDO0VBQ25FRSxjQUFjLENBQUNqQixPQUFPLENBQUMsVUFBQ2tCLEtBQUssRUFBSztJQUNoQ0EsS0FBSyxDQUFDQyxLQUFLLENBQUNDLE9BQU8sR0FBRyxNQUFNO0VBQzlCLENBQUMsQ0FBQztFQXNDRixJQUFNRSxrQkFBa0IsR0FBR0MsS0FBSyxDQUFDQyxJQUFJLENBQ25DdkMsUUFBUSxDQUFDSyxpQkFBaUIsQ0FBQyxjQUFjLENBQzNDLENBQUM7RUFDRGdDLGtCQUFrQixDQUFDdEIsT0FBTyxDQUFDLFVBQUN5QixLQUFLO0lBQUEsT0FDL0JBLEtBQUssQ0FBQ0MsZ0JBQWdCLENBQUMsUUFBUSxFQUFFZCxXQUFXLENBQUM7RUFBQSxDQUMvQyxDQUFDO0FBQ0giLCJmaWxlIjoiLi9zcmMvanMvcGFja2FnZVRvZ2dsZS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/packageToggle.js\n");

/***/ }),

/***/ "./src/js/search.js":
/*!**************************!*\
  !*** ./src/js/search.js ***!
  \**************************/
/***/ (() => {

eval("var searchInput = document.getElementById(\"search-input\");\nvar loadMoreButton = document.getElementById(\"load-more-button\");\nvar loadingIndicator = document.getElementById(\"loading-indicator\");\nvar resultContainer = document.getElementById(\"rusults-container\");\nvar searchResultContainer = document.getElementById(\"search-results-container\");\nvar defaultSection = document.getElementById(\"default-section\");\nvar loadMoreSection = document.getElementById(\"load-more-section\");\nvar searchSection = document.getElementById(\"search-section\");\nvar _window$location = window.location,\n  host = _window$location.host,\n  pathname = _window$location.pathname;\nvar searchLoadMoreButton, searchLoadingIndicator, searchMoreResultContainer, searchDefaultSection, searchLoadMoreSection, searchMoreSection;\nvar loadMorePage = 0;\nvar searchLoadMorePage = 0;\nif (searchInput) searchInput.addEventListener(\"keypress\", function (e) {\n  return search(e);\n});\nif (loadMoreButton) loadMoreButton.addEventListener(\"click\", loadMore);\nfunction search(e) {\n  if (e.code == \"Enter\") {\n    var searchKeyWords = searchInput.value;\n    var url = \"/ajax/search?q=\".concat(searchKeyWords);\n    searchSection.classList.remove(\"hidden\");\n    setTimeout(function () {\n      fetch(url).then(function (res) {\n        if (res.status == 200) {\n          return res.text();\n        } else {\n          return \"No content found, please try another keyword.\";\n        }\n      }).then(function (data) {\n        defaultSection.classList.add(\"hidden\");\n        loadMoreSection.classList.add(\"hidden\");\n        searchSection.classList.add(\"hidden\");\n        searchResultContainer.innerHTML = data;\n        return searchResultContainer;\n      }).then(function () {\n        searchLoadMoreButton = document.getElementById(\"search-load-more-button\");\n        searchLoadingIndicator = document.getElementById(\"search-loading-more-indicator\");\n        searchMoreResultContainer = document.getElementById(\"search-more-rusults-container\");\n        searchDefaultSection = document.getElementById(\"search-default-section\");\n        searchLoadMoreSection = document.getElementById(\"search-load-more-section\");\n        searchMoreSection = document.getElementById(\"search-more-section\");\n        if (searchLoadMoreButton) searchLoadMoreButton.addEventListener(\"click\", searchLoadMore);\n      });\n    }, 1000);\n  }\n}\nfunction loadMore() {\n  loadMorePage++;\n  loadMoreButton.classList.add(\"hidden\");\n  loadingIndicator.classList.remove(\"hidden\");\n  loadingIndicator.classList.add(\"flex\");\n  var catSlug = document.getElementById(\"catSlugHolder\");\n  var url = \"/ajax/load-more?page=\".concat(loadMorePage);\n  if (catSlug) {\n    var slug = catSlug.textContent;\n    console.log(slug);\n    url += \"&catslug=\".concat(slug);\n  }\n  fetch(url).then(function (res) {\n    if (res.status == 200) {\n      console.log(res.status);\n      loadingIndicator.classList.remove(\"flex\");\n      loadingIndicator.classList.add(\"hidden\");\n      return res.text();\n    } else {\n      return \"No more posts.\";\n    }\n  }).then(function (body) {\n    var contentBlock = document.createElement(\"div\");\n    var blockOrder = \"content\" + loadMorePage;\n    contentBlock.classList.add(blockOrder);\n    resultContainer.appendChild(contentBlock);\n    contentBlock.innerHTML = body;\n    var noMore = body.includes(\"noMoreArticles\") ? true : false;\n    if (!noMore) loadMoreButton.classList.add(\"auto\");\n    if (!noMore) loadMoreButton.classList.remove(\"hidden\");\n  });\n}\nfunction searchLoadMore() {\n  searchLoadMorePage++;\n  searchLoadMoreButton.classList.add(\"hidden\");\n  searchLoadingIndicator.classList.remove(\"hidden\");\n  searchLoadingIndicator.classList.add(\"flex\");\n  var queryKey = document.getElementById(\"queryKey\").textContent;\n  var url = \"/searchmore?q=\".concat(queryKey, \"&page=\").concat(searchLoadMorePage);\n  fetch(url).then(function (res) {\n    if (res.status == 200) {\n      return res.text();\n    } else {\n      return \"No more posts.\";\n    }\n  }).then(function (body) {\n    setTimeout(function () {\n      searchLoadingIndicator.classList.remove(\"flex\");\n      searchLoadingIndicator.classList.add(\"hidden\");\n      var contentBlock = document.createElement(\"div\");\n      var blockOrder = \"content\" + loadMorePage;\n      contentBlock.classList.add(blockOrder);\n      searchMoreResultContainer.appendChild(contentBlock);\n      contentBlock.innerHTML = body;\n      var noMore = body.includes(\"noMoreSArticles\") ? true : false;\n      if (!noMore) searchLoadMoreButton.classList.add(\"auto\");\n      if (!noMore) searchLoadMoreButton.classList.remove(\"hidden\");\n    }, 1000);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/search.js\n");

/***/ }),

/***/ "./src/js/serviceChartTabs.js":
/*!************************************!*\
  !*** ./src/js/serviceChartTabs.js ***!
  \************************************/
/***/ (() => {

eval("document.addEventListener('DOMContentLoaded', function () {\n  var scTitles = document.getElementsByClassName('s-chart-title');\n  var scContents = document.getElementsByClassName('s-chart-content');\n  if (scTitles.length > 1) {\n    for (var i = 1; i < scTitles.length; i++) {\n      initScTitle(scTitles[i]);\n      initScContent(scContents[i]);\n    }\n  }\n  var _loop = function _loop(_i) {\n    scTitles[_i].addEventListener('click', function (e) {\n      Array.from(scTitles, function (el) {\n        return initScTitle(el);\n      });\n      Array.from(scContents, function (el) {\n        return initScContent(el);\n      });\n      this.style.backgroundColor = 'white';\n      scContents[_i].style.display = 'flex';\n    });\n  };\n  for (var _i = 0; _i < scTitles.length; _i++) {\n    _loop(_i);\n  }\n\n  // functions for hide same images that acrossing months and make a new image with laying across those months. Keep it here for probably need later.\n\n  // const operations = [];\n\n  // if(scContents.length>0){\n  //     for (let i = 0; i < scContents.length; i++) {\n  //         operations.push(scContents[i].getElementsByClassName('s-chart-image'));\n  //     } \n  // }\n\n  // const len = operations.length;\n  // for ( i = 0; i < len; i++) {\n  //     let srcArray = [];\n  //     let images = operations[i];\n  //     Array.from(images,(el)=>{\n  //         temSrc = el.getAttribute('src');\n  //         srcArray.push(temSrc);\n  //     })\n\n  //     srcArray.forEach(el => {\n  //         let index = srcArray.indexOf(el);\n  //         if (index !== srcArray.length) {\n  //             let nextEl = srcArray[index + 1];\n  //             if (el==nextEl) {\n\n  //                 console.log('el is: '+ el + '. nextEL is '+ nextEl);\n\n  //                 images[index+1].parentElement.style.display='none';\n\n  //                 images[index].parentElement.style.position='absolute';\n  //                 images[index].parentElement.style.top = '180px';\n  //                 images[index].parentElement.style.right = '-90px';\n  //                 // images[index].style.display = 'block';\n  //                 images[index].parentElement.style.backgroundColor = 'white';\n  //                 images[index].parentElement.style.zIndex = '20';\n\n  //             };\n  //         };\n  //     });\n  //     console.log(srcArray);\n  // }\n});\n\nfunction initScTitle(el) {\n  el.style.backgroundColor = 'rgba(0, 119, 73, 0.07)';\n}\nfunction initScContent(el) {\n  el.style.display = 'none';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzY1RpdGxlcyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJzY0NvbnRlbnRzIiwibGVuZ3RoIiwiaSIsImluaXRTY1RpdGxlIiwiaW5pdFNjQ29udGVudCIsIl9sb29wIiwiX2kiLCJlIiwiQXJyYXkiLCJmcm9tIiwiZWwiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsImRpc3BsYXkiXSwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JlZW4vLi9zcmMvanMvc2VydmljZUNoYXJ0VGFicy5qcz83YTI1Il0sInNvdXJjZXNDb250ZW50IjpbImRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgY29uc3Qgc2NUaXRsZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCAncy1jaGFydC10aXRsZScgKTtcbiAgICBjb25zdCBzY0NvbnRlbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggJ3MtY2hhcnQtY29udGVudCcgKTtcbiAgICBcbiAgICBpZihzY1RpdGxlcy5sZW5ndGggPiAxKXtcbiAgICAgICAgZm9yICggbGV0IGkgPSAxOyBpIDwgc2NUaXRsZXMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICBpbml0U2NUaXRsZShzY1RpdGxlc1tpXSk7XG4gICAgICAgICAgICBpbml0U2NDb250ZW50KHNjQ29udGVudHNbaV0pO1xuICAgICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY1RpdGxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzY1RpdGxlc1tpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBBcnJheS5mcm9tKHNjVGl0bGVzLChlbCk9PiBpbml0U2NUaXRsZShlbCkpO1xuICAgICAgICAgICAgQXJyYXkuZnJvbShzY0NvbnRlbnRzLChlbCk9PiBpbml0U2NDb250ZW50KGVsKSk7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICd3aGl0ZSc7XG4gICAgICAgICAgICBzY0NvbnRlbnRzW2ldLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICAgIH0pICAgXG4gICAgfSBcblxuICAgIC8vIGZ1bmN0aW9ucyBmb3IgaGlkZSBzYW1lIGltYWdlcyB0aGF0IGFjcm9zc2luZyBtb250aHMgYW5kIG1ha2UgYSBuZXcgaW1hZ2Ugd2l0aCBsYXlpbmcgYWNyb3NzIHRob3NlIG1vbnRocy4gS2VlcCBpdCBoZXJlIGZvciBwcm9iYWJseSBuZWVkIGxhdGVyLlxuXG4gICAgLy8gY29uc3Qgb3BlcmF0aW9ucyA9IFtdO1xuXG4gICAgLy8gaWYoc2NDb250ZW50cy5sZW5ndGg+MCl7XG4gICAgLy8gICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NDb250ZW50cy5sZW5ndGg7IGkrKykge1xuICAgIC8vICAgICAgICAgb3BlcmF0aW9ucy5wdXNoKHNjQ29udGVudHNbaV0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncy1jaGFydC1pbWFnZScpKTtcbiAgICAvLyAgICAgfSBcbiAgICAvLyB9XG5cbiAgICAvLyBjb25zdCBsZW4gPSBvcGVyYXRpb25zLmxlbmd0aDtcbiAgICAvLyBmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgLy8gICAgIGxldCBzcmNBcnJheSA9IFtdO1xuICAgIC8vICAgICBsZXQgaW1hZ2VzID0gb3BlcmF0aW9uc1tpXTtcbiAgICAvLyAgICAgQXJyYXkuZnJvbShpbWFnZXMsKGVsKT0+e1xuICAgIC8vICAgICAgICAgdGVtU3JjID0gZWwuZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgICAvLyAgICAgICAgIHNyY0FycmF5LnB1c2godGVtU3JjKTtcbiAgICAvLyAgICAgfSlcblxuICAgIC8vICAgICBzcmNBcnJheS5mb3JFYWNoKGVsID0+IHtcbiAgICAvLyAgICAgICAgIGxldCBpbmRleCA9IHNyY0FycmF5LmluZGV4T2YoZWwpO1xuICAgIC8vICAgICAgICAgaWYgKGluZGV4ICE9PSBzcmNBcnJheS5sZW5ndGgpIHtcbiAgICAvLyAgICAgICAgICAgICBsZXQgbmV4dEVsID0gc3JjQXJyYXlbaW5kZXggKyAxXTtcbiAgICAvLyAgICAgICAgICAgICBpZiAoZWw9PW5leHRFbCkge1xuXG4gICAgLy8gICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlbCBpczogJysgZWwgKyAnLiBuZXh0RUwgaXMgJysgbmV4dEVsKTtcbiAgICBcbiAgICAvLyAgICAgICAgICAgICAgICAgaW1hZ2VzW2luZGV4KzFdLnBhcmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheT0nbm9uZSc7XG5cbiAgICAvLyAgICAgICAgICAgICAgICAgaW1hZ2VzW2luZGV4XS5wYXJlbnRFbGVtZW50LnN0eWxlLnBvc2l0aW9uPSdhYnNvbHV0ZSc7XG4gICAgLy8gICAgICAgICAgICAgICAgIGltYWdlc1tpbmRleF0ucGFyZW50RWxlbWVudC5zdHlsZS50b3AgPSAnMTgwcHgnO1xuICAgIC8vICAgICAgICAgICAgICAgICBpbWFnZXNbaW5kZXhdLnBhcmVudEVsZW1lbnQuc3R5bGUucmlnaHQgPSAnLTkwcHgnO1xuICAgIC8vICAgICAgICAgICAgICAgICAvLyBpbWFnZXNbaW5kZXhdLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIC8vICAgICAgICAgICAgICAgICBpbWFnZXNbaW5kZXhdLnBhcmVudEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3doaXRlJztcbiAgICAvLyAgICAgICAgICAgICAgICAgaW1hZ2VzW2luZGV4XS5wYXJlbnRFbGVtZW50LnN0eWxlLnpJbmRleCA9ICcyMCc7XG4gICAgXG4gICAgLy8gICAgICAgICAgICAgfTtcbiAgICAvLyAgICAgICAgIH07XG4gICAgLy8gICAgIH0pO1xuICAgIC8vICAgICBjb25zb2xlLmxvZyhzcmNBcnJheSk7XG4gICAgLy8gfVxuXG59ICk7XG5cbmZ1bmN0aW9uIGluaXRTY1RpdGxlKGVsKXtcbiAgICBlbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgwLCAxMTksIDczLCAwLjA3KSc7XG59XG5mdW5jdGlvbiBpbml0U2NDb250ZW50KGVsKXtcbiAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xufVxuXG4iXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFRLENBQUNDLGdCQUFnQixDQUFFLGtCQUFrQixFQUFFLFlBQVc7RUFDdEQsSUFBTUMsUUFBUSxHQUFHRixRQUFRLENBQUNHLHNCQUFzQixDQUFFLGVBQWdCLENBQUM7RUFDbkUsSUFBTUMsVUFBVSxHQUFHSixRQUFRLENBQUNHLHNCQUFzQixDQUFFLGlCQUFrQixDQUFDO0VBRXZFLElBQUdELFFBQVEsQ0FBQ0csTUFBTSxHQUFHLENBQUMsRUFBQztJQUNuQixLQUFNLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0osUUFBUSxDQUFDRyxNQUFNLEVBQUVDLENBQUMsRUFBRSxFQUFHO01BQ3hDQyxXQUFXLENBQUNMLFFBQVEsQ0FBQ0ksQ0FBQyxDQUFDLENBQUM7TUFDeEJFLGFBQWEsQ0FBQ0osVUFBVSxDQUFDRSxDQUFDLENBQUMsQ0FBQztJQUM5QjtFQUNOO0VBQUMsSUFBQUcsS0FBQSxZQUFBQSxNQUFBQyxFQUFBLEVBQ3lDO0lBQ3RDUixRQUFRLENBQUNJLEVBQUMsQ0FBQyxDQUFDTCxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsVUFBVVUsQ0FBQyxFQUFFO01BQy9DQyxLQUFLLENBQUNDLElBQUksQ0FBQ1gsUUFBUSxFQUFDLFVBQUNZLEVBQUU7UUFBQSxPQUFJUCxXQUFXLENBQUNPLEVBQUUsQ0FBQztNQUFBLEVBQUM7TUFDM0NGLEtBQUssQ0FBQ0MsSUFBSSxDQUFDVCxVQUFVLEVBQUMsVUFBQ1UsRUFBRTtRQUFBLE9BQUlOLGFBQWEsQ0FBQ00sRUFBRSxDQUFDO01BQUEsRUFBQztNQUMvQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsZUFBZSxHQUFHLE9BQU87TUFDcENaLFVBQVUsQ0FBQ0UsRUFBQyxDQUFDLENBQUNTLEtBQUssQ0FBQ0UsT0FBTyxHQUFHLE1BQU07SUFDeEMsQ0FBQyxDQUFDO0VBQ04sQ0FBQztFQVBELEtBQUssSUFBSVgsRUFBQyxHQUFHLENBQUMsRUFBRUEsRUFBQyxHQUFHSixRQUFRLENBQUNHLE1BQU0sRUFBRUMsRUFBQyxFQUFFO0lBQUFHLEtBQUEsQ0FBQUMsRUFBQTtFQUFBOztFQVN4Qzs7RUFFQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBOztFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7O0VBRUE7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQTs7RUFFQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7O0VBRUE7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBQUVKLENBQUUsQ0FBQzs7QUFFSCxTQUFTSCxXQUFXQSxDQUFDTyxFQUFFLEVBQUM7RUFDcEJBLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDQyxlQUFlLEdBQUcsd0JBQXdCO0FBQ3ZEO0FBQ0EsU0FBU1IsYUFBYUEsQ0FBQ00sRUFBRSxFQUFDO0VBQ3RCQSxFQUFFLENBQUNDLEtBQUssQ0FBQ0UsT0FBTyxHQUFHLE1BQU07QUFDN0IiLCJmaWxlIjoiLi9zcmMvanMvc2VydmljZUNoYXJ0VGFicy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/serviceChartTabs.js\n");

/***/ }),

/***/ "./src/js/sidebarVarValue.js":
/*!***********************************!*\
  !*** ./src/js/sidebarVarValue.js ***!
  \***********************************/
/***/ (() => {

eval("// const r = document.querySelector(':root');\n// const aside = document.querySelector(\"aside\");\n// if (aside) r.style.setProperty('--desktop-padding', 'none');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsid2VicGFjazovL2dyZWVuLy4vc3JjL2pzL3NpZGViYXJWYXJWYWx1ZS5qcz8yY2I1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGNvbnN0IHIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCc6cm9vdCcpO1xuLy8gY29uc3QgYXNpZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYXNpZGVcIik7XG4vLyBpZiAoYXNpZGUpIHIuc3R5bGUuc2V0UHJvcGVydHkoJy0tZGVza3RvcC1wYWRkaW5nJywgJ25vbmUnKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vc3JjL2pzL3NpZGViYXJWYXJWYWx1ZS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/sidebarVarValue.js\n");

/***/ }),

/***/ "./src/js/treecare.js":
/*!****************************!*\
  !*** ./src/js/treecare.js ***!
  \****************************/
/***/ (() => {

eval("document.addEventListener('DOMContentLoaded', function () {\n  var clickElement = document.querySelectorAll('.treeTips');\n  for (var i = 0; i < clickElement.length; i++) {\n    clickElement[i].addEventListener('click', function () {\n      treeTips(this.dataset.title, this);\n    });\n  }\n});\nfunction treeTips(clickElement, itemClicked) {\n  var change = document.getElementById(clickElement);\n  var blocks = document.querySelectorAll('.treeTips');\n  var childBlocks = document.querySelectorAll('.careTips');\n  blocks.forEach(function (block) {\n    classChanger(block, 'treeTips-inactive', 'treeTips-active');\n  });\n  classChanger(itemClicked, 'treeTips-active', 'treeTips-inactive');\n  childBlocks.forEach(function (block) {\n    classChanger(block, 'careTips-inactive', 'careTips-active');\n  });\n  classChanger(change, 'careTips-active', 'careTips-inactive');\n}\nfunction classChanger(element, classToAdd, classToRemove) {\n  element.classList.remove(classToRemove);\n  element.classList.add(classToAdd);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGlja0VsZW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaSIsImxlbmd0aCIsInRyZWVUaXBzIiwiZGF0YXNldCIsInRpdGxlIiwiaXRlbUNsaWNrZWQiLCJjaGFuZ2UiLCJnZXRFbGVtZW50QnlJZCIsImJsb2NrcyIsImNoaWxkQmxvY2tzIiwiZm9yRWFjaCIsImJsb2NrIiwiY2xhc3NDaGFuZ2VyIiwiZWxlbWVudCIsImNsYXNzVG9BZGQiLCJjbGFzc1RvUmVtb3ZlIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYWRkIl0sInNvdXJjZXMiOlsid2VicGFjazovL2dyZWVuLy4vc3JjL2pzL3RyZWVjYXJlLmpzPzlhNGIiXSwic291cmNlc0NvbnRlbnQiOlsiZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHtcbiAgICBsZXQgY2xpY2tFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJy50cmVlVGlwcycgKTtcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBjbGlja0VsZW1lbnQubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgIGNsaWNrRWxlbWVudFtpXS5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRyZWVUaXBzKHRoaXMuZGF0YXNldC50aXRsZSwgdGhpcyk7XG4gICAgICAgIH0gKTtcbiAgICB9XG59KTtcblxuZnVuY3Rpb24gdHJlZVRpcHMoY2xpY2tFbGVtZW50LCBpdGVtQ2xpY2tlZCl7IFxuICAgIGNvbnN0IGNoYW5nZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNsaWNrRWxlbWVudCk7XG4gICAgY29uc3QgYmxvY2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRyZWVUaXBzJyk7XG4gICAgY29uc3QgY2hpbGRCbG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2FyZVRpcHMnKTtcblxuICAgIGJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcbiAgICAgICAgY2xhc3NDaGFuZ2VyKGJsb2NrLCAndHJlZVRpcHMtaW5hY3RpdmUnLCAndHJlZVRpcHMtYWN0aXZlJyk7XG4gICAgfSk7XG4gICAgY2xhc3NDaGFuZ2VyKGl0ZW1DbGlja2VkLCAndHJlZVRpcHMtYWN0aXZlJywgJ3RyZWVUaXBzLWluYWN0aXZlJyk7XG5cblxuICAgIGNoaWxkQmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xuICAgICAgICBjbGFzc0NoYW5nZXIoYmxvY2ssICdjYXJlVGlwcy1pbmFjdGl2ZScsICdjYXJlVGlwcy1hY3RpdmUnKTtcbiAgICB9KTtcbiAgICBjbGFzc0NoYW5nZXIoY2hhbmdlLCAnY2FyZVRpcHMtYWN0aXZlJywgJ2NhcmVUaXBzLWluYWN0aXZlJyk7XG59XG5mdW5jdGlvbiBjbGFzc0NoYW5nZXIoZWxlbWVudCwgY2xhc3NUb0FkZCwgY2xhc3NUb1JlbW92ZSl7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzVG9SZW1vdmUpO1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc1RvQWRkKTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFRLENBQUNDLGdCQUFnQixDQUFFLGtCQUFrQixFQUFFLFlBQVc7RUFDdEQsSUFBSUMsWUFBWSxHQUFHRixRQUFRLENBQUNHLGdCQUFnQixDQUFFLFdBQVksQ0FBQztFQUMzRCxLQUFNLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0YsWUFBWSxDQUFDRyxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFHO0lBQzVDRixZQUFZLENBQUNFLENBQUMsQ0FBQyxDQUFDSCxnQkFBZ0IsQ0FBRSxPQUFPLEVBQUUsWUFBVztNQUNsREssUUFBUSxDQUFDLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxLQUFLLEVBQUUsSUFBSSxDQUFDO0lBQ3RDLENBQUUsQ0FBQztFQUNQO0FBQ0osQ0FBQyxDQUFDO0FBRUYsU0FBU0YsUUFBUUEsQ0FBQ0osWUFBWSxFQUFFTyxXQUFXLEVBQUM7RUFDeEMsSUFBTUMsTUFBTSxHQUFHVixRQUFRLENBQUNXLGNBQWMsQ0FBQ1QsWUFBWSxDQUFDO0VBQ3BELElBQU1VLE1BQU0sR0FBR1osUUFBUSxDQUFDRyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7RUFDckQsSUFBTVUsV0FBVyxHQUFHYixRQUFRLENBQUNHLGdCQUFnQixDQUFDLFdBQVcsQ0FBQztFQUUxRFMsTUFBTSxDQUFDRSxPQUFPLENBQUMsVUFBQUMsS0FBSyxFQUFJO0lBQ3BCQyxZQUFZLENBQUNELEtBQUssRUFBRSxtQkFBbUIsRUFBRSxpQkFBaUIsQ0FBQztFQUMvRCxDQUFDLENBQUM7RUFDRkMsWUFBWSxDQUFDUCxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsbUJBQW1CLENBQUM7RUFHakVJLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDLFVBQUFDLEtBQUssRUFBSTtJQUN6QkMsWUFBWSxDQUFDRCxLQUFLLEVBQUUsbUJBQW1CLEVBQUUsaUJBQWlCLENBQUM7RUFDL0QsQ0FBQyxDQUFDO0VBQ0ZDLFlBQVksQ0FBQ04sTUFBTSxFQUFFLGlCQUFpQixFQUFFLG1CQUFtQixDQUFDO0FBQ2hFO0FBQ0EsU0FBU00sWUFBWUEsQ0FBQ0MsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLGFBQWEsRUFBQztFQUNyREYsT0FBTyxDQUFDRyxTQUFTLENBQUNDLE1BQU0sQ0FBQ0YsYUFBYSxDQUFDO0VBQ3ZDRixPQUFPLENBQUNHLFNBQVMsQ0FBQ0UsR0FBRyxDQUFDSixVQUFVLENBQUM7QUFDckMiLCJmaWxlIjoiLi9zcmMvanMvdHJlZWNhcmUuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/treecare.js\n");

/***/ }),

/***/ "./src/js/utils/address.js":
/*!*********************************!*\
  !*** ./src/js/utils/address.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setUpAddressAutoComplete: () => (/* binding */ setUpAddressAutoComplete)\n/* harmony export */ });\nfunction setUpAddressAutoComplete(callbackFn) {\n  var autocomplete = new google.maps.places.Autocomplete(document.querySelector('#service-address'), {\n    componentRestrictions: {\n      country: ['ca']\n    },\n    fields: ['address_components'],\n    types: ['address']\n  });\n  autocomplete.addListener('place_changed', function () {\n    return callbackFn(autocomplete);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdXRpbHMvYWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0Esd0JBQXdCQSxDQUFDQyxVQUFVLEVBQUU7RUFDbkQsSUFBSUMsWUFBWSxHQUFHLElBQUlDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDQyxNQUFNLENBQUNDLFlBQVksQ0FDcERDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGtCQUFrQixDQUFDLEVBQzFDO0lBQ0VDLHFCQUFxQixFQUFFO01BQUVDLE9BQU8sRUFBRSxDQUFDLElBQUk7SUFBRSxDQUFDO0lBQzFDQyxNQUFNLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztJQUM5QkMsS0FBSyxFQUFFLENBQUMsU0FBUztFQUNuQixDQUNGLENBQUM7RUFFRFYsWUFBWSxDQUFDVyxXQUFXLENBQUMsZUFBZSxFQUFFO0lBQUEsT0FBTVosVUFBVSxDQUFDQyxZQUFZLENBQUM7RUFBQSxFQUFDO0FBQzNFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JlZW4vLi9zcmMvanMvdXRpbHMvYWRkcmVzcy5qcz83Yjc0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBzZXRVcEFkZHJlc3NBdXRvQ29tcGxldGUoY2FsbGJhY2tGbikge1xuICBsZXQgYXV0b2NvbXBsZXRlID0gbmV3IGdvb2dsZS5tYXBzLnBsYWNlcy5BdXRvY29tcGxldGUoXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlcnZpY2UtYWRkcmVzcycpLFxuICAgIHtcbiAgICAgIGNvbXBvbmVudFJlc3RyaWN0aW9uczogeyBjb3VudHJ5OiBbJ2NhJ10gfSxcbiAgICAgIGZpZWxkczogWydhZGRyZXNzX2NvbXBvbmVudHMnXSxcbiAgICAgIHR5cGVzOiBbJ2FkZHJlc3MnXSxcbiAgICB9XG4gICk7XG5cbiAgYXV0b2NvbXBsZXRlLmFkZExpc3RlbmVyKCdwbGFjZV9jaGFuZ2VkJywgKCkgPT4gY2FsbGJhY2tGbihhdXRvY29tcGxldGUpKTtcbn1cbiJdLCJuYW1lcyI6WyJzZXRVcEFkZHJlc3NBdXRvQ29tcGxldGUiLCJjYWxsYmFja0ZuIiwiYXV0b2NvbXBsZXRlIiwiZ29vZ2xlIiwibWFwcyIsInBsYWNlcyIsIkF1dG9jb21wbGV0ZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNvbXBvbmVudFJlc3RyaWN0aW9ucyIsImNvdW50cnkiLCJmaWVsZHMiLCJ0eXBlcyIsImFkZExpc3RlbmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/utils/address.js\n");

/***/ }),

/***/ "./src/js/utils/anchor.js":
/*!********************************!*\
  !*** ./src/js/utils/anchor.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   repositionFromFixedHeader: () => (/* binding */ repositionFromFixedHeader)\n/* harmony export */ });\nvar repositionFromFixedHeader = function repositionFromFixedHeader(headerQuerySelector, elementQuerySelector) {\n  if (elementQuerySelector) {\n    var element = document.querySelector(elementQuerySelector);\n    console.log(elementQuerySelector, element);\n    if (!element) {\n      return;\n    }\n    element.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center'\n    });\n    return;\n  }\n  var header = document.querySelector(headerQuerySelector);\n  if (!header) {\n    return;\n  }\n  setTimeout(function () {\n    var headerHeight = header.offsetHeight + 100;\n    window.scrollBy(0, -headerHeight);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdXRpbHMvYW5jaG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxJQUFNQSx5QkFBeUIsR0FBRyxTQUE1QkEseUJBQXlCQSxDQUNwQ0MsbUJBQW1CLEVBQ25CQyxvQkFBb0IsRUFDcEI7RUFDQSxJQUFJQSxvQkFBb0IsRUFBRTtJQUN4QixJQUFNQyxPQUFPLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDSCxvQkFBb0IsQ0FBQztJQUM1REksT0FBTyxDQUFDQyxHQUFHLENBQUNMLG9CQUFvQixFQUFFQyxPQUFPLENBQUM7SUFDMUMsSUFBSSxDQUFDQSxPQUFPLEVBQUU7TUFDWjtJQUNGO0lBQ0FBLE9BQU8sQ0FBQ0ssY0FBYyxDQUFDO01BQUVDLFFBQVEsRUFBRSxRQUFRO01BQUVDLEtBQUssRUFBRTtJQUFTLENBQUMsQ0FBQztJQUMvRDtFQUNGO0VBRUEsSUFBTUMsTUFBTSxHQUFHUCxRQUFRLENBQUNDLGFBQWEsQ0FBQ0osbUJBQW1CLENBQUM7RUFDMUQsSUFBSSxDQUFDVSxNQUFNLEVBQUU7SUFDWDtFQUNGO0VBRUFDLFVBQVUsQ0FBQyxZQUFNO0lBQ2YsSUFBTUMsWUFBWSxHQUFHRixNQUFNLENBQUNHLFlBQVksR0FBRyxHQUFHO0lBQzlDQyxNQUFNLENBQUNDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQ0gsWUFBWSxDQUFDO0VBQ25DLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmVlbi8uL3NyYy9qcy91dGlscy9hbmNob3IuanM/NmM2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgcmVwb3NpdGlvbkZyb21GaXhlZEhlYWRlciA9IGZ1bmN0aW9uIChcbiAgaGVhZGVyUXVlcnlTZWxlY3RvcixcbiAgZWxlbWVudFF1ZXJ5U2VsZWN0b3Jcbikge1xuICBpZiAoZWxlbWVudFF1ZXJ5U2VsZWN0b3IpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50UXVlcnlTZWxlY3Rvcik7XG4gICAgY29uc29sZS5sb2coZWxlbWVudFF1ZXJ5U2VsZWN0b3IsIGVsZW1lbnQpO1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbGVtZW50LnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnLCBibG9jazogJ2NlbnRlcicgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihoZWFkZXJRdWVyeVNlbGVjdG9yKTtcbiAgaWYgKCFoZWFkZXIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBjb25zdCBoZWFkZXJIZWlnaHQgPSBoZWFkZXIub2Zmc2V0SGVpZ2h0ICsgMTAwO1xuICAgIHdpbmRvdy5zY3JvbGxCeSgwLCAtaGVhZGVySGVpZ2h0KTtcbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbInJlcG9zaXRpb25Gcm9tRml4ZWRIZWFkZXIiLCJoZWFkZXJRdWVyeVNlbGVjdG9yIiwiZWxlbWVudFF1ZXJ5U2VsZWN0b3IiLCJlbGVtZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29uc29sZSIsImxvZyIsInNjcm9sbEludG9WaWV3IiwiYmVoYXZpb3IiLCJibG9jayIsImhlYWRlciIsInNldFRpbWVvdXQiLCJoZWFkZXJIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJ3aW5kb3ciLCJzY3JvbGxCeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/utils/anchor.js\n");

/***/ }),

/***/ "./src/js/utils/cookies.js":
/*!*********************************!*\
  !*** ./src/js/utils/cookies.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setCookie: () => (/* binding */ setCookie)\n/* harmony export */ });\nfunction setCookie(cname, cvalue, exdays) {\n  var d = new Date();\n  d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);\n  var expires = \"expires=\" + d.toUTCString();\n  document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdXRpbHMvY29va2llcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsU0FBU0EsQ0FBQ0MsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRTtFQUMvQyxJQUFJQyxDQUFDLEdBQUcsSUFBSUMsSUFBSSxDQUFDLENBQUM7RUFDbEJELENBQUMsQ0FBQ0UsT0FBTyxDQUFDRixDQUFDLENBQUNHLE9BQU8sQ0FBQyxDQUFDLEdBQUdKLE1BQU0sR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7RUFDckQsSUFBSUssT0FBTyxHQUFHLFVBQVUsR0FBR0osQ0FBQyxDQUFDSyxXQUFXLENBQUMsQ0FBQztFQUMxQ0MsUUFBUSxDQUFDQyxNQUFNLEdBQUdWLEtBQUssR0FBRyxHQUFHLEdBQUdDLE1BQU0sR0FBRyxHQUFHLEdBQUdNLE9BQU8sR0FBRyxTQUFTO0FBQ3BFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JlZW4vLi9zcmMvanMvdXRpbHMvY29va2llcy5qcz8wMWEyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBzZXRDb29raWUoY25hbWUsIGN2YWx1ZSwgZXhkYXlzKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgZC5zZXRUaW1lKGQuZ2V0VGltZSgpICsgZXhkYXlzICogMjQgKiA2MCAqIDYwICogMTAwMCk7XG4gIHZhciBleHBpcmVzID0gXCJleHBpcmVzPVwiICsgZC50b1VUQ1N0cmluZygpO1xuICBkb2N1bWVudC5jb29raWUgPSBjbmFtZSArIFwiPVwiICsgY3ZhbHVlICsgXCI7XCIgKyBleHBpcmVzICsgXCI7cGF0aD0vXCI7XG59XG4iXSwibmFtZXMiOlsic2V0Q29va2llIiwiY25hbWUiLCJjdmFsdWUiLCJleGRheXMiLCJkIiwiRGF0ZSIsInNldFRpbWUiLCJnZXRUaW1lIiwiZXhwaXJlcyIsInRvVVRDU3RyaW5nIiwiZG9jdW1lbnQiLCJjb29raWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/utils/cookies.js\n");

/***/ }),

/***/ "./src/js/utils/forms.js":
/*!*******************************!*\
  !*** ./src/js/utils/forms.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   changeBookingFormLocation: () => (/* binding */ changeBookingFormLocation),\n/* harmony export */   getRadioValueByName: () => (/* binding */ getRadioValueByName),\n/* harmony export */   phoneNumberInputRestrict: () => (/* binding */ phoneNumberInputRestrict),\n/* harmony export */   resetAddons: () => (/* binding */ resetAddons),\n/* harmony export */   resetSplitPayment: () => (/* binding */ resetSplitPayment),\n/* harmony export */   updateBookingTotals: () => (/* binding */ updateBookingTotals),\n/* harmony export */   validateBookingForm: () => (/* binding */ validateBookingForm)\n/* harmony export */ });\n/* harmony import */ var _money__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./money */ \"./src/js/utils/money.js\");\n/* harmony import */ var _cookies__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cookies */ \"./src/js/utils/cookies.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\nfunction changeBookingFormLocation(_x) {\n  return _changeBookingFormLocation.apply(this, arguments);\n}\nfunction _changeBookingFormLocation() {\n  _changeBookingFormLocation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {\n    var locationId, response, slug;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          locationId = event.target.value;\n          _context.next = 3;\n          return fetch(\"/actions/green-drop-feedme-module/default/craft-location-slug-by-id?location_id=\".concat(locationId));\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return response.json();\n        case 6:\n          slug = _context.sent;\n          (0,_cookies__WEBPACK_IMPORTED_MODULE_1__.setCookie)('green_location', slug, 1);\n          (0,_cookies__WEBPACK_IMPORTED_MODULE_1__.setCookie)('green_current_location', slug, 1);\n          window.location.reload();\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _changeBookingFormLocation.apply(this, arguments);\n}\nfunction getSelectedPackage(packageId, managerPackages) {\n  if (!packageId) return;\n  return managerPackages.find(function (managerPackage) {\n    var _managerPackage$packa;\n    return (managerPackage === null || managerPackage === void 0 || (_managerPackage$packa = managerPackage.package_schedule) === null || _managerPackage$packa === void 0 ? void 0 : _managerPackage$packa.id) === parseInt(packageId);\n  });\n}\nfunction getSelectedAddOns(availableAddons) {\n  var activeAddons = _toConsumableArray(document.querySelectorAll('.addon_select')).filter(function (addOn) {\n    return addOn.checked;\n  }).map(function (addOn) {\n    return addOn.value;\n  });\n  return availableAddons.filter(function (availableAddon) {\n    return activeAddons.find(function (id) {\n      return parseInt(id) === (availableAddon === null || availableAddon === void 0 ? void 0 : availableAddon.addon_id);\n    });\n  });\n}\nfunction resetSplitPayment(managerPackages) {\n  var paymentSplitRadios = Array.from(document.getElementsByName('payment-plan'));\n  // make reset to split checked\n\n  var url = new URL(window.location.href);\n  var params = new URLSearchParams(url.search);\n  var paymentPlan = params.get('payment-plan');\n  if (paymentPlan) {\n    if (paymentPlan === 'split') {\n      paymentSplitRadios[0].checked = true;\n    } else {\n      paymentSplitRadios[1].checked = true;\n    }\n  } else {\n    paymentSplitRadios[1].checked = true;\n  }\n  var activePackageId = getRadioValueByName('packageId');\n  var activePackage = getSelectedPackage(activePackageId, managerPackages);\n  var monthSplit = activePackage === null || activePackage === void 0 ? void 0 : activePackage.package_schedule.price.split_payment_months;\n  var splitChoiceContainer = document.getElementById('monthly-select');\n  if (monthSplit > 1) {\n    splitChoiceContainer.style.display = 'block';\n    var discountLabel = document.getElementById('pre-pay-discount');\n    discountLabel.innerText = activePackage.package_schedule.price.discount_percent;\n    var splitLabelEl = document.getElementById('btn-split-text');\n    splitLabelEl.innerText = monthSplit;\n  } else {\n    splitChoiceContainer.style.display = 'none';\n  }\n}\nfunction resetAddons() {\n  document.querySelectorAll('.addon_select').forEach(function (addon) {\n    return addon.checked = false;\n  });\n}\nfunction getPromotionAmount(subTotal, paymentSplit, packageDiscount) {\n  var _document$querySelect, _document$querySelect2, _document$querySelect3, _document$querySelect4, _document$querySelect5;\n  var type = (_document$querySelect = document.querySelector('#promo_type')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.value;\n  var promotionAmount = 0;\n  console.log('getting discount');\n  switch (type) {\n    case 'percentage':\n      var percent = Number((_document$querySelect2 = (_document$querySelect3 = document.querySelector('#promo_percentage')) === null || _document$querySelect3 === void 0 ? void 0 : _document$querySelect3.value) !== null && _document$querySelect2 !== void 0 ? _document$querySelect2 : 0);\n      if (packageDiscount) {\n        percent = percent + packageDiscount;\n      }\n      promotionAmount = promotionAmount + subTotal * (percent / 100);\n      break;\n    case 'amount':\n      var amount = (_document$querySelect4 = (_document$querySelect5 = document.querySelector('#promo_amount')) === null || _document$querySelect5 === void 0 ? void 0 : _document$querySelect5.value) !== null && _document$querySelect4 !== void 0 ? _document$querySelect4 : 0;\n      promotionAmount = promotionAmount + amount / paymentSplit;\n      if (packageDiscount) {\n        // minis discount amount from subtotal\n        var discountedTotal = subTotal - promotionAmount;\n        // get discount amount from remaining\n        var packageDiscountRemoval = discountedTotal * (packageDiscount / 100);\n        promotionAmount = promotionAmount + packageDiscountRemoval;\n      }\n      break;\n    default:\n      // get package discount if exists\n      if (packageDiscount) {\n        promotionAmount = subTotal * (packageDiscount / 100);\n      }\n  }\n  return promotionAmount ? Math.round(promotionAmount) : 0;\n}\nfunction updatePriceInputs(data) {\n  document.querySelector('#package_price').value = data.packagePrice;\n  document.querySelector('#subtotal').value = data.subTotal;\n  document.querySelector('#subtotal_after_discount').value = data.subTotalAfterDiscount;\n  document.querySelector('#gst').value = data.gst;\n  document.querySelector('#total').value = data.total;\n  document.querySelector('#payment_amount').value = data.total;\n}\nfunction updatePriceBox(data, name) {\n  var priceBox = document.querySelector('#price-box');\n  priceBox.querySelector('#price-heading').innerText = name;\n  priceBox.querySelector('#price-heading2').innerText = data.paymentSplit > 1 ? \"Price: Monthly Total, \".concat(data.paymentSplit, \" installments \") : 'Price:';\n  priceBox.querySelector('#subtotal_label').innerText = data.subTotal;\n  priceBox.querySelector('#promo_amount_label').innerText = data.promoAmount;\n  priceBox.querySelector('#promo_amount_subtotal').innerText = data.subTotalAfterDiscount;\n  priceBox.querySelector('#gst_label').innerText = data.gst;\n  priceBox.querySelector('#total_label').innerText = data.total;\n  if (data.promoAmount > 0) {\n    priceBox.querySelector('#price-box-promotion').style.display = 'grid';\n  } else {\n    priceBox.querySelector('#price-box-promotion').style.display = 'none';\n  }\n}\nfunction getRadioValueByName(name) {\n  var radios = document.getElementsByName(name);\n  var activeInput = _toConsumableArray(radios).find(function (input) {\n    return input.checked;\n  });\n  if (!activeInput) return null;\n  return activeInput === null || activeInput === void 0 ? void 0 : activeInput.value;\n}\nfunction updateBookingTotals(managerPackages) {\n  var activePackageId = getRadioValueByName('packageId');\n  var selectedPackage = getSelectedPackage(activePackageId, managerPackages);\n  if (!selectedPackage) return;\n  console.log(selectedPackage);\n  var packageSchedule = selectedPackage.package_schedule;\n  var availableAddons = selectedPackage.addons;\n  var paymentPlan = getRadioValueByName('payment-plan');\n  console.log(paymentPlan);\n  var isSplitPayment = paymentPlan === 'split' && packageSchedule.price.split_payment_months > 1;\n  var paymentSplit = isSplitPayment ? packageSchedule.price.split_payment_months : 1;\n  var packagePrice = parseInt(isSplitPayment ? packageSchedule.price.cents_month_price : packageSchedule.price.cents_base_amount);\n  var selectedAddons = getSelectedAddOns(availableAddons);\n  var addOnsPrice = selectedAddons.reduce(function (prev, addon) {\n    return prev + Math.round(addon.price * 100 / paymentSplit);\n  }, 0);\n  var subTotal = packagePrice + addOnsPrice;\n  console.log(\"packagePrice: \".concat(packagePrice));\n  console.log(\"addons: \".concat(addOnsPrice));\n  console.log(\"subtotal: \".concat(subTotal));\n  var packageDiscountPercent = !isSplitPayment && packageSchedule.price.discount_percent;\n  console.log('runnign');\n  var promoAmount = getPromotionAmount(subTotal, paymentSplit, packageDiscountPercent);\n  console.log('promo', promoAmount);\n  var subTotalAfterDiscount = subTotal - Number(promoAmount);\n  console.log(subTotalAfterDiscount);\n  var gst = Math.round(subTotalAfterDiscount * 5 / 100);\n  var total = subTotalAfterDiscount + gst;\n  var amounts = {\n    paymentSplit: paymentSplit,\n    packagePrice: packagePrice,\n    addOnsPrice: addOnsPrice,\n    promoAmount: promoAmount,\n    subTotal: subTotal,\n    subTotalAfterDiscount: subTotalAfterDiscount,\n    gst: gst,\n    total: total\n  };\n  var formattedAmounts = {\n    paymentSplit: paymentSplit,\n    packagePrice: (0,_money__WEBPACK_IMPORTED_MODULE_0__.centsToDollars)(packagePrice),\n    addOnsPrice: (0,_money__WEBPACK_IMPORTED_MODULE_0__.centsToDollars)(addOnsPrice),\n    promoAmount: (0,_money__WEBPACK_IMPORTED_MODULE_0__.centsToDollars)(promoAmount),\n    subTotal: (0,_money__WEBPACK_IMPORTED_MODULE_0__.centsToDollars)(subTotal),\n    subTotalAfterDiscount: (0,_money__WEBPACK_IMPORTED_MODULE_0__.centsToDollars)(subTotalAfterDiscount),\n    gst: (0,_money__WEBPACK_IMPORTED_MODULE_0__.centsToDollars)(gst),\n    total: (0,_money__WEBPACK_IMPORTED_MODULE_0__.centsToDollars)(total)\n  };\n  updatePriceInputs(amounts);\n  updatePriceBox(formattedAmounts, packageSchedule[\"package\"].name);\n}\nfunction validateBookingForm() {\n  var validated = true;\n  var validatedAddress = true;\n  var validatedBillingAddress = true;\n  $('#error-wrapper').html('');\n\n  // check for at least one package or service\n  if ($('#subtotal').val() == 0) {\n    $('#error-wrapper').append('<p>Please select at least one Package or Service.</p>').show();\n    validated = false;\n  }\n  if (!transferToManagerSubmit) {\n    if (!$('#OrderNewBillingAddress').val().trim() || !$('#OrderBillingCity').val().trim() || !$('#OrderBillingProvince').val().trim() || !$('#OrderNewBillingPostal').val().trim()) {\n      $('#manual-address-billing-notice').animate({\n        height: 'show'\n      }, 350);\n      validatedBillingAddress = false;\n    }\n  }\n  // Validate Your Name field\n  if ($('#OrderFullName').val() == '') {\n    $('#error-wrapper').append('<p>Please enter your name.</p>').show();\n    $('#OrderFullName').trigger('change');\n    validated = false;\n  }\n\n  // Validate Email Address field\n  if ($('#OrderEmailAddress').val() == '') {\n    $('#error-wrapper').append('<p>Please enter your email address.</p>').show();\n    $('#OrderEmailAddress').trigger('change');\n    validated = false;\n  }\n\n  // Validate Phone Number field\n  var phone_regex = /^\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}$/;\n  if (phone_regex.test($('#OrderPhone').val()) == false) {\n    $('#error-wrapper').append('<p>Please check the phone number you entered.</p>').show();\n    $('#OrderPhone').trigger('change');\n    validated = false;\n  }\n  return validated;\n}\nfunction phoneNumberInputRestrict(input) {\n  // Remove all non-digit characters from the input\n  var phone = input.value.replace(/\\D/g, '');\n\n  // Format the phone number using regular expressions\n  var formattedPhone = phone.replace(/(\\d{3})(\\d{3})(\\d{4})/, '($1) $2-$3');\n\n  // Update the input value with the formatted phone number\n  input.value = formattedPhone;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/utils/forms.js\n");

/***/ }),

/***/ "./src/js/utils/money.js":
/*!*******************************!*\
  !*** ./src/js/utils/money.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   centsToDollars: () => (/* binding */ centsToDollars)\n/* harmony export */ });\nfunction centsToDollars(amount) {\n  return (amount / 100).toFixed(2);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdXRpbHMvbW9uZXkuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLGNBQWNBLENBQUNDLE1BQU0sRUFBRTtFQUNyQyxPQUFPLENBQUNBLE1BQU0sR0FBRyxHQUFHLEVBQUVDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmVlbi8uL3NyYy9qcy91dGlscy9tb25leS5qcz9lYTcyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBjZW50c1RvRG9sbGFycyhhbW91bnQpIHtcbiAgcmV0dXJuIChhbW91bnQgLyAxMDApLnRvRml4ZWQoMik7XG59XG4iXSwibmFtZXMiOlsiY2VudHNUb0RvbGxhcnMiLCJhbW91bnQiLCJ0b0ZpeGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/utils/money.js\n");

/***/ }),

/***/ "./src/js/utils/stripe.js":
/*!********************************!*\
  !*** ./src/js/utils/stripe.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStripeErrorMessage: () => (/* binding */ createStripeErrorMessage),\n/* harmony export */   createStripeTokenInput: () => (/* binding */ createStripeTokenInput),\n/* harmony export */   requestStripeToken: () => (/* binding */ requestStripeToken),\n/* harmony export */   setUpStripe: () => (/* binding */ setUpStripe)\n/* harmony export */ });\nfunction setUpStripe(form) {\n  var STRIP_PUBLIC_KEY = form.dataset.stripePublicKey;\n  var stripe = Stripe(STRIP_PUBLIC_KEY);\n  var elements = stripe.elements();\n  var card = elements.create('card', {\n    style: {\n      base: {\n        iconColor: '#1f2937',\n        color: '#1f2937',\n        fontWeight: '500',\n        fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\n        fontSize: '16px',\n        padding: 16,\n        fontSmoothing: 'antialiased',\n        ':-webkit-autofill': {\n          color: '#fce883'\n        },\n        '::placeholder': {\n          color: '#4b5563'\n        }\n      },\n      invalid: {\n        iconColor: 'red',\n        color: 'red'\n      }\n    },\n    hidePostalCode: true\n  });\n  card.mount('#card');\n  return [stripe, card];\n}\nfunction createStripeTokenInput(tokenID) {\n  var token_el = document.getElementById('stripe_token');\n  if (token_el !== null) {\n    token_el.parentNode.removeChild(token_el);\n  }\n  var hiddenInput = document.createElement('input');\n  hiddenInput.setAttribute('id', 'stripe_token');\n  hiddenInput.setAttribute('type', 'hidden');\n  hiddenInput.setAttribute('name', 'data[billing][payments][0][data][stripe_token]');\n  hiddenInput.setAttribute('value', tokenID);\n  return hiddenInput;\n}\nfunction requestStripeToken(stripe, card) {\n  var customerData = {\n    address_line1: document.getElementById('OrderNewBillingAddress').value,\n    name: document.getElementById('card-holder-name').value,\n    address_city: document.getElementById('OrderBillingCity').value,\n    address_state: document.getElementById('OrderBillingProvince').value,\n    address_zip: document.getElementById('OrderNewBillingPostal').value\n  };\n  return stripe.createToken(card, customerData);\n}\nfunction createStripeErrorMessage(message) {\n  var wrapperQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#error-wrapper';\n  var errorEl = document.createElement('p');\n  errorEl.classList.add('error-message', 'text-red-500', 'text-sm', 'mt-2');\n  errorEl.innerText = message;\n  var errorContainer = document.querySelector(wrapperQuery);\n  errorContainer.append(errorEl);\n  errorContainer.style.display = 'block';\n  errorContainer.scrollIntoView();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdXRpbHMvc3RyaXBlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBTyxTQUFTQSxXQUFXQSxDQUFDQyxJQUFJLEVBQUU7RUFDaEMsSUFBTUMsZ0JBQWdCLEdBQUdELElBQUksQ0FBQ0UsT0FBTyxDQUFDQyxlQUFlO0VBQ3JELElBQU1DLE1BQU0sR0FBR0MsTUFBTSxDQUFDSixnQkFBZ0IsQ0FBQztFQUV2QyxJQUFNSyxRQUFRLEdBQUdGLE1BQU0sQ0FBQ0UsUUFBUSxDQUFDLENBQUM7RUFDbEMsSUFBTUMsSUFBSSxHQUFHRCxRQUFRLENBQUNFLE1BQU0sQ0FBQyxNQUFNLEVBQUU7SUFDbkNDLEtBQUssRUFBRTtNQUNMQyxJQUFJLEVBQUU7UUFDSkMsU0FBUyxFQUFFLFNBQVM7UUFDcEJDLEtBQUssRUFBRSxTQUFTO1FBQ2hCQyxVQUFVLEVBQUUsS0FBSztRQUNqQkMsVUFBVSxFQUFFLHlDQUF5QztRQUNyREMsUUFBUSxFQUFFLE1BQU07UUFDaEJDLE9BQU8sRUFBRSxFQUFFO1FBQ1hDLGFBQWEsRUFBRSxhQUFhO1FBQzVCLG1CQUFtQixFQUFFO1VBQ25CTCxLQUFLLEVBQUU7UUFDVCxDQUFDO1FBQ0QsZUFBZSxFQUFFO1VBQ2ZBLEtBQUssRUFBRTtRQUNUO01BQ0YsQ0FBQztNQUNETSxPQUFPLEVBQUU7UUFDUFAsU0FBUyxFQUFFLEtBQUs7UUFDaEJDLEtBQUssRUFBRTtNQUNUO0lBQ0YsQ0FBQztJQUNETyxjQUFjLEVBQUU7RUFDbEIsQ0FBQyxDQUFDO0VBQ0ZaLElBQUksQ0FBQ2EsS0FBSyxDQUFDLE9BQU8sQ0FBQztFQUVuQixPQUFPLENBQUNoQixNQUFNLEVBQUVHLElBQUksQ0FBQztBQUN2QjtBQUVPLFNBQVNjLHNCQUFzQkEsQ0FBQ0MsT0FBTyxFQUFFO0VBQzlDLElBQU1DLFFBQVEsR0FBR0MsUUFBUSxDQUFDQyxjQUFjLENBQUMsY0FBYyxDQUFDO0VBQ3hELElBQUlGLFFBQVEsS0FBSyxJQUFJLEVBQUU7SUFDckJBLFFBQVEsQ0FBQ0csVUFBVSxDQUFDQyxXQUFXLENBQUNKLFFBQVEsQ0FBQztFQUMzQztFQUVBLElBQU1LLFdBQVcsR0FBR0osUUFBUSxDQUFDSyxhQUFhLENBQUMsT0FBTyxDQUFDO0VBQ25ERCxXQUFXLENBQUNFLFlBQVksQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDO0VBQzlDRixXQUFXLENBQUNFLFlBQVksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDO0VBQzFDRixXQUFXLENBQUNFLFlBQVksQ0FDdEIsTUFBTSxFQUNOLGdEQUNGLENBQUM7RUFDREYsV0FBVyxDQUFDRSxZQUFZLENBQUMsT0FBTyxFQUFFUixPQUFPLENBQUM7RUFDMUMsT0FBT00sV0FBVztBQUNwQjtBQUVPLFNBQVNHLGtCQUFrQkEsQ0FBQzNCLE1BQU0sRUFBRUcsSUFBSSxFQUFFO0VBQy9DLElBQU15QixZQUFZLEdBQUc7SUFDbkJDLGFBQWEsRUFBRVQsUUFBUSxDQUFDQyxjQUFjLENBQUMsd0JBQXdCLENBQUMsQ0FBQ1MsS0FBSztJQUN0RUMsSUFBSSxFQUFFWCxRQUFRLENBQUNDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDUyxLQUFLO0lBQ3ZERSxZQUFZLEVBQUVaLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDLGtCQUFrQixDQUFDLENBQUNTLEtBQUs7SUFDL0RHLGFBQWEsRUFBRWIsUUFBUSxDQUFDQyxjQUFjLENBQUMsc0JBQXNCLENBQUMsQ0FBQ1MsS0FBSztJQUNwRUksV0FBVyxFQUFFZCxRQUFRLENBQUNDLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDUztFQUNoRSxDQUFDO0VBQ0QsT0FBTzlCLE1BQU0sQ0FBQ21DLFdBQVcsQ0FBQ2hDLElBQUksRUFBRXlCLFlBQVksQ0FBQztBQUMvQztBQUVPLFNBQVNRLHdCQUF3QkEsQ0FDdENDLE9BQU8sRUFFUDtFQUFBLElBREFDLFlBQVksR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsZ0JBQWdCO0VBRS9CLElBQU1HLE9BQU8sR0FBR3RCLFFBQVEsQ0FBQ0ssYUFBYSxDQUFDLEdBQUcsQ0FBQztFQUMzQ2lCLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDQyxHQUFHLENBQUMsZUFBZSxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDO0VBQ3pFRixPQUFPLENBQUNHLFNBQVMsR0FBR1IsT0FBTztFQUMzQixJQUFNUyxjQUFjLEdBQUcxQixRQUFRLENBQUMyQixhQUFhLENBQUNULFlBQVksQ0FBQztFQUMzRFEsY0FBYyxDQUFDRSxNQUFNLENBQUNOLE9BQU8sQ0FBQztFQUM5QkksY0FBYyxDQUFDekMsS0FBSyxDQUFDNEMsT0FBTyxHQUFHLE9BQU87RUFDdENILGNBQWMsQ0FBQ0ksY0FBYyxDQUFDLENBQUM7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmVlbi8uL3NyYy9qcy91dGlscy9zdHJpcGUuanM/ZWU3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gc2V0VXBTdHJpcGUoZm9ybSkge1xuICBjb25zdCBTVFJJUF9QVUJMSUNfS0VZID0gZm9ybS5kYXRhc2V0LnN0cmlwZVB1YmxpY0tleTtcbiAgY29uc3Qgc3RyaXBlID0gU3RyaXBlKFNUUklQX1BVQkxJQ19LRVkpO1xuXG4gIGNvbnN0IGVsZW1lbnRzID0gc3RyaXBlLmVsZW1lbnRzKCk7XG4gIGNvbnN0IGNhcmQgPSBlbGVtZW50cy5jcmVhdGUoJ2NhcmQnLCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIGJhc2U6IHtcbiAgICAgICAgaWNvbkNvbG9yOiAnIzFmMjkzNycsXG4gICAgICAgIGNvbG9yOiAnIzFmMjkzNycsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICc1MDAnLFxuICAgICAgICBmb250RmFtaWx5OiAnUm9ib3RvLCBPcGVuIFNhbnMsIFNlZ29lIFVJLCBzYW5zLXNlcmlmJyxcbiAgICAgICAgZm9udFNpemU6ICcxNnB4JyxcbiAgICAgICAgcGFkZGluZzogMTYsXG4gICAgICAgIGZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCcsXG4gICAgICAgICc6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICAgICAgICBjb2xvcjogJyNmY2U4ODMnLFxuICAgICAgICB9LFxuICAgICAgICAnOjpwbGFjZWhvbGRlcic6IHtcbiAgICAgICAgICBjb2xvcjogJyM0YjU1NjMnLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGludmFsaWQ6IHtcbiAgICAgICAgaWNvbkNvbG9yOiAncmVkJyxcbiAgICAgICAgY29sb3I6ICdyZWQnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGhpZGVQb3N0YWxDb2RlOiB0cnVlLFxuICB9KTtcbiAgY2FyZC5tb3VudCgnI2NhcmQnKTtcblxuICByZXR1cm4gW3N0cmlwZSwgY2FyZF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdHJpcGVUb2tlbklucHV0KHRva2VuSUQpIHtcbiAgY29uc3QgdG9rZW5fZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RyaXBlX3Rva2VuJyk7XG4gIGlmICh0b2tlbl9lbCAhPT0gbnVsbCkge1xuICAgIHRva2VuX2VsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodG9rZW5fZWwpO1xuICB9XG5cbiAgY29uc3QgaGlkZGVuSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICBoaWRkZW5JbnB1dC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3N0cmlwZV90b2tlbicpO1xuICBoaWRkZW5JbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnaGlkZGVuJyk7XG4gIGhpZGRlbklucHV0LnNldEF0dHJpYnV0ZShcbiAgICAnbmFtZScsXG4gICAgJ2RhdGFbYmlsbGluZ11bcGF5bWVudHNdWzBdW2RhdGFdW3N0cmlwZV90b2tlbl0nXG4gICk7XG4gIGhpZGRlbklucHV0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCB0b2tlbklEKTtcbiAgcmV0dXJuIGhpZGRlbklucHV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVxdWVzdFN0cmlwZVRva2VuKHN0cmlwZSwgY2FyZCkge1xuICBjb25zdCBjdXN0b21lckRhdGEgPSB7XG4gICAgYWRkcmVzc19saW5lMTogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ09yZGVyTmV3QmlsbGluZ0FkZHJlc3MnKS52YWx1ZSxcbiAgICBuYW1lOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FyZC1ob2xkZXItbmFtZScpLnZhbHVlLFxuICAgIGFkZHJlc3NfY2l0eTogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ09yZGVyQmlsbGluZ0NpdHknKS52YWx1ZSxcbiAgICBhZGRyZXNzX3N0YXRlOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnT3JkZXJCaWxsaW5nUHJvdmluY2UnKS52YWx1ZSxcbiAgICBhZGRyZXNzX3ppcDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ09yZGVyTmV3QmlsbGluZ1Bvc3RhbCcpLnZhbHVlLFxuICB9O1xuICByZXR1cm4gc3RyaXBlLmNyZWF0ZVRva2VuKGNhcmQsIGN1c3RvbWVyRGF0YSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdHJpcGVFcnJvck1lc3NhZ2UoXG4gIG1lc3NhZ2UsXG4gIHdyYXBwZXJRdWVyeSA9ICcjZXJyb3Itd3JhcHBlcidcbikge1xuICBjb25zdCBlcnJvckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICBlcnJvckVsLmNsYXNzTGlzdC5hZGQoJ2Vycm9yLW1lc3NhZ2UnLCAndGV4dC1yZWQtNTAwJywgJ3RleHQtc20nLCAnbXQtMicpO1xuICBlcnJvckVsLmlubmVyVGV4dCA9IG1lc3NhZ2U7XG4gIGNvbnN0IGVycm9yQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih3cmFwcGVyUXVlcnkpO1xuICBlcnJvckNvbnRhaW5lci5hcHBlbmQoZXJyb3JFbCk7XG4gIGVycm9yQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICBlcnJvckNvbnRhaW5lci5zY3JvbGxJbnRvVmlldygpO1xufVxuIl0sIm5hbWVzIjpbInNldFVwU3RyaXBlIiwiZm9ybSIsIlNUUklQX1BVQkxJQ19LRVkiLCJkYXRhc2V0Iiwic3RyaXBlUHVibGljS2V5Iiwic3RyaXBlIiwiU3RyaXBlIiwiZWxlbWVudHMiLCJjYXJkIiwiY3JlYXRlIiwic3R5bGUiLCJiYXNlIiwiaWNvbkNvbG9yIiwiY29sb3IiLCJmb250V2VpZ2h0IiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwicGFkZGluZyIsImZvbnRTbW9vdGhpbmciLCJpbnZhbGlkIiwiaGlkZVBvc3RhbENvZGUiLCJtb3VudCIsImNyZWF0ZVN0cmlwZVRva2VuSW5wdXQiLCJ0b2tlbklEIiwidG9rZW5fZWwiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaGlkZGVuSW5wdXQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwicmVxdWVzdFN0cmlwZVRva2VuIiwiY3VzdG9tZXJEYXRhIiwiYWRkcmVzc19saW5lMSIsInZhbHVlIiwibmFtZSIsImFkZHJlc3NfY2l0eSIsImFkZHJlc3Nfc3RhdGUiLCJhZGRyZXNzX3ppcCIsImNyZWF0ZVRva2VuIiwiY3JlYXRlU3RyaXBlRXJyb3JNZXNzYWdlIiwibWVzc2FnZSIsIndyYXBwZXJRdWVyeSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImVycm9yRWwiLCJjbGFzc0xpc3QiLCJhZGQiLCJpbm5lclRleHQiLCJlcnJvckNvbnRhaW5lciIsInF1ZXJ5U2VsZWN0b3IiLCJhcHBlbmQiLCJkaXNwbGF5Iiwic2Nyb2xsSW50b1ZpZXciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/utils/stripe.js\n");

/***/ }),

/***/ "./src/scss/main.scss":
/*!****************************!*\
  !*** ./src/scss/main.scss ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nzcy9tYWluLnNjc3MiLCJtYXBwaW5ncyI6IjtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JlZW4vLi9zcmMvc2Nzcy9tYWluLnNjc3M/MTdmMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scss/main.scss\n");

/***/ }),

/***/ "./src/greendrop/scss/main.scss":
/*!**************************************!*\
  !*** ./src/greendrop/scss/main.scss ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ3JlZW5kcm9wL3Njc3MvbWFpbi5zY3NzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyZWVuLy4vc3JjL2dyZWVuZHJvcC9zY3NzL21haW4uc2Nzcz8wYzdmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/greendrop/scss/main.scss\n");

/***/ }),

/***/ "./node_modules/signature_pad/dist/signature_pad.js":
/*!**********************************************************!*\
  !*** ./node_modules/signature_pad/dist/signature_pad.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SignaturePad)\n/* harmony export */ });\n/*!\n * Signature Pad v4.1.6 | https://github.com/szimek/signature_pad\n * (c) 2023 Szymon Nowak | Released under the MIT license\n */\n\nclass Point {\n    constructor(x, y, pressure, time) {\n        if (isNaN(x) || isNaN(y)) {\n            throw new Error(`Point is invalid: (${x}, ${y})`);\n        }\n        this.x = +x;\n        this.y = +y;\n        this.pressure = pressure || 0;\n        this.time = time || Date.now();\n    }\n    distanceTo(start) {\n        return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));\n    }\n    equals(other) {\n        return (this.x === other.x &&\n            this.y === other.y &&\n            this.pressure === other.pressure &&\n            this.time === other.time);\n    }\n    velocityFrom(start) {\n        return this.time !== start.time\n            ? this.distanceTo(start) / (this.time - start.time)\n            : 0;\n    }\n}\n\nclass Bezier {\n    constructor(startPoint, control2, control1, endPoint, startWidth, endWidth) {\n        this.startPoint = startPoint;\n        this.control2 = control2;\n        this.control1 = control1;\n        this.endPoint = endPoint;\n        this.startWidth = startWidth;\n        this.endWidth = endWidth;\n    }\n    static fromPoints(points, widths) {\n        const c2 = this.calculateControlPoints(points[0], points[1], points[2]).c2;\n        const c3 = this.calculateControlPoints(points[1], points[2], points[3]).c1;\n        return new Bezier(points[1], c2, c3, points[2], widths.start, widths.end);\n    }\n    static calculateControlPoints(s1, s2, s3) {\n        const dx1 = s1.x - s2.x;\n        const dy1 = s1.y - s2.y;\n        const dx2 = s2.x - s3.x;\n        const dy2 = s2.y - s3.y;\n        const m1 = { x: (s1.x + s2.x) / 2.0, y: (s1.y + s2.y) / 2.0 };\n        const m2 = { x: (s2.x + s3.x) / 2.0, y: (s2.y + s3.y) / 2.0 };\n        const l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n        const l2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);\n        const dxm = m1.x - m2.x;\n        const dym = m1.y - m2.y;\n        const k = l2 / (l1 + l2);\n        const cm = { x: m2.x + dxm * k, y: m2.y + dym * k };\n        const tx = s2.x - cm.x;\n        const ty = s2.y - cm.y;\n        return {\n            c1: new Point(m1.x + tx, m1.y + ty),\n            c2: new Point(m2.x + tx, m2.y + ty),\n        };\n    }\n    length() {\n        const steps = 10;\n        let length = 0;\n        let px;\n        let py;\n        for (let i = 0; i <= steps; i += 1) {\n            const t = i / steps;\n            const cx = this.point(t, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x);\n            const cy = this.point(t, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);\n            if (i > 0) {\n                const xdiff = cx - px;\n                const ydiff = cy - py;\n                length += Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n            }\n            px = cx;\n            py = cy;\n        }\n        return length;\n    }\n    point(t, start, c1, c2, end) {\n        return (start * (1.0 - t) * (1.0 - t) * (1.0 - t))\n            + (3.0 * c1 * (1.0 - t) * (1.0 - t) * t)\n            + (3.0 * c2 * (1.0 - t) * t * t)\n            + (end * t * t * t);\n    }\n}\n\nclass SignatureEventTarget {\n    constructor() {\n        try {\n            this._et = new EventTarget();\n        }\n        catch (error) {\n            this._et = document;\n        }\n    }\n    addEventListener(type, listener, options) {\n        this._et.addEventListener(type, listener, options);\n    }\n    dispatchEvent(event) {\n        return this._et.dispatchEvent(event);\n    }\n    removeEventListener(type, callback, options) {\n        this._et.removeEventListener(type, callback, options);\n    }\n}\n\nfunction throttle(fn, wait = 250) {\n    let previous = 0;\n    let timeout = null;\n    let result;\n    let storedContext;\n    let storedArgs;\n    const later = () => {\n        previous = Date.now();\n        timeout = null;\n        result = fn.apply(storedContext, storedArgs);\n        if (!timeout) {\n            storedContext = null;\n            storedArgs = [];\n        }\n    };\n    return function wrapper(...args) {\n        const now = Date.now();\n        const remaining = wait - (now - previous);\n        storedContext = this;\n        storedArgs = args;\n        if (remaining <= 0 || remaining > wait) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            previous = now;\n            result = fn.apply(storedContext, storedArgs);\n            if (!timeout) {\n                storedContext = null;\n                storedArgs = [];\n            }\n        }\n        else if (!timeout) {\n            timeout = window.setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\n\nclass SignaturePad extends SignatureEventTarget {\n    constructor(canvas, options = {}) {\n        super();\n        this.canvas = canvas;\n        this._drawningStroke = false;\n        this._isEmpty = true;\n        this._lastPoints = [];\n        this._data = [];\n        this._lastVelocity = 0;\n        this._lastWidth = 0;\n        this._handleMouseDown = (event) => {\n            if (event.buttons === 1) {\n                this._drawningStroke = true;\n                this._strokeBegin(event);\n            }\n        };\n        this._handleMouseMove = (event) => {\n            if (this._drawningStroke) {\n                this._strokeMoveUpdate(event);\n            }\n        };\n        this._handleMouseUp = (event) => {\n            if (event.buttons === 1 && this._drawningStroke) {\n                this._drawningStroke = false;\n                this._strokeEnd(event);\n            }\n        };\n        this._handleTouchStart = (event) => {\n            if (event.cancelable) {\n                event.preventDefault();\n            }\n            if (event.targetTouches.length === 1) {\n                const touch = event.changedTouches[0];\n                this._strokeBegin(touch);\n            }\n        };\n        this._handleTouchMove = (event) => {\n            if (event.cancelable) {\n                event.preventDefault();\n            }\n            const touch = event.targetTouches[0];\n            this._strokeMoveUpdate(touch);\n        };\n        this._handleTouchEnd = (event) => {\n            const wasCanvasTouched = event.target === this.canvas;\n            if (wasCanvasTouched) {\n                if (event.cancelable) {\n                    event.preventDefault();\n                }\n                const touch = event.changedTouches[0];\n                this._strokeEnd(touch);\n            }\n        };\n        this._handlePointerStart = (event) => {\n            this._drawningStroke = true;\n            event.preventDefault();\n            this._strokeBegin(event);\n        };\n        this._handlePointerMove = (event) => {\n            if (this._drawningStroke) {\n                event.preventDefault();\n                this._strokeMoveUpdate(event);\n            }\n        };\n        this._handlePointerEnd = (event) => {\n            if (this._drawningStroke) {\n                event.preventDefault();\n                this._drawningStroke = false;\n                this._strokeEnd(event);\n            }\n        };\n        this.velocityFilterWeight = options.velocityFilterWeight || 0.7;\n        this.minWidth = options.minWidth || 0.5;\n        this.maxWidth = options.maxWidth || 2.5;\n        this.throttle = ('throttle' in options ? options.throttle : 16);\n        this.minDistance = ('minDistance' in options ? options.minDistance : 5);\n        this.dotSize = options.dotSize || 0;\n        this.penColor = options.penColor || 'black';\n        this.backgroundColor = options.backgroundColor || 'rgba(0,0,0,0)';\n        this.compositeOperation = options.compositeOperation || 'source-over';\n        this._strokeMoveUpdate = this.throttle\n            ? throttle(SignaturePad.prototype._strokeUpdate, this.throttle)\n            : SignaturePad.prototype._strokeUpdate;\n        this._ctx = canvas.getContext('2d');\n        this.clear();\n        this.on();\n    }\n    clear() {\n        const { _ctx: ctx, canvas } = this;\n        ctx.fillStyle = this.backgroundColor;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        this._data = [];\n        this._reset(this._getPointGroupOptions());\n        this._isEmpty = true;\n    }\n    fromDataURL(dataUrl, options = {}) {\n        return new Promise((resolve, reject) => {\n            const image = new Image();\n            const ratio = options.ratio || window.devicePixelRatio || 1;\n            const width = options.width || this.canvas.width / ratio;\n            const height = options.height || this.canvas.height / ratio;\n            const xOffset = options.xOffset || 0;\n            const yOffset = options.yOffset || 0;\n            this._reset(this._getPointGroupOptions());\n            image.onload = () => {\n                this._ctx.drawImage(image, xOffset, yOffset, width, height);\n                resolve();\n            };\n            image.onerror = (error) => {\n                reject(error);\n            };\n            image.crossOrigin = 'anonymous';\n            image.src = dataUrl;\n            this._isEmpty = false;\n        });\n    }\n    toDataURL(type = 'image/png', encoderOptions) {\n        switch (type) {\n            case 'image/svg+xml':\n                if (typeof encoderOptions !== 'object') {\n                    encoderOptions = undefined;\n                }\n                return `data:image/svg+xml;base64,${btoa(this.toSVG(encoderOptions))}`;\n            default:\n                if (typeof encoderOptions !== 'number') {\n                    encoderOptions = undefined;\n                }\n                return this.canvas.toDataURL(type, encoderOptions);\n        }\n    }\n    on() {\n        this.canvas.style.touchAction = 'none';\n        this.canvas.style.msTouchAction = 'none';\n        this.canvas.style.userSelect = 'none';\n        const isIOS = /Macintosh/.test(navigator.userAgent) && 'ontouchstart' in document;\n        if (window.PointerEvent && !isIOS) {\n            this._handlePointerEvents();\n        }\n        else {\n            this._handleMouseEvents();\n            if ('ontouchstart' in window) {\n                this._handleTouchEvents();\n            }\n        }\n    }\n    off() {\n        this.canvas.style.touchAction = 'auto';\n        this.canvas.style.msTouchAction = 'auto';\n        this.canvas.style.userSelect = 'auto';\n        this.canvas.removeEventListener('pointerdown', this._handlePointerStart);\n        this.canvas.removeEventListener('pointermove', this._handlePointerMove);\n        this.canvas.ownerDocument.removeEventListener('pointerup', this._handlePointerEnd);\n        this.canvas.removeEventListener('mousedown', this._handleMouseDown);\n        this.canvas.removeEventListener('mousemove', this._handleMouseMove);\n        this.canvas.ownerDocument.removeEventListener('mouseup', this._handleMouseUp);\n        this.canvas.removeEventListener('touchstart', this._handleTouchStart);\n        this.canvas.removeEventListener('touchmove', this._handleTouchMove);\n        this.canvas.removeEventListener('touchend', this._handleTouchEnd);\n    }\n    isEmpty() {\n        return this._isEmpty;\n    }\n    fromData(pointGroups, { clear = true } = {}) {\n        if (clear) {\n            this.clear();\n        }\n        this._fromData(pointGroups, this._drawCurve.bind(this), this._drawDot.bind(this));\n        this._data = this._data.concat(pointGroups);\n    }\n    toData() {\n        return this._data;\n    }\n    _getPointGroupOptions(group) {\n        return {\n            penColor: group && 'penColor' in group ? group.penColor : this.penColor,\n            dotSize: group && 'dotSize' in group ? group.dotSize : this.dotSize,\n            minWidth: group && 'minWidth' in group ? group.minWidth : this.minWidth,\n            maxWidth: group && 'maxWidth' in group ? group.maxWidth : this.maxWidth,\n            velocityFilterWeight: group && 'velocityFilterWeight' in group\n                ? group.velocityFilterWeight\n                : this.velocityFilterWeight,\n            compositeOperation: group && 'compositeOperation' in group\n                ? group.compositeOperation\n                : this.compositeOperation,\n        };\n    }\n    _strokeBegin(event) {\n        this.dispatchEvent(new CustomEvent('beginStroke', { detail: event }));\n        const pointGroupOptions = this._getPointGroupOptions();\n        const newPointGroup = Object.assign(Object.assign({}, pointGroupOptions), { points: [] });\n        this._data.push(newPointGroup);\n        this._reset(pointGroupOptions);\n        this._strokeUpdate(event);\n    }\n    _strokeUpdate(event) {\n        if (this._data.length === 0) {\n            this._strokeBegin(event);\n            return;\n        }\n        this.dispatchEvent(new CustomEvent('beforeUpdateStroke', { detail: event }));\n        const x = event.clientX;\n        const y = event.clientY;\n        const pressure = event.pressure !== undefined\n            ? event.pressure\n            : event.force !== undefined\n                ? event.force\n                : 0;\n        const point = this._createPoint(x, y, pressure);\n        const lastPointGroup = this._data[this._data.length - 1];\n        const lastPoints = lastPointGroup.points;\n        const lastPoint = lastPoints.length > 0 && lastPoints[lastPoints.length - 1];\n        const isLastPointTooClose = lastPoint\n            ? point.distanceTo(lastPoint) <= this.minDistance\n            : false;\n        const pointGroupOptions = this._getPointGroupOptions(lastPointGroup);\n        if (!lastPoint || !(lastPoint && isLastPointTooClose)) {\n            const curve = this._addPoint(point, pointGroupOptions);\n            if (!lastPoint) {\n                this._drawDot(point, pointGroupOptions);\n            }\n            else if (curve) {\n                this._drawCurve(curve, pointGroupOptions);\n            }\n            lastPoints.push({\n                time: point.time,\n                x: point.x,\n                y: point.y,\n                pressure: point.pressure,\n            });\n        }\n        this.dispatchEvent(new CustomEvent('afterUpdateStroke', { detail: event }));\n    }\n    _strokeEnd(event) {\n        this._strokeUpdate(event);\n        this.dispatchEvent(new CustomEvent('endStroke', { detail: event }));\n    }\n    _handlePointerEvents() {\n        this._drawningStroke = false;\n        this.canvas.addEventListener('pointerdown', this._handlePointerStart);\n        this.canvas.addEventListener('pointermove', this._handlePointerMove);\n        this.canvas.ownerDocument.addEventListener('pointerup', this._handlePointerEnd);\n    }\n    _handleMouseEvents() {\n        this._drawningStroke = false;\n        this.canvas.addEventListener('mousedown', this._handleMouseDown);\n        this.canvas.addEventListener('mousemove', this._handleMouseMove);\n        this.canvas.ownerDocument.addEventListener('mouseup', this._handleMouseUp);\n    }\n    _handleTouchEvents() {\n        this.canvas.addEventListener('touchstart', this._handleTouchStart);\n        this.canvas.addEventListener('touchmove', this._handleTouchMove);\n        this.canvas.addEventListener('touchend', this._handleTouchEnd);\n    }\n    _reset(options) {\n        this._lastPoints = [];\n        this._lastVelocity = 0;\n        this._lastWidth = (options.minWidth + options.maxWidth) / 2;\n        this._ctx.fillStyle = options.penColor;\n        this._ctx.globalCompositeOperation = options.compositeOperation;\n    }\n    _createPoint(x, y, pressure) {\n        const rect = this.canvas.getBoundingClientRect();\n        return new Point(x - rect.left, y - rect.top, pressure, new Date().getTime());\n    }\n    _addPoint(point, options) {\n        const { _lastPoints } = this;\n        _lastPoints.push(point);\n        if (_lastPoints.length > 2) {\n            if (_lastPoints.length === 3) {\n                _lastPoints.unshift(_lastPoints[0]);\n            }\n            const widths = this._calculateCurveWidths(_lastPoints[1], _lastPoints[2], options);\n            const curve = Bezier.fromPoints(_lastPoints, widths);\n            _lastPoints.shift();\n            return curve;\n        }\n        return null;\n    }\n    _calculateCurveWidths(startPoint, endPoint, options) {\n        const velocity = options.velocityFilterWeight * endPoint.velocityFrom(startPoint) +\n            (1 - options.velocityFilterWeight) * this._lastVelocity;\n        const newWidth = this._strokeWidth(velocity, options);\n        const widths = {\n            end: newWidth,\n            start: this._lastWidth,\n        };\n        this._lastVelocity = velocity;\n        this._lastWidth = newWidth;\n        return widths;\n    }\n    _strokeWidth(velocity, options) {\n        return Math.max(options.maxWidth / (velocity + 1), options.minWidth);\n    }\n    _drawCurveSegment(x, y, width) {\n        const ctx = this._ctx;\n        ctx.moveTo(x, y);\n        ctx.arc(x, y, width, 0, 2 * Math.PI, false);\n        this._isEmpty = false;\n    }\n    _drawCurve(curve, options) {\n        const ctx = this._ctx;\n        const widthDelta = curve.endWidth - curve.startWidth;\n        const drawSteps = Math.ceil(curve.length()) * 2;\n        ctx.beginPath();\n        ctx.fillStyle = options.penColor;\n        for (let i = 0; i < drawSteps; i += 1) {\n            const t = i / drawSteps;\n            const tt = t * t;\n            const ttt = tt * t;\n            const u = 1 - t;\n            const uu = u * u;\n            const uuu = uu * u;\n            let x = uuu * curve.startPoint.x;\n            x += 3 * uu * t * curve.control1.x;\n            x += 3 * u * tt * curve.control2.x;\n            x += ttt * curve.endPoint.x;\n            let y = uuu * curve.startPoint.y;\n            y += 3 * uu * t * curve.control1.y;\n            y += 3 * u * tt * curve.control2.y;\n            y += ttt * curve.endPoint.y;\n            const width = Math.min(curve.startWidth + ttt * widthDelta, options.maxWidth);\n            this._drawCurveSegment(x, y, width);\n        }\n        ctx.closePath();\n        ctx.fill();\n    }\n    _drawDot(point, options) {\n        const ctx = this._ctx;\n        const width = options.dotSize > 0\n            ? options.dotSize\n            : (options.minWidth + options.maxWidth) / 2;\n        ctx.beginPath();\n        this._drawCurveSegment(point.x, point.y, width);\n        ctx.closePath();\n        ctx.fillStyle = options.penColor;\n        ctx.fill();\n    }\n    _fromData(pointGroups, drawCurve, drawDot) {\n        for (const group of pointGroups) {\n            const { points } = group;\n            const pointGroupOptions = this._getPointGroupOptions(group);\n            if (points.length > 1) {\n                for (let j = 0; j < points.length; j += 1) {\n                    const basicPoint = points[j];\n                    const point = new Point(basicPoint.x, basicPoint.y, basicPoint.pressure, basicPoint.time);\n                    if (j === 0) {\n                        this._reset(pointGroupOptions);\n                    }\n                    const curve = this._addPoint(point, pointGroupOptions);\n                    if (curve) {\n                        drawCurve(curve, pointGroupOptions);\n                    }\n                }\n            }\n            else {\n                this._reset(pointGroupOptions);\n                drawDot(points[0], pointGroupOptions);\n            }\n        }\n    }\n    toSVG({ includeBackgroundColor = false } = {}) {\n        const pointGroups = this._data;\n        const ratio = Math.max(window.devicePixelRatio || 1, 1);\n        const minX = 0;\n        const minY = 0;\n        const maxX = this.canvas.width / ratio;\n        const maxY = this.canvas.height / ratio;\n        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n        svg.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');\n        svg.setAttribute('viewBox', `${minX} ${minY} ${maxX} ${maxY}`);\n        svg.setAttribute('width', maxX.toString());\n        svg.setAttribute('height', maxY.toString());\n        if (includeBackgroundColor && this.backgroundColor) {\n            const rect = document.createElement('rect');\n            rect.setAttribute('width', '100%');\n            rect.setAttribute('height', '100%');\n            rect.setAttribute('fill', this.backgroundColor);\n            svg.appendChild(rect);\n        }\n        this._fromData(pointGroups, (curve, { penColor }) => {\n            const path = document.createElement('path');\n            if (!isNaN(curve.control1.x) &&\n                !isNaN(curve.control1.y) &&\n                !isNaN(curve.control2.x) &&\n                !isNaN(curve.control2.y)) {\n                const attr = `M ${curve.startPoint.x.toFixed(3)},${curve.startPoint.y.toFixed(3)} ` +\n                    `C ${curve.control1.x.toFixed(3)},${curve.control1.y.toFixed(3)} ` +\n                    `${curve.control2.x.toFixed(3)},${curve.control2.y.toFixed(3)} ` +\n                    `${curve.endPoint.x.toFixed(3)},${curve.endPoint.y.toFixed(3)}`;\n                path.setAttribute('d', attr);\n                path.setAttribute('stroke-width', (curve.endWidth * 2.25).toFixed(3));\n                path.setAttribute('stroke', penColor);\n                path.setAttribute('fill', 'none');\n                path.setAttribute('stroke-linecap', 'round');\n                svg.appendChild(path);\n            }\n        }, (point, { penColor, dotSize, minWidth, maxWidth }) => {\n            const circle = document.createElement('circle');\n            const size = dotSize > 0 ? dotSize : (minWidth + maxWidth) / 2;\n            circle.setAttribute('r', size.toString());\n            circle.setAttribute('cx', point.x.toString());\n            circle.setAttribute('cy', point.y.toString());\n            circle.setAttribute('fill', penColor);\n            svg.appendChild(circle);\n        });\n        return svg.outerHTML;\n    }\n}\n\n\n//# sourceMappingURL=signature_pad.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/signature_pad/dist/signature_pad.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/index": 0,
/******/ 			"css/main": 0,
/******/ 			"greendrop/css/main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkgreen"] = self["webpackChunkgreen"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/main","greendrop/css/main"], () => (__webpack_require__("./src/js/index.js")))
/******/ 	__webpack_require__.O(undefined, ["css/main","greendrop/css/main"], () => (__webpack_require__("./src/scss/main.scss")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/main","greendrop/css/main"], () => (__webpack_require__("./src/greendrop/scss/main.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;